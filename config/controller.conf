#
# Copyright (c) 2019 Dell Inc., or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#

## Instructions for using this file:
# 1. Settings are namespaced. The prefix indicates the component for which the configuration applies.
# 2. Most settings have default values hardcoded inside the code. Those are commented out (with the default value set)
#    in this file.
# 3. Some settings do not have overrides and require a value be set in this file (or via command-line). Those settings
#    are labeled with the label 'Required.' in this file.
# 4. Each setting (especially non-string ones) have a label named 'Valid values' which describes how a valid value should
#    look like.
# 5. Most settings have 'Recommended values'. These are guidelines (but not requirements) as to how to properly set the
#    values for those settings based on desired use cases.
#
# Each of these settings can be overridden from the command like by specifying a Java System Property.
# Example: setting 'controller.server.port' has a default value of 9090, but it can be overridden to a different
#          value via the command-line:
#                java -Dcontroller.port=5689 ...
#          which will set the value for that setting to 5689, regardless of what this file contains.



# General

controller.containerCount=${CONTAINER_COUNT}
controller.hostMonitorEnabled=${HOST_MONITOR_ENABLE}

# Minimum time between any two rebalance operation in seconds. 0 indicates no waits.
controller.minRebalanceIntervalSeconds=${CLUSTER_MIN_REBALANCE_INTERVAL}

# Whether to send server-side stack traces on failed requests to the client side or not.
controller.replyWithStackTraceOnError={REPLY_WITH_STACK_TRACE_ON_ERROR}

# Whether we enable tracing client requests end to end.
controller.requestTracingEnabled=${REQUEST_TRACING_ENABLED}

# Service

controller.service.port=${CONTROLLER_SERVER_PORT}
controller.service.asyncTaskPoolSize=${ASYNC_TASK_POOL_SIZE}
controller.service.hostIp=${SERVICE_HOST_IP}
controller.service.hostPort=${SERVICE_HOST_PORT}
controller.service.publishedRPCHost=${CONTROLLER_RPC_PUBLISHED_HOST}
controller.service.publishedRPCPort=${CONTROLLER_RPC_PUBLISHED_PORT}
controller.service.cluster=${CLUSTER_NAME}
controller.service.restIp=${REST_SERVER_IP}
controller.service.restPort=${REST_SERVER_PORT}

# Auth

# Enable the Zookeeper based segment container monitor.
controller.auth.enabled=${AUTHORIZATION_ENABLED}
controller.auth.userPasswordFile=${USER_PASSWORD_FILE}
controller.auth.tlsEnabled=${TLS_ENABLED}
controller.auth.tlsCertFile=${TLS_CERT_FILE}
controller.auth.tlsTrustStore=${TLS_TRUST_STORE}
controller.auth.tlsKeyFile=${TLS_KEY_FILE}
controller.auth.tokenSigningKey=${TOKEN_SIGNING_KEY}

controller.zk.url=${ZK_URL}
controller.zk.retryIntervalMillis=${ZK_RETRY_SLEEP_MS}
controller.zk.maxRetries=${ZK_MAX_RETRIES}
controller.zk.sessionTimeoutMillis=${ZK_SESSION_TIMEOUT_MS}
controller.zk.secureConnection=${SECURE_ZK}

controller.retention.frequencyMinutes=${RETENTION_FREQUENCY_MINUTES}
controller.retention.bucketCount=${BUCKET_COUNT}
controller.retention.threadCount=${RETENTION_THREAD_POOL_SIZE}

# Transactions

controller.transaction.minLeaseValue=${MIN_LEASE_VALUE}
controller.transaction.maxLeaseValue=${MAX_LEASE_VALUE}
controller.transaction.ttlHours=${COMPLETED_TXN_TTL_IN_HOURS}


# AutoScaling
controller.scale.streamName=_requestStream
controller.scale.readerGroup=scaleGroup
