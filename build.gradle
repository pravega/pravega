/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'kandha' at '4/27/16 4:35 PM' with Gradle 2.11
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.11/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.org.jruyi.gradle:thrift-gradle-plugin:0.3.1"
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'checkstyle'

    checkstyle {
        toolVersion = "7.1"
    }

    repositories {
        // Use 'jcenter' for resolving your dependencies.
        // You can declare any Maven/Ivy/file repository here.
        jcenter()
        mavenCentral()
        mavenLocal()
        maven {
            url "http://maven.twttr.com"
        }
    }

    checkstyle {
        configFile = new File(rootDir, "checkstyle/checkstyle.xml")
        configProperties = [importControlFile: "$rootDir/checkstyle/import-control.xml"]
    }

    dependencies {
        // The production code uses the SLF4J logging API at compile time
        compile 'org.slf4j:slf4j-api:1.7.14'
        compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
        compile group: 'ch.qos.logback', name: 'logback-core', version: '1.1.7'
        // https://mvnrepository.com/artifact/com.emc.ecs/object-client
        compile group: 'com.emc.ecs', name: 'object-client', version: '2.2.2'
        compile 'org.scala-lang:scala-library:2.11.7'

        // Declare the dependency for your favourite test framework you want to use in your tests.
        // TestNG is also supported by the Gradle Test task. Just change the
        // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
        // 'test.useTestNG()' to your build script.
        testCompile 'junit:junit:4.12'
        compile group: 'com.google.guava', name: 'guava', version: '19.0'
        compile 'org.projectlombok:lombok:1.16.8'
        compile 'io.netty:netty-all:4.0.36.Final'
        // put maven reference for twitter DL
        testCompile "org.mockito:mockito-core:2.+"
    }

}

def pkgs = ['common', 'clients:streming', 'service:server', 'integrationtests']

project('common') {
    dependencies {
        testCompile project(':testcommon')
    }
}


project('clients:streaming') {
    dependencies {
        compile project(':common')
        testCompile project(':testcommon')
    }
}

project('testcommon') {
    dependencies {
        compile 'junit:junit:4.12'
    }
}

project('service:contracts') {
    dependencies {
        compile project(':common')
        testCompile project(':testcommon')
    }
}

project('service:storage') {
    dependencies {
        compile project(':common')
        compile project(':service:contracts')
        testCompile project(':testcommon')
    }
}

project('service:storage:impl') {
    dependencies {
        compile 'com.twitter:distributedlog-core:0.3.51-RC1'
        compile 'com.twitter:distributedlog-client:0.3.51-RC1'
        compile project(':common')
        compile project(':service:storage')
        testCompile project(':testcommon')
    }
}

project('service:server') {
    dependencies {
        compile project(':common')
        compile project(':service:contracts')
        compile project(':service:storage')
        testCompile project(':testcommon')
    }
}

project('service:server:host') {
    dependencies {
        compile project(':common')
        compile project(':service:contracts')
        compile project(':service:storage')
        compile project(':service:storage:impl')
        compile project(':service:server')
        testCompile project(':testcommon')
    }
}

project('integrationtests') {
    dependencies {
        compile project(':common')
        compile project(':clients:streaming')
        compile project(':service:server')
        compile project(':service:server:host')
        testCompile project(':testcommon')
        testCompile files(project(':common').sourceSets.test.output)
        testCompile files(project(':clients:streaming').sourceSets.test.output)
        testCompile files(project(':service:server').sourceSets.test.output)
        testCompile files(project(':service:server:host').sourceSets.test.output)
    }
    task startServer(type: JavaExec) {
        main = "com.emc.pravega.service.server.host.ServiceStarter"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startServerInteractive(type: JavaExec) {
        main = "com.emc.pravega.service.server.host.InteractiveStreamSegmentStoreTester"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startBenchmark(type: JavaExec) {
        main = "com.emc.pravega.service.server.host.ServiceBenchmark"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }


    task startProducer(type: JavaExec) {
        main = "com.emc.pravega.demo.StartProducer"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }
}


project('benchmark') {
    dependencies {
        compile project(':common')
        compile project(':clients:streaming')
        compile project(':service:server')
        compile project(':service:server:host')
        testCompile project(':testcommon')
        testCompile files(project(':common').sourceSets.test.output)
        testCompile files(project(':clients:streaming').sourceSets.test.output)
        testCompile files(project(':service:server').sourceSets.test.output)
        testCompile files(project(':service:server:host').sourceSets.test.output)
    }

    task startProducer(type: JavaExec) {
        main = "com.emc.pravega.demo.StartECSProducer"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }
}

project('controller') {
    dependencies {
        testCompile project(':testcommon')
    }
}

project('controller:contract') {

    apply plugin: "org.jruyi.thrift"

    compileThrift {
        recurse true
        sourceDir "$projectDir/src/main/thrift"
        outputDir "$projectDir/src/generated"
        generator 'java', 'private-members', 'hashcode'
    }

    sourceSets {
        main.java.srcDirs += "$projectDir/src/generated/gen-java"
    }

    tasks.compileJava.dependsOn(compileThrift)

    checkstyle {
        // Exclude generated code from Checkstyle checks
        sourceSets -= sourceSets.main
    }

    dependencies {
        // https://mvnrepository.com/artifact/org.apache.thrift/libthrift
        compile group: 'org.apache.thrift', name: 'libthrift', version: '0.9.3'
        compile project(":clients:streaming") //TODO: All the model components used should be moved to seperate library.
    }
}

project('controller:client') {
    dependencies {
        compile project(":controller:contract")
    }
}

project('controller:server') {
    apply plugin: 'application'
    mainClassName = "com.emc.pravega.controller.server.Main"
    //applicationDefaultJvmArgs = ["-Dlog4j.configuration=conf/log4j.properties"]

    dependencies {
        compile project(":controller:contract")
    }
}
