/**
 *
 *  Copyright (c) 2017 Dell Inc., or its subsidiaries.
 *
 */

// Apply the java plugin to add support for Java
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'com.google.protobuf', name:'protobuf-gradle-plugin', version: protobufGradlePlugin
        classpath group: 'com.github.jengelman.gradle.plugins', name:'shadow', version: shadowGradlePlugin
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'

    version = pravegaVersion
    archivesBaseName = "pravega" + project.path.replace(':', '-')

    checkstyle {
        toolVersion = checkstyleToolVersion
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            html.enabled false
        }
    }

    test { finalizedBy jacocoTestReport }

    tasks.withType(FindBugs) {
        effort = "default"
        includeFilter = file("$rootDir/checkstyle/findbugs-include.xml")
        excludeFilter = file("$rootDir/checkstyle/findbugs-exclude.xml")
        reports {
            xml.enabled false
            html.enabled true
        }
    }
    compileJava {
        options.compilerArgs << "-Xlint:deprecation" << "-Xlint:divzero" << "-Xlint:empty" << "-Xlint:fallthrough" << "-Xlint:finally" << "-Xlint:overrides" << "-Xlint:path" << "-Werror"
    }

    repositories {
        // Use 'jcenter' for resolving your dependencies.
        // You can declare any Maven/Ivy/file repository here.
        jcenter()
        mavenCentral()
        mavenLocal()
    }

    checkstyle {
        configFile = new File(rootDir, "checkstyle/checkstyle.xml")
        configProperties = [importControlFile: "$rootDir/checkstyle/import-control.xml"]
    }

    dependencies {
        // The production code uses the SLF4J logging API at compile time
        compile group: 'org.slf4j', name:'slf4j-api', version: slf4jApiVersion
        testCompile group: 'junit', name:'junit', version: junitVersion
        testCompile "org.mockito:mockito-core:${mockitoVersion}"
    }

    publishing {
        repositories {
            maven {
                credentials {
                    username = "$repoUser"
                    password = "$repoPass"
                }
                url = "$repoUrl"
            }
        }
        publications {
            maven(MavenPublication) {
                groupId = System.properties['groupId'] ? System.properties['groupId'].toString() : "io.pravega"
                version = pravegaVersion
            }
        }
    }

    tasks.withType(GroovyCompile) {
        groovyOptions.fork = false
    }

    tasks.withType(Test) {
        systemProperties 'logback.configurationFile' : new File(buildDir,'resources/test/logback.xml').absolutePath
        testLogging.showStandardStreams = false
        testLogging.exceptionFormat = "FULL"
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        testLogging.events = ["PASSED", "FAILED"]
        maxParallelForks = System.properties['maxParallelForks'] ? System.properties['maxParallelForks'].toInteger() : 1
        minHeapSize = "128m"
        maxHeapSize = "512m"
    }
}

project('common') {
    dependencies {
        testCompile project(':test:common')
        testCompile group: 'org.apache.curator', name: 'curator-test', version: apacheCuratorVersion
        compile group: 'org.apache.curator', name: 'curator-recipes', version: apacheCuratorVersion
        compile group: 'commons-io', name: 'commons-io', version: commonsioVersion
        compile group: 'com.google.guava', name: 'guava', version: guavaVersion
        compile group: 'commons-lang', name: 'commons-lang', version: commonsLangVersion
        compile group: 'com.google.code.findbugs', name: 'jsr305', version: googleCodeFindBugsJsr305Version
        compile group: 'org.projectlombok', name: 'lombok', version: lombokVersion
        compile group: 'io.netty', name: 'netty-all', version: nettyVersion
    }
    jar {
        from project.sourceSets.main.output
        from project(":test:common").sourceSets.main.output
    }
    publishing {
        publications {
            maven(MavenPublication) {
                artifactId 'pravega-common'
                from components.java
            }
        }
    }
    javadoc {
        title = "Pravega Common Libraries"
        failOnError = false
        source {
            project(':common').sourceSets.main.java
            project(':shared:protocol').sourceSets.main.java
        }
    }
}

project ('shared') {
    dependencies {
        compile group: 'org.projectlombok', name: 'lombok', version: lombokVersion
        compile group: 'com.google.guava', name: 'guava', version: guavaVersion
    }
    publishing {
        publications {
            maven(MavenPublication) {
                artifactId 'pravega-shared'
                from components.java
            }
        }
    }
    javadoc {
        exclude 'io/pravega/shared/*'
    }
}

project ('shared:metrics') {
   dependencies {
       compile group: 'org.projectlombok', name: 'lombok', version: lombokVersion
       compile group: 'com.readytalk', name :'metrics3-statsd', version : metrics3StatsdVersion
       // https://mvnrepository.com/artifact/io.dropwizard.metrics/metrics-core
       compile group: 'io.dropwizard.metrics', name: 'metrics-core', version: metricsVersion
       // https://mvnrepository.com/artifact/io.dropwizard.metrics/metrics-jvm
       compile group: 'io.dropwizard.metrics', name: 'metrics-jvm', version: metricsVersion
       // https://mvnrepository.com/artifact/io.dropwizard.metrics/metrics-graphite
       compile group: 'io.dropwizard.metrics', name: 'metrics-graphite', version: metricsVersion
       // https://mvnrepository.com/artifact/io.dropwizard.metrics/metrics-ganglia
       compile group: 'io.dropwizard.metrics', name: 'metrics-ganglia', version: metricsVersion
       // https://mvnrepository.com/artifact/info.ganglia.gmetric4j/gmetric4j
       compile group: 'info.ganglia.gmetric4j', name: 'gmetric4j', version: metricsGangliaVersion
       compile project(':common')
   }
   publishing {
        publications {
            maven(MavenPublication) {
                artifactId 'pravega-shared-metrics'
                pom.withXml {
                    asNode().appendNode('repositories', '').appendNode('repository','').
                            appendNode('id','jcenter').parent().
                            appendNode('name','JCenter Repository').parent().
                            appendNode('url','http://jcenter.bintray.com')
                }
                from components.java
            }
        }
    }
    javadoc {
        exclude 'io/pravega/shared/*'
    }
}

project('shared:protocol') {
    dependencies {
        compile group: 'io.netty', name: 'netty-all', version: nettyVersion
        compile group: 'org.projectlombok', name: 'lombok', version: lombokVersion
        compile group: 'com.google.guava', name: 'guava', version: guavaVersion
        compile group: 'com.google.code.findbugs', name: 'jsr305', version: googleCodeFindBugsJsr305Version
    }
    publishing {
        publications {
            maven(MavenPublication) {
                artifactId 'pravega-shared-protocol'
                from components.java
            }
        }
    }
}

project('clients:streaming') {
    dependencies {
        compile group: 'com.google.guava', name: 'guava', version: guavaVersion
        compile group: 'com.google.code.findbugs', name: 'jsr305', version: googleCodeFindBugsJsr305Version
        compile group: 'org.projectlombok', name: 'lombok', version: lombokVersion
        compile group: 'io.netty', name: 'netty-all', version: nettyVersion
        compile project(':common')
        compile project(':shared')
        compile project(':shared:protocol')
        compile project(":shared:controller")
        testCompile project(':test:common')
    }
    publishing {
        publications {
            maven(MavenPublication) {
                artifactId 'pravega-clients'
                from components.java
            }
        }
    }
    javadoc {
        title = "Pravega Client API"
        failOnError = false
        exclude "**/impl/**";
        source  =  project(':clients:streaming').sourceSets.main.java
    }
}

project('test:common') {
    dependencies {
        compile group: 'junit', name :'junit', version: junitVersion
        compile group: 'com.google.guava', name: 'guava', version: guavaVersion
        compile group: 'commons-lang', name: 'commons-lang', version: commonsLangVersion
        compile group: 'com.google.code.findbugs', name: 'jsr305', version: googleCodeFindBugsJsr305Version
        compile group: 'org.projectlombok', name: 'lombok', version: lombokVersion
        compile group: 'commons-io', name: 'commons-io', version: commonsioVersion
        compile group: 'io.netty', name: 'netty-all', version: nettyVersion
        compile group: 'org.apache.curator', name: 'curator-test', version: apacheCuratorVersion
    }
}

project('service:contracts') {
    dependencies {
        compile project(':common')
        testCompile project(':test:common')
    }
    publishing {
        publications {
            maven(MavenPublication) {
                artifactId 'pravega-service-contracts'
                from components.java
            }
        }
    }
}

project('service:storage') {
    dependencies {
        compile project(':common')
        compile project(':service:contracts')
        compile project(':shared:metrics')
        testCompile project(':test:common')
    }
    publishing {
        publications {
            maven(MavenPublication) {
                artifactId 'pravega-service-storage'
                from components.java
            }
        }
    }
}

project('service:storage:impl') {
    dependencies {
        compile (group: 'org.apache.bookkeeper', name: 'bookkeeper-server', version: bookKeeperVersion) {
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        }

        compile group: 'org.rocksdb', name: 'rocksdbjni', version: rocksdbjniVersion

        // https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-common
        compile group: 'org.apache.hadoop', name: 'hadoop-common', version:hadoopVersion

        // https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-common
        compile group: 'org.apache.hadoop', name: 'hadoop-hdfs', version: hadoopVersion
        testCompile group: 'org.apache.hadoop', name: 'hadoop-minicluster', version: hadoopVersion
        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion

        compile project(':common')
        compile project(':service:storage')
        compile project(':shared:metrics')
        testCompile project(':test:common')
        testCompile files(project(':service:storage').sourceSets.test.output)
    }
    publishing {
        publications {
            maven(MavenPublication) {
                artifactId 'pravega-service-storage-impl'
                from components.java
            }
        }
    }
}

project('service:server') {
    dependencies {
        compile project(':common')
        compile project(':service:contracts')
        compile project(':service:storage')
        compile project(':shared:metrics')
        testCompile project(':test:common')
    }
    publishing {
        publications {
            maven(MavenPublication) {
                artifactId 'pravega-service-server'
                from components.java
            }
        }
    }
}

project('service:server:host') {
    apply plugin: 'application'
    applicationName = "pravega-segmentstore"
    mainClassName = "io.pravega.service.server.host.ServiceStarter"

    applicationDefaultJvmArgs = ["-server", "-Xms512m", "-XX:+HeapDumpOnOutOfMemoryError",
                                 "-Dlog.dir=SERVER_APP_HOME/logs",
                                 "-Dlog.name=segmentstore",
                                 "-Dpravega.configurationFile=SERVER_APP_HOME/conf/config.properties",
                                 "-Dlogback.configurationFile=SERVER_APP_HOME/conf/logback.xml"]

    applicationDistribution.from('src/config') {
        into "conf"
    }

    startScripts {
        doLast {
            unixScript.text = unixScript.text.replace('SERVER_APP_HOME', '\$APP_HOME')
            windowsScript.text = windowsScript.text.replace('SERVER_APP_HOME', '%~dp0..')
        }
    }
    dependencies {
        compile project(':common')
        compile project(':service:contracts')
        compile project(':clients:streaming')
        compile project(':service:storage')
        compile project(':service:storage:impl')
        compile project(':service:server')
        compile group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion
        testCompile project(':test:common')
        testCompile group: 'org.apache.curator', name: 'curator-test', version: apacheCuratorVersion
        testCompile files(project(':service:server').sourceSets.test.output)
        testCompile group: 'org.apache.hadoop', name: 'hadoop-minicluster', version: hadoopVersion
        testCompile files(project(':service:storage:impl').sourceSets.test.output)
    }
    publishing {
        publications {
            maven(MavenPublication) {
                artifactId 'pravega-service-server-host'
                from components.java
            }
        }
    }
}

project('test:integration') {
    dependencies {
        compile project(':common')
        compile project(':clients:streaming')
        compile project(':service:server')
        compile project(':service:server:host')
        compile project(':controller:server')
        compile project(':connectors:flink')
        compile project(':test:common')
        compile group: 'junit', name:'junit', version: junitVersion
        compile group: 'org.apache.curator', name: 'curator-test', version: apacheCuratorVersion
        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion
        testCompile group: 'org.apache.flink', name: 'flink-tests_2.11', version: flinkVersion
        testCompile group: 'org.apache.flink', name: 'flink-test-utils_2.11', version: flinkVersion
        testCompile group: 'org.apache.flink', name: 'flink-streaming-contrib_2.11', version: flinkVersion
        testCompile group: 'org.apache.commons', name: 'commons-csv', version: apacheCommonsCsvVersion
        testCompile files(project(':common').sourceSets.test.output)
        testCompile files(project(':shared:protocol').sourceSets.test.output)
        compile files(project(':clients:streaming').sourceSets.test.output)
        testCompile files(project(':service:server').sourceSets.test.output)
        testCompile files(project(':service:server:host').sourceSets.test.output)
    }

    task startServer(type: JavaExec) {
        main = "io.pravega.service.server.host.ServiceStarter"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startServerInteractive(type: JavaExec) {
        main = "io.pravega.service.server.host.InteractiveStreamSegmentStoreTester"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startBenchmark(type: JavaExec) {
        main = "io.pravega.service.server.host.ServiceBenchmark"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startLocalService(type: JavaExec) {
        main = "io.pravega.test.integration.demo.StartLocalService"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startWriter(type: JavaExec) {
        main = "io.pravega.test.integration.demo.StartWriter"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startReader(type: JavaExec) {
        main = "io.pravega.test.integration.demo.StartReader"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startController(type: JavaExec) {
        main = "io.pravega.controller.server.Main"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startScaleTest(type: JavaExec) {
        main = "io.pravega.test.integration.demo.ScaleTest"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startEndToEndTransactionTest(type: JavaExec) {
        main = "io.pravega.test.integration.demo.EndToEndTransactionTest"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startEventProcessorTest(type: JavaExec) {
        main = "io.pravega.test.integration.demo.EventProcessorTest"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }
}

project('controller') {
    dependencies {
        testCompile project(':test:common')
    }
}

project('shared:controller') {
    apply plugin: 'com.google.protobuf'
    protobuf {
        protoc {
            artifact = "com.google.protobuf:protoc:${protobufProtocVersion}"
        }
        plugins {
            grpc {
                artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
            }
        }
        generatedFilesBaseDir = "$projectDir/src/generated/grpc-java"
        generateProtoTasks {
            all()*.plugins {
                grpc {}
            }
        }
    }

    clean {
        delete protobuf.generatedFilesBaseDir
    }

    sourceSets {
        main.java.srcDirs "${protobuf.generatedFilesBaseDir}/main/java"
        main.java.srcDirs "${protobuf.generatedFilesBaseDir}/main/grpc"
    }

    dependencies {
        compile group: 'io.grpc', name: 'grpc-netty', version: grpcVersion
        compile group: 'io.grpc', name: 'grpc-protobuf', version: grpcVersion
        compile group: 'io.grpc', name: 'grpc-stub', version: grpcVersion
        compile group: 'org.apache.commons', name: 'commons-lang3', version: commonsLang3ControllerContractVersion
        compile group: 'commons-lang', name: 'commons-lang', version: commonsLangVersion
        compile group: 'org.projectlombok', name: 'lombok', version: lombokVersion
        compile group: 'commons-io', name: 'commons-io', version: commonsioVersion
        compile group: 'io.netty', name: 'netty-all', version: nettyVersion
    }
    publishing {
        publications {
            maven(MavenPublication) {
                artifactId 'pravega-shared-controller'
                from components.java
            }
        }
    }
    javadoc {
        exclude 'io/pravega/controller/*'
    }
}

project('controller:server') {
    sourceSets {
        main.resources.srcDirs += "$projectDir/src/conf"
    }

    checkstyle {
        // Exclude generated code from Checkstyle checks
        checkstyleMain.exclude '**/rest/generated/**'
    }

    apply plugin: 'application'
    applicationName = "pravega-controller"
    mainClassName = "io.pravega.controller.server.Main"
    applicationDefaultJvmArgs = ["-server", "-Xms128m", "-XX:+HeapDumpOnOutOfMemoryError",
                                 "-Dconfig.file=CONTROLLER_APP_HOME/conf/controller.conf",
                                 "-Dlogback.configurationFile=CONTROLLER_APP_HOME/conf/logback.xml",
                                 "-Dlog.dir=CONTROLLER_APP_HOME/logs",
                                 "-Dlog.name=controller"]

    applicationDistribution.from('src/conf') {
        into "conf"
        rename "application.conf", "controller.conf"
    }

    startScripts {
        doLast {
            unixScript.text = unixScript.text.replace('CONTROLLER_APP_HOME', '\$APP_HOME')
            windowsScript.text = windowsScript.text.replace('CONTROLLER_APP_HOME', '%~dp0..')
        }
    }

    dependencies {
        compile project(':common')
        compile project(":shared:controller")
        compile project(":clients:streaming")
        compile project(":shared:metrics")
        runtime group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion
        compile group: 'javax.servlet', name: 'servlet-api', version: javaxServletApiVersion
        compile(group: 'io.swagger', name : 'swagger-jersey2-jaxrs', version :swaggerJersey2JaxrsVersion) {
            exclude group: 'com.google.guava', module: 'guava'
        }

        compile group: 'com.typesafe', name: 'config', version: typesafeConfigVersion
        compile group: 'org.apache.curator', name: 'curator-framework', version: apacheCuratorVersion
        compile group: 'org.apache.curator', name: 'curator-recipes', version: apacheCuratorVersion
        compile group: 'org.apache.curator', name: 'curator-client', version: apacheCuratorVersion
        compile group: 'org.apache.commons', name: 'commons-lang3', version: commonsLang3Version
        compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-netty-http', version: jerseyVersion
        compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: jerseyVersion
        testCompile project(':test:common')
        testCompile group: 'org.glassfish.jersey.test-framework.providers', name: 'jersey-test-framework-provider-netty', version: jerseyVersion
        testCompile group: 'org.apache.curator', name: 'curator-test', version: apacheCuratorVersion
    }

    publishing {
        publications {
            maven(MavenPublication) {
                artifactId 'pravega-controller-server'
                from components.java
            }
        }
    }
}

project('connectors:flink') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile project(":clients:streaming")
        compileOnly group: 'org.apache.flink', name: 'flink-streaming-java_2.11', version: flinkVersion

        //  configuring the shaded pom dependencies
        shadow group: 'org.slf4j', name:'slf4j-api', version: slf4jApiVersion
        shadow group: 'org.apache.flink', name: 'flink-streaming-java_2.11', version: flinkVersion
    }

    shadowJar {
        dependencies {
            // 'include' specific dependencies in the shadow jar
            // IMPORTANT: transitive dependencies must be manually listed here!
            include dependency("com.google.guava:guava")
            include dependency("commons-lang:commons-lang")
            include dependency("org.apache.commons:commons-lang3")
            include dependency("commons-io:commons-io")
            include dependency("io.netty:netty-common")
            include dependency("io.netty:netty-buffer")
            include dependency("io.netty:netty-resolver")
            include dependency("io.netty:netty-transport")
            include dependency("io.netty:netty-codec")
            include dependency("io.netty:netty-codec-http")
            include dependency("io.netty:netty-codec-http2")
            include dependency("io.netty:netty-codec-socks")
            include dependency("io.netty:netty-handler")
            include dependency("io.netty:netty-handler-proxy")
            include dependency("io.grpc:grpc-core")
            include dependency("io.grpc:grpc-protobuf")
            include dependency("io.grpc:grpc-stub")
            include dependency("io.grpc:grpc-context")
            include dependency("io.grpc:grpc-netty")
            include dependency("io.grpc:grpc-protobuf-lite")
            include dependency("com.google.protobuf:protobuf-java-util")
            include dependency("com.google.protobuf:protobuf-java")
            include dependency("com.google.code.gson:gson")
            include dependency("com.google.instrumentation:instrumentation-api")
            include(project(":common"))
            include(project(":shared:protocol"))
            include(project(":shared:metrics"))
            include(project(":shared:controller"))
            include(project(":clients:streaming"))
        }

        // Shading the libraries which could cause potential version conflicts with flink.
        relocate "com.google", "io.pravega.shaded.com.google"
        relocate "org.apache.commons", "io.pravega.shaded.org.apache.commons"
        relocate "io.grpc", "io.pravega.shaded.io.grpc"
        relocate "io.netty", "io.pravega.shaded.io.netty"

        mergeServiceFiles()
    }

    // Publishing both shaded and non-shaded versions of the flink connector.
    publishing {
        publications {
            maven(MavenPublication) {
                artifactId 'pravega-connectors-flink_2.11'
                from components.java
            }
            shadow(MavenPublication) {
                groupId = System.properties['groupId'] ? System.properties['groupId'].toString() : "io.pravega"
                version = pravegaVersion
                artifactId 'pravega-connectors-flink-shaded_2.11'
                from components.shadow
            }
        }
    }
}

project('singlenode') {
    apply plugin: 'application'
    applicationName = "pravega-standalone"
    mainClassName = "io.pravega.local.LocalPravegaEmulator"
    applicationDefaultJvmArgs = ["-server", "-Xmx4g", "-XX:+HeapDumpOnOutOfMemoryError",
                                 "-Dlogback.configurationFile=PRAVEGA_APP_HOME/conf/logback.xml",
                                 "-Dlog.dir=PRAVEGA_APP_HOME/logs",
                                 "-Dlog.name=pravega"]
    startScripts {
        doLast {
            unixScript.text = unixScript.text.replace('PRAVEGA_APP_HOME', '\$APP_HOME')
            windowsScript.text = windowsScript.text.replace('PRAVEGA_APP_HOME', '%~dp0..')
        }
    }

    dependencies {
        compile project(':common')
        compile project(':clients:streaming')
        compile project(':service:server')
        compile project(':service:server:host')
        compile project(':controller:server')
        compile project(':service:contracts')
        compile project(':service:storage')
        compile project(':service:storage:impl')

        runtime group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion
        compile group: 'org.apache.curator', name: 'curator-test', version: apacheCuratorVersion
        // https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-common
        compile group: 'org.apache.hadoop', name: 'hadoop-common', version: hadoopVersion
        compile group: 'org.apache.hadoop', name: 'hadoop-hdfs', version: hadoopVersion
        compile group: 'org.apache.hadoop', name: 'hadoop-minicluster', version: hadoopVersion

        testCompile project(':test:common')
        testCompile files(project(':common').sourceSets.test.output)
        testCompile files(project(':service:server').sourceSets.test.output)
        testCompile files(project(':service:server:host').sourceSets.test.output)
    }

    task startSinglenode(type: JavaExec) {

        main = "io.pravega.local.LocalPravegaEmulator"
        classpath = sourceSets.main.runtimeClasspath
        environment "JAVA_OPTS", "-Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=8000,suspend=y"
    }

    publishing {
        publications {
            maven(MavenPublication) {
                artifactId 'pravega-singlenode'
                from components.java
            }
        }
    }
}

project('test:system') {
    dependencies {
        // https://mvnrepository.com/artifact/com.mesosphere/marathon-client
        runtime group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion
        compile group: 'com.mesosphere', name: 'marathon-client', version: marathonClientVersion
        compile project(':controller:server')
        compile project(":clients:streaming")
        compile project(":test:common")
        compile group: 'junit', name: 'junit', version: junitVersion
        compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: javaxwsrsApiVersion
        compile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: jerseyVersion
        compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: jerseyVersion
    }
    //disable the default test task.
    test {
        exclude 'io/pravega/**'
    }

    jar { //create a fat jar
        archiveName = "test-collection.jar"
        from {
            (configurations.runtime).collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }
        from sourceSets.test.output
    }

    //This is  used to invoke systemTests
    task startSystemTests(type: Test) {
        dependsOn 'publish'
        description 'Used to invoke system tests, example usage: gradle startSystemTests -DmasterIP=xx.xx.xx.xx'
        testClassesDir = sourceSets.test.output.classesDir
        classpath = sourceSets.test.runtimeClasspath

        systemProperty "test_collection_jar_path", "$jar.archivePath.path"
        systemProperty "execType", System.getProperty("execType")
        systemProperty "masterIP", System.getProperty("masterIP")
        systemProperty "imageVersion", System.getProperty("imageVersion")
        systemProperty "skipServiceInstallation", System.getProperty("skipServiceInstallation")

        if (System.getProperty("execType") == null) {
            systemProperty "execType", "REMOTE_SEQUENTIAL"
        }
        if (System.getProperty("masterIP") == null) {
            systemProperty "masterIP", "INVALID_MASTER_IP"
        }
        if (System.getProperty("imageVersion") == null) {
            systemProperty "imageVersion", "INVALID_IMAGE_VERSION"
        }
        if (System.getProperty("skipServiceInstallation") == null) {
            //skipServiceInstallation by default.
            systemProperty "skipServiceInstallation", "true"
        }
        maxParallelForks = 1
        systemProperty "dockerImageRegistry", project.property("dockerRegistryUrl")
        systemProperty "testVersion", project.property("pravegaVersion")
        systemProperty "testArtifactUrl", project.property('repoUrl') + "/io/pravega/pravega-test-system/" +
                pravegaVersion+"/pravega-test-system-"+ pravegaVersion + ".jar"
    }
    publishing {
        publications {
            maven(MavenPublication) {
                artifactId 'pravega-test-system'
                from components.java
            }
        }
    }
}

subprojects {
    task allDeps(type: DependencyReportTask) {}
}

task publishAllJars() {
    dependsOn ':clients:streaming:publish'
    dependsOn ':common:publish'
    dependsOn ':shared:publish'
    dependsOn ':shared:protocol:publish'
    dependsOn ':service:contracts:publish'
    dependsOn ':service:storage:publish'
    dependsOn ':service:storage:impl:publish'
    dependsOn ':service:server:publish'
    dependsOn ':service:server:host:publish'
    dependsOn ':shared:metrics:publish'
    dependsOn ':shared:controller:publish'
    dependsOn ':controller:server:publish'
    dependsOn ':connectors:flink:publish'
    dependsOn ':singlenode:publish'
    dependsOn ':test:system:publish'
}

task sourceCopy(type: Copy) {
    from rootDir
    into 'source'
}

task sourceTar(type: Tar) {
    dependsOn 'sourceCopy'
    from  'source'
    destinationDir = file('sourceArtifacts')
    extension = 'tgz'
    compression = Compression.GZIP
}

task genJavaDocs(type: Javadoc) {
    dependsOn 'clients:streaming:javadoc'
}

task javadocs(type: Javadoc) {
    description = "Generate main pravega javadoc"

    // Include names of any project that is to be included in the javadoc distribution
    ext.projects = [':clients:streaming', ':common', ':shared:protocol']

    title = "Pravega API"
    source = files(projects.collect {
        project(it).sourceSets.main.allJava
    })
    classpath = files(projects.collect {
        project(it).sourceSets.main.output + project(it).sourceSets.main.compileClasspath
    })
    failOnError = false
    exclude "**/impl/**"
}

apply plugin: 'distribution'
distributions {
    main {
        baseName = "pravega"
        contents {
            duplicatesStrategy = "exclude"
            from ("dist/conf") {
                into "conf"
            }
            from ("config") {
                into "conf"
            }
            from (project(":controller:server").installDist) {
                exclude "logback.xml"
            }
            from (project(":service:server:host").installDist) {
                exclude "logback.xml"
            }
            from (project(":singlenode").installDist)
        }
    }
    client {
        baseName = "pravega-client"
        contents {
            from { project(":clients:streaming").configurations.runtime }
            from { project(":clients:streaming").configurations.runtime.allArtifacts.files }
        }
    }
    javadoc {
        baseName = "pravega-javadoc"
        contents {
            from (javadocs)
        }
    }
}

tasks.withType(Tar) {
    compression = Compression.GZIP
}

task preparePravegaImage(type: Copy) {
    into "${buildDir}/docker/pravega"
    from "docker/pravega"
    from (installDist) {
        into "pravega"
        exclude "**/*.bat"
    }
}

task buildPravegaImage(type: Exec, dependsOn: preparePravegaImage) {
    executable dockerExecutable
    args "build"
    args "-t", "${pravegaBaseTag}:${pravegaVersion}"
    args "-t", "${pravegaBaseTag}:latest"
    args preparePravegaImage.destinationDir.absolutePath
}

task buildBookkeeperImage(type: Exec) {
    executable dockerExecutable
    args "build"
    args "-t", "${bookkeeperBaseTag}:${pravegaVersion}"
    args "-t", "${bookkeeperBaseTag}:latest"
    args "docker/bookkeeper"
}

task docker(dependsOn: [buildPravegaImage, buildBookkeeperImage]) {
    description = "Builds all docker images"
}

task distribution(dependsOn: [assembleDist, assembleClientDist, assembleJavadocDist]) {
    description = "Builds a distribution package"
}
