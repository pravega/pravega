/**
 * Copyright (c) 2017 Dell Inc., or its subsidiaries. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 */
// Apply the java plugin to add support for Java
buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'com.google.protobuf', name:'protobuf-gradle-plugin', version: protobufGradlePlugin
        classpath "gradle.plugin.org.nosphere.apache:creadur-rat-gradle:0.3.0"
        classpath group: 'org.hidetake', name: 'gradle-ssh-plugin', version: gradleSshPluginVersion
        classpath group: 'ru.vyarus', name: 'gradle-mkdocs-plugin', version: gradleMkdocsPluginVersion
        classpath group: 'gradle.plugin.com.github.spotbugs', name: 'spotbugs-gradle-plugin', version: spotbugsPluginVersion
        classpath "org.ajoberstar:grgit:${gradleGitPluginVersion}"
    }
}

if (project.hasProperty("enableMkdocs")) {
    apply from: "$rootDir/gradle/mkdocs.gradle"
}

// apply the plugin outside of allProjects since the plugin attempts to set the grgit property for all the projects
// https://github.com/ajoberstar/grgit/blob/master/src/main/groovy/org/ajoberstar/grgit/gradle/GrgitPlugin.groovy#L27
apply plugin: 'org.ajoberstar.grgit'

allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    if (file("src/main/java").isDirectory()) {
        apply plugin: 'java'
    }
    // Plugin configurations
    apply from: "$rootDir/gradle/application.gradle"
    apply from: "$rootDir/gradle/checkstyle.gradle"
    apply from: "$rootDir/gradle/eclipse.gradle"
    apply from: "$rootDir/gradle/spotbugs.gradle"
    apply from: "$rootDir/gradle/idea.gradle"
    apply from: "$rootDir/gradle/jacoco.gradle"
    apply from: "$rootDir/gradle/java.gradle"
    apply from: "$rootDir/gradle/maven.gradle"
    apply from: "$rootDir/gradle/protobuf.gradle"
    apply from: "$rootDir/gradle/rat.gradle"

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }

    version = getProjectVersion()
    group = "io.pravega"

    configurations.all {
        resolutionStrategy {
            //failOnVersionConflict()
            force "org.slf4j:slf4j-api:" + slf4jApiVersion
            force "org.apache.commons:commons-lang3:" + commonsLang3Version
            force "org.apache.curator:curator-framework:" + apacheCuratorVersion
            force "com.google.protobuf:protobuf-java:" + protobufProtocVersion
            force "io.grpc:grpc-context:" + grpcVersion
            force "com.google.guava:guava:" + guavaVersion
            force "org.glassfish.jersey.core:jersey-common:" + jerseyVersion
            force "org.glassfish.jersey.core:jersey-server:" + jerseyVersion
            dependencySubstitution {
                substitute module("javax.ws.rs:jsr311-api") with module("javax.ws.rs:javax.ws.rs-api:" + javaxwsrsApiVersion)
            }
        }
    }
}

project('common') {
    dependencies {
        testCompile project(':test:testcommon')
        compile group: 'commons-io', name: 'commons-io', version: commonsioVersion
        compile group: 'com.google.guava', name: 'guava', version: guavaVersion
        compile group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: spotbugsAnnotationsVersion
        compile group: 'net.jcip', name: 'jcip-annotations', version: jcipAnnotationsVersion

        compile group: 'org.projectlombok', name: 'lombok', version: lombokVersion
        //Do NOT add any additional dependencies here.
    }

    javadoc {
        title = "Pravega Common Libraries"
        failOnError = false
        source {
            project(':common').sourceSets.main.java
            project(':shared:protocol').sourceSets.main.java
        }
    }
}

def withoutLogger = { exclude group: 'org.slf4j', module: 'slf4j-log4j12'
                      exclude group: 'org.slf4j', module: 'slf4j-simple' }

project('shared:authplugin') {
    dependencies {
    }

    javadoc {
        title = "Pravega Auth API"
        failOnError = false

        source {
            sourceSets.main.java
        }
    }
}

project ('shared') {
    dependencies {
        compile project(':common')
        compile group: 'org.projectlombok', name: 'lombok', version: lombokVersion
        compile group: 'com.google.guava', name: 'guava', version: guavaVersion
        compile group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: spotbugsAnnotationsVersion
        compile group: 'net.jcip', name: 'jcip-annotations', version: jcipAnnotationsVersion
        compile group: 'org.apache.commons', name: 'commons-lang3', version: commonsLang3Version
        compile group: 'org.apache.curator', name: 'curator-recipes', version: apacheCuratorVersion
        testCompile group: 'org.apache.curator', name: 'curator-test', version: apacheCuratorVersion
        testCompile project(':test:testcommon')
    }
    javadoc {
        exclude 'io/pravega/shared/*'
    }
}

project ('shared:metrics') {
    dependencies {
        compile group: 'org.projectlombok', name: 'lombok', version: lombokVersion
        compile group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: spotbugsAnnotationsVersion
        compile group: 'net.jcip', name: 'jcip-annotations', version: jcipAnnotationsVersion

        compile group: 'com.readytalk', name :'metrics3-statsd', version : metrics3StatsdVersion
        // https://mvnrepository.com/artifact/io.dropwizard.metrics/metrics-core
        compile group: 'io.dropwizard.metrics', name: 'metrics-core', version: metricsVersion
        // https://mvnrepository.com/artifact/io.dropwizard.metrics/metrics-jvm
        compile group: 'io.dropwizard.metrics', name: 'metrics-jvm', version: metricsVersion
        // https://mvnrepository.com/artifact/io.dropwizard.metrics/metrics-graphite
        compile group: 'io.dropwizard.metrics', name: 'metrics-graphite', version: metricsVersion
        // https://mvnrepository.com/artifact/io.dropwizard.metrics/metrics-ganglia
        compile group: 'io.dropwizard.metrics', name: 'metrics-ganglia', version: metricsVersion
        // https://mvnrepository.com/artifact/info.ganglia.gmetric4j/gmetric4j
        compile group: 'info.ganglia.gmetric4j', name: 'gmetric4j', version: metricsGangliaVersion
        compile project(':common')
    }

    javadoc {
        exclude 'io/pravega/shared/*'
    }
}

project('shared:protocol') {
    dependencies {
        compile group: 'io.netty', name: 'netty-all', version: nettyVersion
        compile group: 'org.projectlombok', name: 'lombok', version: lombokVersion
        compile group: 'com.google.guava', name: 'guava', version: guavaVersion
        compile group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: spotbugsAnnotationsVersion
        compile group: 'net.jcip', name: 'jcip-annotations', version: jcipAnnotationsVersion
    }
}

project('client') {
    dependencies {
        compile group: 'com.google.guava', name: 'guava', version: guavaVersion
        compile group: 'org.projectlombok', name: 'lombok', version: lombokVersion
        compile group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: spotbugsAnnotationsVersion
        compile group: 'net.jcip', name: 'jcip-annotations', version: jcipAnnotationsVersion
        compile group: 'io.netty', name: 'netty-all', version: nettyVersion

        compile project(':common')
        compile project(':shared')
        compile project(':shared:authplugin')
        compile project(':shared:protocol')
        compile project(":shared:controller-api")
        testCompile project(':test:testcommon')
        testCompile group: 'org.slf4j', name: 'log4j-over-slf4j', version: slf4jApiVersion
        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion
    }

    javadoc {
        title = "Pravega Client API"
        failOnError = false
        exclude "**/impl/**";
    }
}

project('test:testcommon') {
    dependencies {
        compile group: 'junit', name :'junit', version: junitVersion
        compile group: 'com.google.guava', name: 'guava', version: guavaVersion
        compile group: 'org.apache.commons', name: 'commons-lang3', version: commonsLang3Version
        compile group: 'org.projectlombok', name: 'lombok', version: lombokVersion
        compile group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: spotbugsAnnotationsVersion
        compile group: 'net.jcip', name: 'jcip-annotations', version: jcipAnnotationsVersion
        compile group: 'commons-io', name: 'commons-io', version: commonsioVersion
        compile group: 'io.netty', name: 'netty-all', version: nettyVersion
        compile group: 'org.apache.curator', name: 'curator-test', version: apacheCuratorVersion, withoutLogger
    }
}

project('segmentstore:contracts') {
    dependencies {
        compile project(':common')
        testCompile project(':test:testcommon')
    }
}

project('segmentstore:storage') {
    dependencies {
        compile project(':common')
        compile project(':shared')
        compile project(':segmentstore:contracts')
        compile project(':shared:metrics')
        testCompile project(':test:testcommon')
    }
}

project('segmentstore:storage:impl') {
    dependencies {
        compile group: 'org.apache.bookkeeper', name: 'bookkeeper-server', version: bookKeeperVersion, withoutLogger

        compile group: 'org.rocksdb', name: 'rocksdbjni', version: rocksdbjniVersion

        compile project(':common')
        compile project(':segmentstore:storage')
        compile project(':shared:metrics')
        testCompile project(':test:testcommon')
        testCompile project(path:':segmentstore:storage', configuration:'testRuntime')
    }
}

project ('bindings') {
    dependencies {
        // https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-common
        compile group: 'org.apache.hadoop', name: 'hadoop-common', version: hadoopVersion, withoutLogger

        // https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-common
        compile group: 'org.apache.hadoop', name: 'hadoop-hdfs', version: hadoopVersion, withoutLogger
        testCompile group: 'org.apache.hadoop', name: 'hadoop-minicluster', version: hadoopVersion, withoutLogger
        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion

        //For Extended S3
        compile "com.emc.ecs:object-client:3.0.0"
        testCompile group: 'org.gaul', name: 's3proxy', version: '1.5.2'
        testCompile group: 'commons-httpclient', name: 'commons-httpclient', version: '3.1'

        compile project(':common')
        compile project(':segmentstore:storage')
        compile project(':shared:metrics')
        testCompile project(':test:testcommon')
        testCompile project(path: ':segmentstore:storage', configuration: 'testRuntime')
    }
}

project('segmentstore:server') {
    dependencies {
        compile project(':common')
        compile project(':shared')
        compile project(':segmentstore:contracts')
        compile project(':segmentstore:storage')
        compile project(':shared:metrics')
        testCompile project(':test:testcommon')
    }
}

project('segmentstore:server:host') {
    apply plugin: 'application'
    applicationName = "pravega-segmentstore"
    mainClassName = "io.pravega.segmentstore.server.host.ServiceStarter"

    startScripts {
        classpath += files('$APP_HOME/pluginlib')
        doLast {
            def scriptFile = file getUnixScript()
            scriptFile.text = scriptFile.text.replace('$APP_HOME/lib/pluginlib', '$APP_HOME/pluginlib/*')
            def winScriptFile = file getWindowsScript()
            winScriptFile.text = winScriptFile.text.replace('%APP_HOME%\\lib\\pluginlib', '%APP_HOME%\\pluginlib\\*')
        }
    }

    applicationDefaultJvmArgs = ["-server", "-Xms512m", "-XX:+HeapDumpOnOutOfMemoryError",
                                 "-Dlog.dir=PRAVEGA_APP_HOME/logs",
                                 "-Dlog.name=segmentstore",
                                 "-Dpravega.configurationFile=PRAVEGA_APP_HOME/conf/config.properties",
                                 "-Dlogback.configurationFile=PRAVEGA_APP_HOME/conf/logback.xml"]

    applicationDistribution.from('src/config') {
        into "conf"
    }

    dependencies {
        compile project(':common')
        compile project(":shared:authplugin")
        compile project(':segmentstore:contracts')
        compile project(':client')
        compile project(':segmentstore:storage')
        compile project(':segmentstore:storage:impl')
        compile project(':bindings')
        compile project(':segmentstore:server')
        compile group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion
        testCompile project(':test:testcommon')
        testCompile group: 'org.apache.curator', name: 'curator-test', version: apacheCuratorVersion
        testCompile project(path:':segmentstore:server', configuration:'testRuntime')
        testCompile group: 'org.apache.hadoop', name: 'hadoop-minicluster', version: hadoopVersion, withoutLogger
        testCompile project(path:':segmentstore:storage:impl', configuration:'testRuntime')
        testCompile project(path:':bindings', configuration:'testRuntime')
        testCompile group: 'commons-httpclient', name: 'commons-httpclient', version: '3.1'
        compile 'io.jsonwebtoken:jjwt:0.9.0'
    }

    task createAppWithGCLogging(type: CreateStartScripts) {
        applicationName = "pravega-segmentstore-withGCLogging"
        mainClassName = "io.pravega.controller.server.Main"
        defaultJvmOpts = ["-server", "-Xms512m", "-XX:+HeapDumpOnOutOfMemoryError",
                          "-XX:+PrintGCDetails", "-XX:+PrintGCDateStamps",
                          "-Xloggc:PRAVEGA_APP_HOME/logs/gc.log", "-XX:+UseGCLogFileRotation",
                          "-XX:NumberOfGCLogFiles=2", "-XX:GCLogFileSize=64m",
                          "-Dlog.dir=PRAVEGA_APP_HOME/logs",
                          "-Dlog.name=segmentstore",
                          "-Dpravega.configurationFile=PRAVEGA_APP_HOME/conf/config.properties",
                          "-Dlogback.configurationFile=PRAVEGA_APP_HOME/conf/logback.xml"]
        classpath = startScripts.classpath
        outputDir = startScripts.outputDir
    }

    task admin(type: JavaExec) {
        main = "io.pravega.segmentstore.server.host.admin.AdminRunner"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
        systemProperties System.getProperties()
    }

    applicationDistribution.into("bin") {
        from(createAppWithGCLogging)
    }
}

project('test:integration') {
    apply plugin: 'application'
    applicationName = "pravega-selftest"
    mainClassName = "io.pravega.test.integration.selftest.SelfTestRunner"

    applicationDefaultJvmArgs = ["-server", "-Xmx4g", "-XX:+HeapDumpOnOutOfMemoryError",
                                 "-Dlog.dir=PRAVEGA_APP_HOME/logs",
                                 "-Dlog.name=selftest"]

    applicationDistribution.from('src/config') {
        into "conf"
    }

    dependencies {
        compile project(':common')
        compile project(':client')
        compile project(':segmentstore:server')
        compile project(':segmentstore:server:host')
        compile project(':controller')
        compile project(':test:testcommon')
        compile group: 'junit', name:'junit', version: junitVersion
        compile group: 'org.apache.curator', name: 'curator-test', version: apacheCuratorVersion
        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion
        testCompile group: 'org.apache.commons', name: 'commons-csv', version: apacheCommonsCsvVersion
        testCompile project(path:':common', configuration:'testRuntime')
        testCompile project(path:':shared:protocol', configuration:'testRuntime')
        testCompile project(path:':segmentstore:server', configuration:'testRuntime')
        testCompile project(path:':segmentstore:server:host', configuration:'testRuntime')
        testCompile project(path:':shared:metrics', configuration:'testRuntime')

        // Workaround for intellij issue, since we cannot add both the compile dependency and the testRuntime
        // dependency of the client project into the compile scope of the integration tests
        compile files(project(':client').sourceSets.test.output)
    }

    task startServer(type: JavaExec) {
        main = "io.pravega.segmentstore.server.host.ServiceStarter"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startBenchmark(type: JavaExec) {
        main = "io.pravega.segmentstore.server.host.ServiceBenchmark"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startLocalService(type: JavaExec) {
        main = "io.pravega.test.integration.demo.StartLocalService"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startWriter(type: JavaExec) {
        main = "io.pravega.test.integration.demo.StartWriter"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startReader(type: JavaExec) {
        main = "io.pravega.test.integration.demo.StartReader"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startController(type: JavaExec) {
        main = "io.pravega.controller.server.Main"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startScaleTest(type: JavaExec) {
        main = "io.pravega.test.integration.demo.ScaleTest"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startEndToEndTransactionTest(type: JavaExec) {
        main = "io.pravega.test.integration.demo.EndToEndTransactionTest"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startEventProcessorTest(type: JavaExec) {
        main = "io.pravega.test.integration.demo.EventProcessorTest"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task selftest(type: JavaExec) {
        main = "io.pravega.test.integration.selftest.SelfTestRunner"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
        systemProperties System.getProperties()
    }
}

project('shared:controller-api') {
    apply plugin: 'com.google.protobuf'

    dependencies {
        compile project(':common')

        compile group: 'org.apache.commons', name: 'commons-lang3', version: commonsLang3Version
        compile group: 'org.projectlombok', name: 'lombok', version: lombokVersion
        compile group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: spotbugsAnnotationsVersion
        compile group: 'net.jcip', name: 'jcip-annotations', version: jcipAnnotationsVersion
        compile group: 'commons-io', name: 'commons-io', version: commonsioVersion
        compile group: 'io.netty', name: 'netty-all', version: nettyVersion

        compile "io.grpc:grpc-netty:" + grpcVersion
        compile "io.grpc:grpc-all:" + grpcVersion
        compile "io.grpc:grpc-protobuf:" + grpcVersion
        compile "io.grpc:grpc-stub:" + grpcVersion
        compile group: 'io.netty', name: 'netty-tcnative-boringssl-static', version: nettyBoringSSLVersion
         // Since Java 10 javax.annotation is no more bundled with the JRE
        compile group: 'javax.annotation', name: 'javax.annotation-api', version: javaxAnnotationVersion
    }

    javadoc {
        exclude 'io/pravega/controller/*'
    }
}

project('controller') {
    sourceSets {
        main.resources.srcDirs += "$projectDir/src/conf"
        test.resources.srcDirs += "$rootDir/config"
    }

    apply plugin: 'application'
    applicationName = "pravega-controller"
    mainClassName = "io.pravega.controller.server.Main"
    applicationDefaultJvmArgs = ["-server", "-Xms128m", "-XX:+HeapDumpOnOutOfMemoryError",
                                 "-Dconfig.file=PRAVEGA_APP_HOME/conf/controller.conf",
                                 "-Dlogback.configurationFile=PRAVEGA_APP_HOME/conf/logback.xml",
                                 "-Dlog.dir=PRAVEGA_APP_HOME/logs",
                                 "-Dlog.name=controller"]
    startScripts {
        classpath += files('$APP_HOME/pluginlib')
        doLast {
            def scriptFile = file getUnixScript()
            scriptFile.text = scriptFile.text.replace('$APP_HOME/lib/pluginlib', '$APP_HOME/pluginlib/*')
            def winScriptFile = file getWindowsScript()
            winScriptFile.text = winScriptFile.text.replace('%APP_HOME%\\lib\\pluginlib', '%APP_HOME%\\pluginlib\\*')
        }
    }
    applicationDistribution.from('src/conf') {
        into "conf"
        rename "application.conf", "controller.conf"
    }

    applicationDistribution.into('') {
        def pluginDirBase = new File('/tmp/dummy-dir')
        pluginDirBase.mkdirs()
        def logDir = new File(pluginDirBase.absolutePath + '/pluginlib')
        logDir.mkdirs()

        from {pluginDirBase}
    }

    dependencies {
        compile project(':common')
        compile project(":shared:controller-api")
        compile project(":shared:authplugin")
        compile project(":client")
        compile project(":shared:metrics")
        runtime group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion
        compile group: 'javax.servlet', name: 'javax.servlet-api', version: javaxServletApiVersion
        compile(group: 'io.swagger', name : 'swagger-jersey2-jaxrs', version :swaggerJersey2JaxrsVersion) {
            exclude group: 'com.google.guava', module: 'guava'
        }
        compile group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: spotbugsAnnotationsVersion
        compile group: 'net.jcip', name: 'jcip-annotations', version: jcipAnnotationsVersion
        compile group: 'com.typesafe', name: 'config', version: typesafeConfigVersion
        compile group: 'org.apache.curator', name: 'curator-framework', version: apacheCuratorVersion
        compile group: 'org.apache.curator', name: 'curator-recipes', version: apacheCuratorVersion
        compile group: 'org.apache.curator', name: 'curator-client', version: apacheCuratorVersion
        compile group: 'org.apache.commons', name: 'commons-lang3', version: commonsLang3Version
        compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-grizzly2-http', version: jerseyVersion
        compile group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: jerseyVersion
        compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: jerseyVersion
        testCompile project(':test:testcommon')
        testCompile group: 'org.apache.curator', name: 'curator-test', version: apacheCuratorVersion
        compile 'io.jsonwebtoken:jjwt:0.9.0'
        compile group: 'io.netty', name: 'netty-tcnative-boringssl-static', version: nettyBoringSSLVersion
        // since Java 10 JAXB is not more bundled with the JRE
        compile group: 'javax.xml.bind', name: 'jaxb-api', version: jaxbVersion
        compile group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: jaxbVersion
    }

    task createAppWithGCLogging(type: CreateStartScripts) {
        applicationName = "pravega-controller-withGCLogging"
        mainClassName = "io.pravega.controller.server.Main"
        defaultJvmOpts = ["-server", "-Xms128m", "-XX:+HeapDumpOnOutOfMemoryError",
                          "-XX:+PrintGCDetails", "-XX:+PrintGCDateStamps",
                          "-Xloggc:PRAVEGA_APP_HOME/logs/gc.log", "-XX:+UseGCLogFileRotation",
                          "-XX:NumberOfGCLogFiles=2", "-XX:GCLogFileSize=64m",
                          "-Dconfig.file=PRAVEGA_APP_HOME/conf/controller.conf",
                          "-Dlogback.configurationFile=PRAVEGA_APP_HOME/conf/logback.xml",
                          "-Dlog.dir=PRAVEGA_APP_HOME/logs",
                          "-Dlog.name=controller"]
        classpath = startScripts.classpath
        outputDir = startScripts.outputDir
    }

    applicationDistribution.into("bin") {
        from(createAppWithGCLogging)
    }
}

project('standalone') {
    apply plugin: 'application'
    applicationName = "pravega-standalone"
    mainClassName = "io.pravega.local.LocalPravegaEmulator"
    applicationDefaultJvmArgs = ["-server", "-Xmx4g", "-XX:+HeapDumpOnOutOfMemoryError",
                                 "-Dlogback.configurationFile=PRAVEGA_APP_HOME/conf/logback.xml",
                                 "-Dsinglenode.configurationFile=PRAVEGA_APP_HOME/conf/standalone-config.properties",
                                 "-Dlog.dir=PRAVEGA_APP_HOME/logs",
                                 "-Dlog.name=pravega",
                                 "-Xdebug",
                                 "-Xrunjdwp:server=y,transport=dt_socket,address=8000,suspend=n"]
    startScripts {
        classpath += files('$APP_HOME/pluginlib')
        doLast {
            def scriptFile = file getUnixScript()
            scriptFile.text = scriptFile.text.replace('$APP_HOME/lib/pluginlib', '$APP_HOME/pluginlib/*')
            def winScriptFile = file getWindowsScript()
            winScriptFile.text = winScriptFile.text.replace('%APP_HOME%\\lib\\pluginlib', '%APP_HOME%\\pluginlib\\*')
        }
    }

    dependencies {
        compile project(':common')
        compile project(':client')
        compile project(':segmentstore:server')
        compile project(':segmentstore:server:host')
        compile project(':controller')
        compile project(':segmentstore:contracts')
        compile project(':segmentstore:storage')
        compile project(':segmentstore:storage:impl')
        compile project(':bindings')

        compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-grizzly2-http', version: jerseyVersion
        compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: javaxwsrsApiVersion
        runtime group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion
        compile group: 'org.apache.curator', name: 'curator-test', version: apacheCuratorVersion
        // https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-common
        compile group: 'org.apache.hadoop', name: 'hadoop-common', version: hadoopVersion, withoutLogger
        compile group: 'org.apache.hadoop', name: 'hadoop-hdfs', version: hadoopVersion, withoutLogger
        compile group: 'org.apache.hadoop', name: 'hadoop-minicluster', version: hadoopVersion, withoutLogger
        compile group: 'io.netty', name: 'netty-tcnative-boringssl-static', version: nettyBoringSSLVersion

        testCompile project(':test:testcommon')
        testCompile project(path:':common', configuration:'testRuntime')
        testCompile project(path:':segmentstore:server', configuration:'testRuntime')
        testCompile project(path:':segmentstore:server:host', configuration:'testRuntime')
    }

    configurations {
        runtime.exclude group: "com.sun.jersey", module: "jersey-core"
        runtime.exclude group: "com.sun.jersey", module: "jersey-server"
    }

    task startStandalone(type: JavaExec) {
        main = "io.pravega.local.LocalPravegaEmulator"
        classpath = sourceSets.main.runtimeClasspath
        systemProperties System.getProperties()
        systemProperties 'logback.configurationFile' : new File('config/logback.xml').absolutePath
        systemProperties 'singlenode.configurationFile' : new File("config/standalone-config.properties").absolutePath

        if (systemProperties.get("extDirs") != null) {
            classpath += files(systemProperties.get("extDirs"))
        }

        jvmArgs "-Xdebug", "-Xrunjdwp:server=y,transport=dt_socket,address=8000,suspend=n"
    }
}

project('test:system') {
    // Specifically publish this test project
    apply plugin: 'maven'

    dependencies {
        // https://mvnrepository.com/artifact/com.mesosphere/marathon-client
        runtime group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion
        compile group: 'com.mesosphere', name: 'marathon-client', version: marathonClientVersion, withoutLogger
        compile project(':controller')
        compile project(":client")
        compile project(":test:testcommon")
        compile group: 'junit', name: 'junit', version: junitVersion
        compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: javaxwsrsApiVersion
        compile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: jerseyVersion
        compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: jerseyVersion
        compile group: 'org.glassfish.jersey.connectors', name:'jersey-apache-connector', version:jerseyVersion
        compile group: 'com.spotify', name: 'docker-client', version: dockerClientVersion
    }
    //disable the default test task.
    test {
        exclude 'io/pravega/**'
    }

    jar { //create a fat jar
        archiveName = "test-collection.jar"
        from {
            (configurations.runtime).collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }
        from sourceSets.test.output
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }

    task testJarForDocker(type: Jar) {
        archiveName = "test-docker-collection.jar"
        from {
            (configurations.runtime).collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }
        from sourceSets.test.output
        from sourceSets.main.output
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }

    //This is  used to invoke systemTests
    task startSystemTests(type: Test) {

        ext.dockerRegistryUrl = project.hasProperty("dockerRegistryUrl") ? project.dockerRegistryUrl : ""
        ext.repoUrl = project.hasProperty("repoUrl") ? project.repoUrl : ""

        description 'Used to invoke system tests, example usage: gradle startSystemTests -DmasterIP=xx.xx.xx.xx'
        testClassesDirs = sourceSets.test.output.classesDirs
        classpath = sourceSets.test.runtimeClasspath

        systemProperty "test_collection_jar_path", "$jar.archivePath.path"
        systemProperty "execType", System.getProperty("execType")
        systemProperty "masterIP", System.getProperty("masterIP")
        systemProperty "imageVersion", System.getProperty("imageVersion")
        systemProperty "skipServiceInstallation", System.getProperty("skipServiceInstallation")
        systemProperty "segmentStoreExtraEnv", System.getProperty("segmentStoreExtraEnv")

        if (System.getProperty("execType") == null) {
            systemProperty "execType", "REMOTE_SEQUENTIAL"
        }
        if (System.getProperty("masterIP") == null) {
            systemProperty "masterIP", "INVALID_MASTER_IP"
        }
        if (System.getProperty("imageVersion") == null) {
            systemProperty "imageVersion", "INVALID_IMAGE_VERSION"
        }
        if (System.getProperty("skipServiceInstallation") == null) {
            //skipServiceInstallation by default.
            systemProperty "skipServiceInstallation", "true"
        }
        maxParallelForks = 1
        systemProperty "dockerImageRegistry", "${dockerRegistryUrl}"
        systemProperty "testVersion", pravegaVersion
        systemProperty "testArtifactUrl", "${repoUrl}/io/pravega/pravega-test-system/" +
                pravegaVersion+"/pravega-test-system-"+ pravegaVersion + ".jar"

        onlyIf { dockerRegistryUrl && repoUrl }
    }

    task execShellScript(type: Exec) {

        ext.awsExecution = project.hasProperty('awsExecution') ? project.awsExecution : 'false'

        if(ext.getProperty('awsExecution').toString().equals("true")) {
            commandLine './aws/preTestScript.sh'
            args "$aws_access_key", "$aws_secret_key", "$aws_region", "$aws_key_name", "$cred_path", "$config_path", "$pravega_org", "$pravega_branch"
        } else {
            commandLine "./preTestScript.sh"
            args "$CLUSTER_NAME", "$MASTER", "$NUM_SLAVES"
        }
    }

    String variable

    task setAwsMasterIp(type: Exec) {

        commandLine 'echo', 'setting master ip for system tests execution on AWS'

        doLast {
            def masterIpStdOut = new ByteArrayOutputStream()
            exec {
                workingDir "$rootDir/test/system/aws"
                executable = "terraform"
                args "output", "ip"
                standardOutput = masterIpStdOut
            }

            variable = masterIpStdOut.toString()
        }
    }


    //This is  used to invoke docker based systemTests
    task startSystemTestsWithDocker(type: Test) {

        dependsOn 'testJarForDocker', 'execShellScript'

        if (System.getProperty("awsExec").equals("true")) {
            setAwsMasterIp.outputs.upToDateWhen { false }
            dependsOn 'setAwsMasterIp'
        }

        doFirst {
                systemProperty "awsMasterIP", variable
        }

        ext.dockerRegistryUrl = project.hasProperty("dockerRegistryUrl") ? project.dockerRegistryUrl : ""

        description 'Used to invoke docker based system tests, example usage: gradle startSystemTests -DmasterIP=xx.xx.xx.xx'
        testClassesDirs = sourceSets.test.output.classesDirs
        classpath = sourceSets.test.runtimeClasspath

        systemProperty "execType", System.getProperty("execType")
        systemProperty "masterIP", System.getProperty("masterIP")
        systemProperty "imageVersion", System.getProperty("imageVersion")
        systemProperty "skipServiceInstallation", System.getProperty("skipServiceInstallation")
        systemProperty "segmentStoreExtraEnv", System.getProperty("segmentStoreExtraEnv")
        systemProperty "awsExec", System.getProperty("awsExec")

        if (System.getProperty("execType") == null) {
            systemProperty "execType", "DOCKER"
        }
        if (System.getProperty("masterIP") == null) {
            systemProperty "masterIP", "INVALID_MASTER_IP"
        }
        if (System.getProperty("imageVersion") == null) {
            systemProperty "imageVersion", "INVALID_IMAGE_VERSION"
        }
        if (System.getProperty("skipServiceInstallation") == null) {
            //skipServiceInstallation by default.
            systemProperty "skipServiceInstallation", "false"
        }
        if (System.getProperty("awsExec") == null) {
            systemProperty "awsExec", "false"
        }
        maxParallelForks = 1
        systemProperty "dockerImageRegistry", "${dockerRegistryUrl}"

    }

    task collectSystemTestLogsFromAws(type: Exec) {
        commandLine './aws/postTestScript.sh'
        args "$aws_access_key", "$aws_secret_key", "$aws_region", "$aws_key_name", "$cred_path", "$config_path", "$pravega_org", "$pravega_branch", "$travis_commit"
    }
}

def getProjectVersion() {
    String ver = pravegaVersion
    if (ver.contains("-SNAPSHOT")) {
        String versionLabel = ver.substring(0, ver.indexOf("-SNAPSHOT"))
        def count = grgit.log(includes:['HEAD']).size()
        def commitId = "${grgit.head().abbreviatedId}"
        ver = versionLabel + "-" + count + "." + commitId + "-SNAPSHOT"
    }
    return ver
}

subprojects {
    task allDeps(type: DependencyReportTask) {}
}

task publishAllJars() {
    dependsOn ':authplugin:publish'
    dependsOn ':client:publish'
    dependsOn ':common:publish'
    dependsOn ':shared:publish'
    dependsOn ':shared:protocol:publish'
    dependsOn ':segmentstore:contracts:publish'
    dependsOn ':segmentstore:storage:publish'
    dependsOn ':segmentstore:storage:impl:publish'
    dependsOn ':segmentstore:server:publish'
    dependsOn ':segmentstore:server:host:publish'
    dependsOn ':shared:metrics:publish'
    dependsOn ':shared:controller-api:publish'
    dependsOn ':controller:publish'
    dependsOn ':standalone:publish'
    dependsOn ':test:system:publish'
}

task sourceCopy(type: Copy) {
    from rootDir
    into 'source'
}

task sourceTar(type: Tar) {
    dependsOn 'sourceCopy'
    from  'source'
    destinationDir = file('sourceArtifacts')
    extension = 'tgz'
    compression = Compression.GZIP
}

task javadocs(type: Javadoc) {
    description = "Generate main pravega javadoc"

    // Include names of any project that is to be included in the javadoc distribution
    ext.projects = [':client']
    options.links("http://docs.oracle.com/javase/8/docs/api/");
    title = "Pravega API"
    destinationDir = file("${buildDir}/javadocs")
    source = files(projects.collect {
        project(it).sourceSets.main.allJava
    })
    classpath = files(projects.collect {
        project(it).sourceSets.main.output + project(it).sourceSets.main.compileClasspath
    })
    failOnError = false
    exclude "**/impl/**"
}

apply plugin: 'distribution'
distributions {
    main {
        baseName = "pravega"
        contents {
            duplicatesStrategy = "exclude"
            from ("dist/conf") {
                into "conf"
            }
            from ("config") {
                into "conf"
            }
            from (project(":controller").installDist) {
                exclude "logback.xml"
            }
            from (project(":segmentstore:server:host").installDist) {
                exclude "logback.xml"
            }
            from (project(":standalone").installDist)
        }
    }
    client {
        baseName = "pravega-client"
        contents {
            from { project(":shared:authplugin").configurations.runtime }
            from { project(":shared:authplugin").configurations.runtime.allArtifacts.files }
            from { project(":client").configurations.runtime }
            from { project(":client").configurations.runtime.allArtifacts.files }
        }
    }
    javadoc {
        baseName = "pravega-javadoc"
        contents {
            from (javadocs)
        }
    }
}

tasks.withType(Tar) {
    compression = Compression.GZIP
}

task preparePravegaImage(type: Copy) {
    into "${buildDir}/docker/pravega"
    from "docker/pravega"
    from (installDist) {
        into "pravega"
        exclude "**/*.bat"
    }
}

task buildPravegaImage(type: DockerBuildTask, dependsOn: preparePravegaImage) {
    baseTag = pravegaBaseTag
    dockerDir = preparePravegaImage.destinationDir.absolutePath
}

task buildBookkeeperImage(type: DockerBuildTask) {
    baseTag = bookkeeperBaseTag
    dockerDir = "docker/bookkeeper"
}

task docker(dependsOn: [buildPravegaImage, buildBookkeeperImage]) {
    description = "Builds all docker images"
}

task pushPravegaImage(type: DockerPushTask) {
    // No explicit dependency on building the pravega image
    mustRunAfter buildPravegaImage
    tag = "${pravegaBaseTag}:${version}"
}

task pushBookkeeperImage(type: DockerPushTask) {
    // No explicit dependency on building the bookkeeper image
    mustRunAfter buildBookkeeperImage
    tag = "${bookkeeperBaseTag}:${version}"
}

task dockerPush(dependsOn: [pushPravegaImage, pushBookkeeperImage]) {
    description = "Push all docker images"
}

task distribution(dependsOn: [assembleDist, assembleClientDist, assembleJavadocDist]) {
    description = "Builds a distribution package"
}

/**
 * Task for building a docker image
 */
class DockerBuildTask extends Exec {
    String baseTag
    String dockerDir

    DockerBuildTask() {
        executable project.dockerExecutable
        args "build"
        args "-t", "${->baseTag}:${project.version}"
        args "-t", "${->baseTag}:latest"
        args "${->dockerDir}"
    }
}

/**
 * Task for pushing an image, which can either push to dockerhub or to a private registry.
 * If pushing to dockerhub, you must be logged using using `docker login` before running.
 */
class DockerPushTask extends Exec {
    String tag

    DockerPushTask() {
        executable project.dockerExecutable
        args "push", "${->getRemoteTag()}"
    }

    protected void exec() {
        // Tag the image with the remote image name first
        if (project.hasProperty('dockerRegistry')) {
            project.exec {
                commandLine project.dockerExecutable, "tag", tag, getRemoteTag()
            }
        }
        super.exec()
    }

    String getRemoteTag() {
        if (project.hasProperty('dockerRegistry')) {
            return "${project.property('dockerRegistry')}/${tag}"
        }
        else {
            return tag
        }
    }
}
