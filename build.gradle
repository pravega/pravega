/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'kandha' at '4/27/16 4:35 PM' with Gradle 2.11
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.11/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.3'
    }
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'com.bmuschko.docker-java-application'
    apply plugin: 'maven-publish'

    checkstyle {
        toolVersion = "7.1"
    }

    javadoc {
        failOnError = false
        exclude "**/impl/**";
        source  =  project(':clients:streaming').sourceSets.main.java
        def javadocs = new File(rootDir, "javadocs")
        javadocs.mkdirs()
        destinationDir = javadocs
    }
    tasks.withType(FindBugs) {
        effort = "default"
        includeFilter = file("$rootDir/checkstyle/findbugs-include.xml")
        excludeFilter = file("$rootDir/checkstyle/findbugs-exclude.xml")
        reports {
            xml.enabled false
            html.enabled true
        }
    }
    compileJava { 
        options.compilerArgs << "-Xlint:deprecation" << "-Xlint:divzero" << "-Xlint:empty" << "-Xlint:fallthrough" << "-Xlint:finally" << "-Xlint:overrides" << "-Xlint:path" << "-Werror" 
    } 
    docker {
        url = dockerUrl
    }
    repositories {
        // Use 'jcenter' for resolving your dependencies.
        // You can declare any Maven/Ivy/file repository here.
        jcenter()
        mavenCentral()
        mavenLocal()
        maven {
            url "https://raw.github.com/twitter/bookkeeper/mvn-repo/4.3.4-TWTTR"
        }
        maven {
            url "http://maven.twttr.com"
        }
    }

    checkstyle {
        configFile = new File(rootDir, "checkstyle/checkstyle.xml")
        configProperties = [importControlFile: "$rootDir/checkstyle/import-control.xml"]
    }

    dependencies {
        // The production code uses the SLF4J logging API at compile time
        compile 'org.slf4j:slf4j-api:1.7.14'
        compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'

        testCompile 'junit:junit:4.12'
        compile group: 'com.google.guava', name: 'guava', version: '16.0'
        compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
        compile group: 'com.google.code.findbugs', name: 'jsr305', version: '1.3.9'
        compile group: 'org.projectlombok', name: 'lombok', version: '1.16.10'
        compile group: 'commons-io', name: 'commons-io', version: '2.5'
        compile 'io.netty:netty-all:4.1.5.Final'

        testCompile "org.mockito:mockito-core:2.+"
    }

    publishing {
        repositories {
            maven {
                credentials {
                    username = "$repoUser"
                    password = "$repoPass"
                }
                url = "$repoUrl"
            }
        }
    }

    tasks.withType(GroovyCompile) {
        groovyOptions.fork = false
    }

    tasks.withType(Test) {
        systemProperties 'logback.configurationFile' : new File(buildDir,'resources/test/logback.xml').absolutePath
        testLogging.showStandardStreams = true
        testLogging.exceptionFormat = "FULL"
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        testLogging.events = ["PASSED", "FAILED"]
        maxParallelForks = 2
        minHeapSize = "128m"
        maxHeapSize = "512m"
    }
}

def pkgs = ['common', 'clients:streming', 'service:server', 'integrationtests']

project('common') {
    dependencies {
        testCompile project(':testcommon')
        testCompile group: 'org.apache.curator', name: 'curator-test', version: '2.11.0'
        compile group: 'org.apache.curator', name: 'curator-recipes', version: '2.11.0'
        compile group: 'commons-io', name: 'commons-io', version: '2.5'
        // for Metrics
        compile('com.readytalk:metrics3-statsd:4.1.0')
        // https://mvnrepository.com/artifact/io.dropwizard.metrics/metrics-core
        compile group: 'io.dropwizard.metrics', name: 'metrics-core', version: '3.1.0'
        // https://mvnrepository.com/artifact/io.dropwizard.metrics/metrics-jvm
        compile group: 'io.dropwizard.metrics', name: 'metrics-jvm', version: '3.1.0'

        jar {
            from project.sourceSets.main.output
            from project(":testcommon").sourceSets.main.output
        }
    }
    publishing {
        publications {
            maven(MavenPublication) {
                pom.withXml {
                    asNode().appendNode('repositories', '').appendNode('repository','').
                            appendNode('id','jcenter').parent().
                            appendNode('name','JCenter Repository').parent().
                            appendNode('url','http://jcenter.bintray.com')
                }
                groupId 'pravega'
                artifactId 'common'
                version = pravegaVersion
                from components.java
            }
        }
    }
}

project('clients:streaming') {
    dependencies {
        compile project(':common')
        compile project(":controller:contract")
        testCompile project(':testcommon')
    }
}

project('clients') {
    dependencies {
        compile project(':clients:streaming')
    }
    jar {
        from project(":clients:streaming").sourceSets.main.output
        from project(":controller:contract").sourceSets.main.output
    }
    publishing {
        publications {
            maven(MavenPublication) {
                groupId 'pravega'
                artifactId 'client'
                version = pravegaVersion
                from components.java
            }
        }
    }
}

project('service') {
    dependencies {
        compile project(':service:contracts')
        compile project(':service:server')
        compile project(':service:server:host')
        compile project(':service:storage')
        compile project(':service:storage:impl')
    }
    jar {
        from project(":service:contracts").sourceSets.main.output
        from project(":service:server").sourceSets.main.output
        from project(":service:server:host").sourceSets.main.output
        from project(":service:storage").sourceSets.main.output
        from project(":service:storage:impl").sourceSets.main.output
    }
    publishing {
        publications {
            maven(MavenPublication) {
                groupId 'pravega'
                artifactId 'service'
                version = pravegaVersion
                from components.java
            }
        }
    }
}

project('testcommon') {
    dependencies {
        compile 'junit:junit:4.12'
    }
}

project('service:contracts') {
    dependencies {
        compile project(':common')
        testCompile project(':testcommon')
    }
}

project('service:storage') {
    dependencies {
        compile project(':common')
        compile project(':service:contracts')
        testCompile project(':testcommon')
    }
}

project('service:storage:impl') {
    dependencies {
        compile('com.twitter:distributedlog-core:0.3.51-RC1') {
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        }
        compile('com.twitter:distributedlog-client:0.3.51-RC1') {
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        }
        compile group: 'org.rocksdb', name: 'rocksdbjni', version: '4.11.2'

        // https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-common
        compile group: 'org.apache.hadoop', name: 'hadoop-common', version: '2.7.3'

        // https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-common
        compile group: 'org.apache.hadoop', name: 'hadoop-hdfs', version: '2.7.3'

        testCompile group: 'org.apache.hadoop', name: 'hadoop-minicluster', version: '2.7.3'

        compile project(':common')
        compile project(':service:storage')
        testCompile project(':testcommon')
        testCompile files(project(':service:storage').sourceSets.test.output)
    }
}

project('service:server') {
    dependencies {
        compile project(':common')
        compile project(':service:contracts')
        compile project(':service:storage')
        testCompile project(':testcommon')
    }
}

project('service:server:host') {
    apply plugin: 'application'
    mainClassName = "com.emc.pravega.service.server.host.ServiceStarter"

    applicationDefaultJvmArgs = ["-server", "-Xms512m", "-XX:+HeapDumpOnOutOfMemoryError"]

    dependencies {
        compile project(':common')
        compile project(':service:contracts')
        compile project(':clients:streaming')
        compile project(':service:storage')
        compile project(':service:storage:impl')
        compile project(':service:server')
        testCompile project(':testcommon')
        testCompile group: 'org.apache.curator', name: 'curator-test', version: '2.11.0'
    }
    task buildPravegaHostImage(type: DockerBuildImage) {
        dependsOn 'distTar','distZip'
        dockerFile = file(dockerFilePravegaHost)
        inputDir = file(dockerDirPravegaHost)
        tag = "${pravegaHostBaseTag}:${pravegaVersion}"
    }
    task pushPravegaHostImage(type: DockerPushImage) {
        dependsOn buildPravegaHostImage
        conventionMapping.imageName = { buildPravegaHostImage.getTag() }
        docker {
            registryCredentials {
                url = "$dockerRegistryUrl"
                username = "$dockerRegistryUser"
                password = "$dockerRegistryPass"
            }
        }
    }

}

project('integrationtests') {
    dependencies {
        compile project(':common')
        compile project(':clients:streaming')
        compile project(':service:server')
        compile project(':service:server:host')
        compile project(':controller:server')
        compile project(':connectors:flink')
        compile group: 'org.apache.curator', name: 'curator-test', version: '2.11.0'
        compile group: 'org.apache.flink', name: 'flink-tests_2.11', version: '1.2.0'
        compile group: 'org.apache.flink', name: 'flink-test-utils_2.11', version: '1.2.0'
        compile group: 'org.apache.flink', name: 'flink-streaming-contrib_2.11', version: '1.2.0'
        testCompile project(':testcommon')
        testCompile files(project(':common').sourceSets.test.output)
        compile files(project(':clients:streaming').sourceSets.test.output)
        testCompile files(project(':service:server').sourceSets.test.output)
        testCompile files(project(':service:server:host').sourceSets.test.output)
    }

    task startServer(type: JavaExec) {
        main = "com.emc.pravega.service.server.host.ServiceStarter"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startServerInteractive(type: JavaExec) {
        main = "com.emc.pravega.service.server.host.InteractiveStreamSegmentStoreTester"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startBenchmark(type: JavaExec) {
        main = "com.emc.pravega.service.server.host.ServiceBenchmark"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startLocalService(type: JavaExec) {
        main = "com.emc.pravega.demo.StartLocalService"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startWriter(type: JavaExec) {
        main = "com.emc.pravega.demo.StartWriter"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startReader(type: JavaExec) {
        main = "com.emc.pravega.demo.StartReader"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startController(type: JavaExec) {
        main = "com.emc.pravega.controller.server.Main"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startScaleTest(type: JavaExec) {
        main = "com.emc.pravega.demo.ScaleTest"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startEventProcessorTest(type: JavaExec) {
        main = "com.emc.pravega.demo.EventProcessorTest"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }
}

project('controller') {
    dependencies {
        testCompile project(':testcommon')
    }
}

project('controller:contract') {

    task compileThrift(type: Exec)  {
        doFirst {
            println "Using Docker [Image: thrift:0.9.3] to compile thrift files"
        }
        commandLine 'docker', 'run', '--rm', '-v', "$projectDir:/data", 'thrift:0.9.3', 'thrift',
                '-o', '/data/src/generated', '--gen', 'java:private-members,hashcode', '-r', '/data/src/main/thrift/Controller.thrift'
    }

    sourceSets {
        main.java.srcDirs += "$projectDir/src/generated/gen-java"
    }

    checkstyle {
        // Exclude generated code from Checkstyle checks
        sourceSets -= sourceSets.main
    }

    dependencies {
        // https://mvnrepository.com/artifact/org.apache.thrift/libthrift
        compile group: 'org.apache.thrift', name: 'libthrift', version: '0.9.3'
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    }
}

project('controller:server') {
    sourceSets {
        main.resources.srcDirs += "$projectDir/src/conf"
    }

    checkstyle {
        // Exclude generated code from Checkstyle checks
        checkstyleMain.exclude '**/rest/generated/**'
    }

    apply plugin: 'application'
    mainClassName = "com.emc.pravega.controller.server.Main"
    applicationDefaultJvmArgs = ["-server", "-Xms128m", "-Xmx512m", "-XX:+HeapDumpOnOutOfMemoryError",
                                 "-Dconfig.file=CONTROLLER_APP_HOME/conf/application.conf",
                                 "-Dlogback.configurationFile=CONTROLLER_APP_HOME/conf/logback.xml"]

    applicationDistribution.from('src/conf') {
        into "conf"
    }

    startScripts {
        doLast {
            unixScript.text = unixScript.text.replace('CONTROLLER_APP_HOME', '\$APP_HOME')
            windowsScript.text = windowsScript.text.replace('CONTROLLER_APP_HOME', '%~dp0..')
        }
    }

    dependencies {
        compile project(':common')
        compile project(":controller:contract")
        compile project(":clients:streaming")
        compile group: 'javax.servlet', name: 'servlet-api', version: '2.5'
        compile('io.swagger:swagger-jersey2-jaxrs:1.5.9') {
            exclude group: 'com.google.guava', module: 'guava'
        }

        compile group: 'com.typesafe', name: 'config', version: '1.3.0'
        compile group: 'org.apache.curator', name: 'curator-framework', version: '2.11.0'
        compile group: 'org.apache.curator', name: 'curator-recipes', version: '2.11.0'
        compile group: 'org.apache.curator', name: 'curator-client', version: '2.11.0'
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.3.2'
        compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-netty-http', version: '2.25'
        compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: '2.25'
        testCompile group: 'org.glassfish.jersey.test-framework.providers', name: 'jersey-test-framework-provider-netty', version: '2.25'
        testCompile group: 'org.apache.curator', name: 'curator-test', version: '2.11.0'
    }

    task buildPravegaControllerImage(type: DockerBuildImage) {
        dependsOn 'distTar','distZip'
        dockerFile = file(dockerFilePravegaController)
        inputDir = file(dockerDirPravegaController)
        tag = "${pravegaControllerBaseTag}:${pravegaVersion}"
    }

    task pushPravegaControllerImage(type: DockerPushImage) {
        dependsOn buildPravegaControllerImage
        conventionMapping.imageName = { buildPravegaControllerImage.getTag() }
        docker {
            registryCredentials {
                url = "$dockerRegistryUrl"
                username = "$dockerRegistryUser"
                password = "$dockerRegistryPass"
            }
        }
    }
}

project('connectors:flink') {
    dependencies {
        compile project(":clients:streaming")
        compile group: 'org.apache.flink', name: 'flink-streaming-java_2.11', version: '1.2.0'
    }
}

project('singlenode') {
    apply plugin: 'application'
    mainClassName = "com.emc.pravega.local.LocalPravegaEmulator"
    applicationDefaultJvmArgs = ["-server", "-Xms4g", "-XX:+HeapDumpOnOutOfMemoryError", "-Xdebug",
                                 "-Xrunjdwp:server=y,transport=dt_socket,address=8000,suspend=y"]
    dependencies {
        compile project(':common')
        compile project(':clients:streaming')
        compile project(':service:server')
        compile project(':service:server:host')
        compile project(':controller:server')

        compile project(':service:contracts')
        compile project(':service:storage')
        compile project(':service:storage:impl')

        compile group: 'org.apache.curator', name: 'curator-test', version: '2.11.0'
        // https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-common
        compile group: 'org.apache.hadoop', name: 'hadoop-common', version: '2.7.3'

        // https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-common
        compile group: 'org.apache.hadoop', name: 'hadoop-hdfs', version: '2.7.3'

        compile group: 'org.apache.hadoop', name: 'hadoop-minicluster', version: '2.7.3'

        compile('com.twitter:distributedlog-core:0.3.51-RC1') {
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        }
        compile('com.twitter:distributedlog-client:0.3.51-RC1') {
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        }

        testCompile project(':testcommon')
        testCompile files(project(':common').sourceSets.test.output)
        compile files(project(':clients:streaming').sourceSets.test.output)
        testCompile files(project(':service:server').sourceSets.test.output)
        testCompile files(project(':service:server:host').sourceSets.test.output)
    }

    task startSinglenode(type: JavaExec) {
        main = "com.emc.pravega.local.LocalPravegaEmulator"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
        args = ["4000", "5000", "6000"]
    }
}


project('systemtests:tests') {
    dependencies {
        // https://mvnrepository.com/artifact/com.mesosphere/marathon-client
        compile group: 'com.mesosphere', name: 'marathon-client', version: '0.3.0'
        compile project(":clients:streaming")
        compile 'junit:junit:4.12'
    }
    //disable the default test task.
    test {
        exclude 'com/emc/pravega/**'
    }

    jar { //create a fat jar
        archiveName = "test-collection.jar"
        from {
            (configurations.runtime).collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }
        from sourceSets.test.output
    }

    //This is  used to invoke systemTests
    task startSystemTests(type: Test) {
        description 'Used to invoke system tests, example usage: gradle startSystemTests -DmasterIP=xx.xx.xx.xx'
        testClassesDir = sourceSets.test.output.classesDir
        classpath = sourceSets.test.runtimeClasspath

        systemProperty "test_collection_jar_path", "$jar.archivePath.path"
        systemProperty "execType", System.getProperty("execType")
        systemProperty "masterIP", System.getProperty("masterIP")
        systemProperty "imageVersion", System.getProperty("imageVersion")
        systemProperty "imageRegistry", System.getProperty("imageRegistry")

        if (System.getProperty("execType") == null) {
            systemProperty "execType", "REMOTE_SEQUENTIAL"
        }
        if (System.getProperty("masterIP") == null) {
            systemProperty "masterIP", "INVALID_MASTER_IP"
        }
        if (System.getProperty("dockerImageVersion") == null) {
            systemProperty "dockerImageVersion", "INVALID_IMAGE_VERSION"
        }
        if (System.getProperty("dockerImageRegistry") == null) {
            systemProperty "dockerImageRegistry", "INVALID_IMAGE_REGISTRY"
        }
        systemProperty "testArtifactUrl", project.property('testArtifactUrl') + "/pravega/systemtests/0.1/systemtests-0.1.jar"
        maxParallelForks = 1
    }
    publishing {
        publications {
            maven(MavenPublication) {
                groupId 'pravega'
                artifactId 'systemtests'
                version = 0.1
                from components.java
            }
        }
        repositories {
            maven {
                credentials {
                    username "$testFrameworkRepoUser"
                    password "$testFrameworkRepoPass"
                }
                url "$testArtifactUrl"
            }
        }
    }
}

subprojects {
    task allDeps(type: DependencyReportTask) {}
}
