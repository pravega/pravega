/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'kandha' at '4/27/16 4:35 PM' with Gradle 2.11
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.11/userguide/tutorial_java_projects.html
 */


allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'checkstyle'



    checkstyle {
        toolVersion = "7.1"
    }
    
    repositories {
        // Use 'jcenter' for resolving your dependencies.
        // You can declare any Maven/Ivy/file repository here.
        jcenter()
        mavenCentral()
        mavenLocal()
        maven {
            url "https://raw.github.com/twitter/bookkeeper/mvn-repo/4.3.4-TWTTR"
        }
        maven {
            url "http://maven.twttr.com"
        }
    }

    checkstyle {
        configFile = new File(rootDir, "checkstyle/checkstyle.xml")
        configProperties = [importControlFile: "$rootDir/checkstyle/import-control.xml"]
    }

    dependencies {
        // The production code uses the SLF4J logging API at compile time
        compile 'org.slf4j:slf4j-api:1.7.14'
        compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'


        testCompile 'junit:junit:4.12'
        compile group: 'com.google.guava', name: 'guava', version: '19.0'
 
        compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
        compile group: 'com.google.code.findbugs', name: 'jsr305', version: '1.3.9'
        
        compile group: 'org.projectlombok', name: 'lombok', version: '1.16.10'
        
        compile 'io.netty:netty-all:4.0.36.Final'

        // https://mvnrepository.com/artifact/org.apache.curator/curator-framework
        compile group: 'org.apache.curator', name: 'curator-framework', version: '2.7.0'
        // https://mvnrepository.com/artifact/org.apache.curator/curator-recipes
        compile group: 'org.apache.curator', name: 'curator-recipes', version: '2.2.0-incubating'
        // https://mvnrepository.com/artifact/com.google.code.gson/gson
        compile group: 'com.google.code.gson', name: 'gson', version: '2.3.1'


        testCompile "org.mockito:mockito-core:2.+"
    }

}


def pkgs = ['common', 'clients:streming', 'service:server', 'integrationtests']

project('common') {
    dependencies {
        testCompile project(':testcommon')
    }
}


project('clients:streaming') {
    dependencies {
        compile project(':common')
        testCompile project(':testcommon')
    }
}

project('testcommon') {
    dependencies {
        compile 'junit:junit:4.12'
    }
}

project('service:contracts') {
    dependencies {
        compile project(':common')
        testCompile project(':testcommon')
    }
}

project('service:storage') {
    dependencies {
        compile project(':common')
        compile project(':service:contracts')
        testCompile project(':testcommon')
    }
}

project('service:storage:impl') {
    dependencies {
        compile ('com.twitter:distributedlog-core:0.3.51-RC1') {
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        }
        compile ('com.twitter:distributedlog-client:0.3.51-RC1') {
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        }
        compile project(':common')
        compile project(':service:storage')
        testCompile project(':testcommon')
    }
}

project('service:server') {
    dependencies {
        compile project(':common')
        compile project(':service:contracts')
        compile project(':service:storage')
        compile project(':cluster')
        testCompile project(':testcommon')
    }
}

project('service:server:host') {
    dependencies {
        compile project(':common')
        compile project(':service:contracts')
        compile project(':service:storage')
        compile project(':service:storage:impl')
        compile project(':service:server')
        testCompile project(':testcommon')
    }
}

project('integrationtests') {
    dependencies {
        compile project(':common')
        compile project(':clients:streaming')
        compile project(':service:server')
        compile project(':service:server:host')
        testCompile project(':testcommon')
        testCompile files(project(':common').sourceSets.test.output)
        testCompile files(project(':clients:streaming').sourceSets.test.output)
        testCompile files(project(':service:server').sourceSets.test.output)
        testCompile files(project(':service:server:host').sourceSets.test.output)
    }
    task startServer(type: JavaExec) {
        main = "com.emc.pravega.service.server.host.ServiceStarter"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startServerInteractive(type: JavaExec) {
        main = "com.emc.pravega.service.server.host.InteractiveStreamSegmentStoreTester"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }

    task startBenchmark(type: JavaExec) {
        main = "com.emc.pravega.service.server.host.ServiceBenchmark"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }


    task startProducer(type: JavaExec) {
        main = "com.emc.pravega.demo.StartProducer"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }
}


project('perfbenchmark') {
    apply plugin: 'scala'
    dependencies {
        compile project(':common')
        compile project(':clients:streaming')
        compile project(':service:server')
        compile project(':service:server:host')
        testCompile project(':testcommon')
        testCompile files(project(':common').sourceSets.test.output)
        testCompile files(project(':clients:streaming').sourceSets.test.output)
        testCompile files(project(':service:server').sourceSets.test.output)
        testCompile files(project(':service:server:host').sourceSets.test.output)
        // https://mvnrepository.com/artifact/com.emc.ecs/object-client
        compile group: 'com.emc.ecs', name: 'object-client', version: '2.2.2'
    }


    task startProducer(type: JavaExec) {
        main = "com.emc.pravega.demo.StartECSProducer"
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
    }
}

project('cluster') {
    apply plugin: 'scala'
    dependencies {
        compile 'org.scala-lang:scala-library:2.11.7'
        testCompile 'org.scalatest:scalatest_2.11:3.0.0'
        compile project(':zkutils')
    }
}

project('zkutils') {
    apply plugin: 'scala'
    dependencies {
        compile 'org.scala-lang:scala-library:2.11.7'
        testCompile 'org.scalatest:scalatest_2.11:3.0.0'
    }

}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.useAnt = false

    scalaCompileOptions.additionalParameters = [
            "-deprecation",
            "-unchecked",
            "-encoding", "utf8",
            "-target:jvm-${sourceCompatibility}".toString(),
            "-Xlog-reflective-calls",
            "-feature",
            "-language:postfixOps",
            "-language:implicitConversions",
            "-language:existentials"
    ]

    configure(scalaCompileOptions.forkOptions) {
        memoryMaximumSize = '1g'
        jvmArgs = ['-XX:MaxPermSize=512m', '-Xss2m']
    }
}


if (System.env.TRAVIS == 'true') {
  allprojects {
    tasks.withType(GroovyCompile) {
      groovyOptions.fork = false
    }
    tasks.withType(Test) {
      // containers (currently) have 2 dedicated cores and 4GB of memory
      maxParallelForks = 2
      minHeapSize = '128m'
    }
  }
}


subprojects {
    task allDeps(type: DependencyReportTask) {}
}
