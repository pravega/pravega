/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.emc.pravega.controller.stream.api.v1;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-11-04")
public class ControllerService {

  public interface Iface {

    public CreateStreamStatus createStream(StreamConfig streamConfig) throws org.apache.thrift.TException;

    public UpdateStreamStatus alterStream(StreamConfig streamConfig) throws org.apache.thrift.TException;

    public List<SegmentRange> getCurrentSegments(String scope, String stream) throws org.apache.thrift.TException;

    public List<Position> getPositions(String scope, String stream, long timestamp, int count) throws org.apache.thrift.TException;

    public List<Position> updatePositions(String scope, String stream, List<Position> positions) throws org.apache.thrift.TException;

    public ScaleResponse scale(String scope, String stream, List<Integer> sealedSegments, Map<Double,Double> newKeyRanges, long scaleTimestamp) throws org.apache.thrift.TException;

    public NodeUri getURI(SegmentId segment) throws org.apache.thrift.TException;

    public boolean isSegmentValid(String scope, String stream, int segmentNumber) throws org.apache.thrift.TException;

    public TxId createTransaction(String scope, String stream) throws org.apache.thrift.TException;

    public TransactionStatus commitTransaction(String scope, String stream, TxId txid) throws org.apache.thrift.TException;

    public TransactionStatus dropTransaction(String scope, String stream, TxId txid) throws org.apache.thrift.TException;

    public TxState checkTransactionStatus(String scope, String stream, TxId txid) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createStream(StreamConfig streamConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void alterStream(StreamConfig streamConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCurrentSegments(String scope, String stream, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPositions(String scope, String stream, long timestamp, int count, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updatePositions(String scope, String stream, List<Position> positions, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void scale(String scope, String stream, List<Integer> sealedSegments, Map<Double,Double> newKeyRanges, long scaleTimestamp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getURI(SegmentId segment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void isSegmentValid(String scope, String stream, int segmentNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createTransaction(String scope, String stream, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void commitTransaction(String scope, String stream, TxId txid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dropTransaction(String scope, String stream, TxId txid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkTransactionStatus(String scope, String stream, TxId txid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public CreateStreamStatus createStream(StreamConfig streamConfig) throws org.apache.thrift.TException
    {
      send_createStream(streamConfig);
      return recv_createStream();
    }

    public void send_createStream(StreamConfig streamConfig) throws org.apache.thrift.TException
    {
      createStream_args args = new createStream_args();
      args.setStreamConfig(streamConfig);
      sendBase("createStream", args);
    }

    public CreateStreamStatus recv_createStream() throws org.apache.thrift.TException
    {
      createStream_result result = new createStream_result();
      receiveBase(result, "createStream");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createStream failed: unknown result");
    }

    public UpdateStreamStatus alterStream(StreamConfig streamConfig) throws org.apache.thrift.TException
    {
      send_alterStream(streamConfig);
      return recv_alterStream();
    }

    public void send_alterStream(StreamConfig streamConfig) throws org.apache.thrift.TException
    {
      alterStream_args args = new alterStream_args();
      args.setStreamConfig(streamConfig);
      sendBase("alterStream", args);
    }

    public UpdateStreamStatus recv_alterStream() throws org.apache.thrift.TException
    {
      alterStream_result result = new alterStream_result();
      receiveBase(result, "alterStream");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "alterStream failed: unknown result");
    }

    public List<SegmentRange> getCurrentSegments(String scope, String stream) throws org.apache.thrift.TException
    {
      send_getCurrentSegments(scope, stream);
      return recv_getCurrentSegments();
    }

    public void send_getCurrentSegments(String scope, String stream) throws org.apache.thrift.TException
    {
      getCurrentSegments_args args = new getCurrentSegments_args();
      args.setScope(scope);
      args.setStream(stream);
      sendBase("getCurrentSegments", args);
    }

    public List<SegmentRange> recv_getCurrentSegments() throws org.apache.thrift.TException
    {
      getCurrentSegments_result result = new getCurrentSegments_result();
      receiveBase(result, "getCurrentSegments");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCurrentSegments failed: unknown result");
    }

    public List<Position> getPositions(String scope, String stream, long timestamp, int count) throws org.apache.thrift.TException
    {
      send_getPositions(scope, stream, timestamp, count);
      return recv_getPositions();
    }

    public void send_getPositions(String scope, String stream, long timestamp, int count) throws org.apache.thrift.TException
    {
      getPositions_args args = new getPositions_args();
      args.setScope(scope);
      args.setStream(stream);
      args.setTimestamp(timestamp);
      args.setCount(count);
      sendBase("getPositions", args);
    }

    public List<Position> recv_getPositions() throws org.apache.thrift.TException
    {
      getPositions_result result = new getPositions_result();
      receiveBase(result, "getPositions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPositions failed: unknown result");
    }

    public List<Position> updatePositions(String scope, String stream, List<Position> positions) throws org.apache.thrift.TException
    {
      send_updatePositions(scope, stream, positions);
      return recv_updatePositions();
    }

    public void send_updatePositions(String scope, String stream, List<Position> positions) throws org.apache.thrift.TException
    {
      updatePositions_args args = new updatePositions_args();
      args.setScope(scope);
      args.setStream(stream);
      args.setPositions(positions);
      sendBase("updatePositions", args);
    }

    public List<Position> recv_updatePositions() throws org.apache.thrift.TException
    {
      updatePositions_result result = new updatePositions_result();
      receiveBase(result, "updatePositions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updatePositions failed: unknown result");
    }

    public ScaleResponse scale(String scope, String stream, List<Integer> sealedSegments, Map<Double,Double> newKeyRanges, long scaleTimestamp) throws org.apache.thrift.TException
    {
      send_scale(scope, stream, sealedSegments, newKeyRanges, scaleTimestamp);
      return recv_scale();
    }

    public void send_scale(String scope, String stream, List<Integer> sealedSegments, Map<Double,Double> newKeyRanges, long scaleTimestamp) throws org.apache.thrift.TException
    {
      scale_args args = new scale_args();
      args.setScope(scope);
      args.setStream(stream);
      args.setSealedSegments(sealedSegments);
      args.setNewKeyRanges(newKeyRanges);
      args.setScaleTimestamp(scaleTimestamp);
      sendBase("scale", args);
    }

    public ScaleResponse recv_scale() throws org.apache.thrift.TException
    {
      scale_result result = new scale_result();
      receiveBase(result, "scale");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "scale failed: unknown result");
    }

    public NodeUri getURI(SegmentId segment) throws org.apache.thrift.TException
    {
      send_getURI(segment);
      return recv_getURI();
    }

    public void send_getURI(SegmentId segment) throws org.apache.thrift.TException
    {
      getURI_args args = new getURI_args();
      args.setSegment(segment);
      sendBase("getURI", args);
    }

    public NodeUri recv_getURI() throws org.apache.thrift.TException
    {
      getURI_result result = new getURI_result();
      receiveBase(result, "getURI");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getURI failed: unknown result");
    }

    public boolean isSegmentValid(String scope, String stream, int segmentNumber) throws org.apache.thrift.TException
    {
      send_isSegmentValid(scope, stream, segmentNumber);
      return recv_isSegmentValid();
    }

    public void send_isSegmentValid(String scope, String stream, int segmentNumber) throws org.apache.thrift.TException
    {
      isSegmentValid_args args = new isSegmentValid_args();
      args.setScope(scope);
      args.setStream(stream);
      args.setSegmentNumber(segmentNumber);
      sendBase("isSegmentValid", args);
    }

    public boolean recv_isSegmentValid() throws org.apache.thrift.TException
    {
      isSegmentValid_result result = new isSegmentValid_result();
      receiveBase(result, "isSegmentValid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isSegmentValid failed: unknown result");
    }

    public TxId createTransaction(String scope, String stream) throws org.apache.thrift.TException
    {
      send_createTransaction(scope, stream);
      return recv_createTransaction();
    }

    public void send_createTransaction(String scope, String stream) throws org.apache.thrift.TException
    {
      createTransaction_args args = new createTransaction_args();
      args.setScope(scope);
      args.setStream(stream);
      sendBase("createTransaction", args);
    }

    public TxId recv_createTransaction() throws org.apache.thrift.TException
    {
      createTransaction_result result = new createTransaction_result();
      receiveBase(result, "createTransaction");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createTransaction failed: unknown result");
    }

    public TransactionStatus commitTransaction(String scope, String stream, TxId txid) throws org.apache.thrift.TException
    {
      send_commitTransaction(scope, stream, txid);
      return recv_commitTransaction();
    }

    public void send_commitTransaction(String scope, String stream, TxId txid) throws org.apache.thrift.TException
    {
      commitTransaction_args args = new commitTransaction_args();
      args.setScope(scope);
      args.setStream(stream);
      args.setTxid(txid);
      sendBase("commitTransaction", args);
    }

    public TransactionStatus recv_commitTransaction() throws org.apache.thrift.TException
    {
      commitTransaction_result result = new commitTransaction_result();
      receiveBase(result, "commitTransaction");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "commitTransaction failed: unknown result");
    }

    public TransactionStatus dropTransaction(String scope, String stream, TxId txid) throws org.apache.thrift.TException
    {
      send_dropTransaction(scope, stream, txid);
      return recv_dropTransaction();
    }

    public void send_dropTransaction(String scope, String stream, TxId txid) throws org.apache.thrift.TException
    {
      dropTransaction_args args = new dropTransaction_args();
      args.setScope(scope);
      args.setStream(stream);
      args.setTxid(txid);
      sendBase("dropTransaction", args);
    }

    public TransactionStatus recv_dropTransaction() throws org.apache.thrift.TException
    {
      dropTransaction_result result = new dropTransaction_result();
      receiveBase(result, "dropTransaction");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dropTransaction failed: unknown result");
    }

    public TxState checkTransactionStatus(String scope, String stream, TxId txid) throws org.apache.thrift.TException
    {
      send_checkTransactionStatus(scope, stream, txid);
      return recv_checkTransactionStatus();
    }

    public void send_checkTransactionStatus(String scope, String stream, TxId txid) throws org.apache.thrift.TException
    {
      checkTransactionStatus_args args = new checkTransactionStatus_args();
      args.setScope(scope);
      args.setStream(stream);
      args.setTxid(txid);
      sendBase("checkTransactionStatus", args);
    }

    public TxState recv_checkTransactionStatus() throws org.apache.thrift.TException
    {
      checkTransactionStatus_result result = new checkTransactionStatus_result();
      receiveBase(result, "checkTransactionStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkTransactionStatus failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createStream(StreamConfig streamConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createStream_call method_call = new createStream_call(streamConfig, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createStream_call extends org.apache.thrift.async.TAsyncMethodCall {
      private StreamConfig streamConfig;
      public createStream_call(StreamConfig streamConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.streamConfig = streamConfig;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createStream", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createStream_args args = new createStream_args();
        args.setStreamConfig(streamConfig);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CreateStreamStatus getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createStream();
      }
    }

    public void alterStream(StreamConfig streamConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      alterStream_call method_call = new alterStream_call(streamConfig, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class alterStream_call extends org.apache.thrift.async.TAsyncMethodCall {
      private StreamConfig streamConfig;
      public alterStream_call(StreamConfig streamConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.streamConfig = streamConfig;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("alterStream", org.apache.thrift.protocol.TMessageType.CALL, 0));
        alterStream_args args = new alterStream_args();
        args.setStreamConfig(streamConfig);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UpdateStreamStatus getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_alterStream();
      }
    }

    public void getCurrentSegments(String scope, String stream, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCurrentSegments_call method_call = new getCurrentSegments_call(scope, stream, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCurrentSegments_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String scope;
      private String stream;
      public getCurrentSegments_call(String scope, String stream, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scope = scope;
        this.stream = stream;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCurrentSegments", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCurrentSegments_args args = new getCurrentSegments_args();
        args.setScope(scope);
        args.setStream(stream);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SegmentRange> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCurrentSegments();
      }
    }

    public void getPositions(String scope, String stream, long timestamp, int count, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPositions_call method_call = new getPositions_call(scope, stream, timestamp, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPositions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String scope;
      private String stream;
      private long timestamp;
      private int count;
      public getPositions_call(String scope, String stream, long timestamp, int count, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scope = scope;
        this.stream = stream;
        this.timestamp = timestamp;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPositions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPositions_args args = new getPositions_args();
        args.setScope(scope);
        args.setStream(stream);
        args.setTimestamp(timestamp);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Position> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPositions();
      }
    }

    public void updatePositions(String scope, String stream, List<Position> positions, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updatePositions_call method_call = new updatePositions_call(scope, stream, positions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updatePositions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String scope;
      private String stream;
      private List<Position> positions;
      public updatePositions_call(String scope, String stream, List<Position> positions, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scope = scope;
        this.stream = stream;
        this.positions = positions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updatePositions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updatePositions_args args = new updatePositions_args();
        args.setScope(scope);
        args.setStream(stream);
        args.setPositions(positions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Position> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updatePositions();
      }
    }

    public void scale(String scope, String stream, List<Integer> sealedSegments, Map<Double,Double> newKeyRanges, long scaleTimestamp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      scale_call method_call = new scale_call(scope, stream, sealedSegments, newKeyRanges, scaleTimestamp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class scale_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String scope;
      private String stream;
      private List<Integer> sealedSegments;
      private Map<Double,Double> newKeyRanges;
      private long scaleTimestamp;
      public scale_call(String scope, String stream, List<Integer> sealedSegments, Map<Double,Double> newKeyRanges, long scaleTimestamp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scope = scope;
        this.stream = stream;
        this.sealedSegments = sealedSegments;
        this.newKeyRanges = newKeyRanges;
        this.scaleTimestamp = scaleTimestamp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("scale", org.apache.thrift.protocol.TMessageType.CALL, 0));
        scale_args args = new scale_args();
        args.setScope(scope);
        args.setStream(stream);
        args.setSealedSegments(sealedSegments);
        args.setNewKeyRanges(newKeyRanges);
        args.setScaleTimestamp(scaleTimestamp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ScaleResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_scale();
      }
    }

    public void getURI(SegmentId segment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getURI_call method_call = new getURI_call(segment, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getURI_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SegmentId segment;
      public getURI_call(SegmentId segment, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.segment = segment;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getURI", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getURI_args args = new getURI_args();
        args.setSegment(segment);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public NodeUri getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getURI();
      }
    }

    public void isSegmentValid(String scope, String stream, int segmentNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isSegmentValid_call method_call = new isSegmentValid_call(scope, stream, segmentNumber, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isSegmentValid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String scope;
      private String stream;
      private int segmentNumber;
      public isSegmentValid_call(String scope, String stream, int segmentNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scope = scope;
        this.stream = stream;
        this.segmentNumber = segmentNumber;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isSegmentValid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isSegmentValid_args args = new isSegmentValid_args();
        args.setScope(scope);
        args.setStream(stream);
        args.setSegmentNumber(segmentNumber);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isSegmentValid();
      }
    }

    public void createTransaction(String scope, String stream, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createTransaction_call method_call = new createTransaction_call(scope, stream, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createTransaction_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String scope;
      private String stream;
      public createTransaction_call(String scope, String stream, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scope = scope;
        this.stream = stream;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createTransaction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createTransaction_args args = new createTransaction_args();
        args.setScope(scope);
        args.setStream(stream);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TxId getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createTransaction();
      }
    }

    public void commitTransaction(String scope, String stream, TxId txid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      commitTransaction_call method_call = new commitTransaction_call(scope, stream, txid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class commitTransaction_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String scope;
      private String stream;
      private TxId txid;
      public commitTransaction_call(String scope, String stream, TxId txid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scope = scope;
        this.stream = stream;
        this.txid = txid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("commitTransaction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        commitTransaction_args args = new commitTransaction_args();
        args.setScope(scope);
        args.setStream(stream);
        args.setTxid(txid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TransactionStatus getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_commitTransaction();
      }
    }

    public void dropTransaction(String scope, String stream, TxId txid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dropTransaction_call method_call = new dropTransaction_call(scope, stream, txid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dropTransaction_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String scope;
      private String stream;
      private TxId txid;
      public dropTransaction_call(String scope, String stream, TxId txid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scope = scope;
        this.stream = stream;
        this.txid = txid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dropTransaction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dropTransaction_args args = new dropTransaction_args();
        args.setScope(scope);
        args.setStream(stream);
        args.setTxid(txid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TransactionStatus getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dropTransaction();
      }
    }

    public void checkTransactionStatus(String scope, String stream, TxId txid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkTransactionStatus_call method_call = new checkTransactionStatus_call(scope, stream, txid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkTransactionStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String scope;
      private String stream;
      private TxId txid;
      public checkTransactionStatus_call(String scope, String stream, TxId txid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scope = scope;
        this.stream = stream;
        this.txid = txid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkTransactionStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkTransactionStatus_args args = new checkTransactionStatus_args();
        args.setScope(scope);
        args.setStream(stream);
        args.setTxid(txid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TxState getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkTransactionStatus();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createStream", new createStream());
      processMap.put("alterStream", new alterStream());
      processMap.put("getCurrentSegments", new getCurrentSegments());
      processMap.put("getPositions", new getPositions());
      processMap.put("updatePositions", new updatePositions());
      processMap.put("scale", new scale());
      processMap.put("getURI", new getURI());
      processMap.put("isSegmentValid", new isSegmentValid());
      processMap.put("createTransaction", new createTransaction());
      processMap.put("commitTransaction", new commitTransaction());
      processMap.put("dropTransaction", new dropTransaction());
      processMap.put("checkTransactionStatus", new checkTransactionStatus());
      return processMap;
    }

    public static class createStream<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createStream_args> {
      public createStream() {
        super("createStream");
      }

      public createStream_args getEmptyArgsInstance() {
        return new createStream_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createStream_result getResult(I iface, createStream_args args) throws org.apache.thrift.TException {
        createStream_result result = new createStream_result();
        result.success = iface.createStream(args.streamConfig);
        return result;
      }
    }

    public static class alterStream<I extends Iface> extends org.apache.thrift.ProcessFunction<I, alterStream_args> {
      public alterStream() {
        super("alterStream");
      }

      public alterStream_args getEmptyArgsInstance() {
        return new alterStream_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public alterStream_result getResult(I iface, alterStream_args args) throws org.apache.thrift.TException {
        alterStream_result result = new alterStream_result();
        result.success = iface.alterStream(args.streamConfig);
        return result;
      }
    }

    public static class getCurrentSegments<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCurrentSegments_args> {
      public getCurrentSegments() {
        super("getCurrentSegments");
      }

      public getCurrentSegments_args getEmptyArgsInstance() {
        return new getCurrentSegments_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCurrentSegments_result getResult(I iface, getCurrentSegments_args args) throws org.apache.thrift.TException {
        getCurrentSegments_result result = new getCurrentSegments_result();
        result.success = iface.getCurrentSegments(args.scope, args.stream);
        return result;
      }
    }

    public static class getPositions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPositions_args> {
      public getPositions() {
        super("getPositions");
      }

      public getPositions_args getEmptyArgsInstance() {
        return new getPositions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPositions_result getResult(I iface, getPositions_args args) throws org.apache.thrift.TException {
        getPositions_result result = new getPositions_result();
        result.success = iface.getPositions(args.scope, args.stream, args.timestamp, args.count);
        return result;
      }
    }

    public static class updatePositions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updatePositions_args> {
      public updatePositions() {
        super("updatePositions");
      }

      public updatePositions_args getEmptyArgsInstance() {
        return new updatePositions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updatePositions_result getResult(I iface, updatePositions_args args) throws org.apache.thrift.TException {
        updatePositions_result result = new updatePositions_result();
        result.success = iface.updatePositions(args.scope, args.stream, args.positions);
        return result;
      }
    }

    public static class scale<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scale_args> {
      public scale() {
        super("scale");
      }

      public scale_args getEmptyArgsInstance() {
        return new scale_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public scale_result getResult(I iface, scale_args args) throws org.apache.thrift.TException {
        scale_result result = new scale_result();
        result.success = iface.scale(args.scope, args.stream, args.sealedSegments, args.newKeyRanges, args.scaleTimestamp);
        return result;
      }
    }

    public static class getURI<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getURI_args> {
      public getURI() {
        super("getURI");
      }

      public getURI_args getEmptyArgsInstance() {
        return new getURI_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getURI_result getResult(I iface, getURI_args args) throws org.apache.thrift.TException {
        getURI_result result = new getURI_result();
        result.success = iface.getURI(args.segment);
        return result;
      }
    }

    public static class isSegmentValid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isSegmentValid_args> {
      public isSegmentValid() {
        super("isSegmentValid");
      }

      public isSegmentValid_args getEmptyArgsInstance() {
        return new isSegmentValid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isSegmentValid_result getResult(I iface, isSegmentValid_args args) throws org.apache.thrift.TException {
        isSegmentValid_result result = new isSegmentValid_result();
        result.success = iface.isSegmentValid(args.scope, args.stream, args.segmentNumber);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class createTransaction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createTransaction_args> {
      public createTransaction() {
        super("createTransaction");
      }

      public createTransaction_args getEmptyArgsInstance() {
        return new createTransaction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createTransaction_result getResult(I iface, createTransaction_args args) throws org.apache.thrift.TException {
        createTransaction_result result = new createTransaction_result();
        result.success = iface.createTransaction(args.scope, args.stream);
        return result;
      }
    }

    public static class commitTransaction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, commitTransaction_args> {
      public commitTransaction() {
        super("commitTransaction");
      }

      public commitTransaction_args getEmptyArgsInstance() {
        return new commitTransaction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public commitTransaction_result getResult(I iface, commitTransaction_args args) throws org.apache.thrift.TException {
        commitTransaction_result result = new commitTransaction_result();
        result.success = iface.commitTransaction(args.scope, args.stream, args.txid);
        return result;
      }
    }

    public static class dropTransaction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dropTransaction_args> {
      public dropTransaction() {
        super("dropTransaction");
      }

      public dropTransaction_args getEmptyArgsInstance() {
        return new dropTransaction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dropTransaction_result getResult(I iface, dropTransaction_args args) throws org.apache.thrift.TException {
        dropTransaction_result result = new dropTransaction_result();
        result.success = iface.dropTransaction(args.scope, args.stream, args.txid);
        return result;
      }
    }

    public static class checkTransactionStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkTransactionStatus_args> {
      public checkTransactionStatus() {
        super("checkTransactionStatus");
      }

      public checkTransactionStatus_args getEmptyArgsInstance() {
        return new checkTransactionStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkTransactionStatus_result getResult(I iface, checkTransactionStatus_args args) throws org.apache.thrift.TException {
        checkTransactionStatus_result result = new checkTransactionStatus_result();
        result.success = iface.checkTransactionStatus(args.scope, args.stream, args.txid);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createStream", new createStream());
      processMap.put("alterStream", new alterStream());
      processMap.put("getCurrentSegments", new getCurrentSegments());
      processMap.put("getPositions", new getPositions());
      processMap.put("updatePositions", new updatePositions());
      processMap.put("scale", new scale());
      processMap.put("getURI", new getURI());
      processMap.put("isSegmentValid", new isSegmentValid());
      processMap.put("createTransaction", new createTransaction());
      processMap.put("commitTransaction", new commitTransaction());
      processMap.put("dropTransaction", new dropTransaction());
      processMap.put("checkTransactionStatus", new checkTransactionStatus());
      return processMap;
    }

    public static class createStream<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createStream_args, CreateStreamStatus> {
      public createStream() {
        super("createStream");
      }

      public createStream_args getEmptyArgsInstance() {
        return new createStream_args();
      }

      public AsyncMethodCallback<CreateStreamStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CreateStreamStatus>() { 
          public void onComplete(CreateStreamStatus o) {
            createStream_result result = new createStream_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createStream_result result = new createStream_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createStream_args args, org.apache.thrift.async.AsyncMethodCallback<CreateStreamStatus> resultHandler) throws TException {
        iface.createStream(args.streamConfig,resultHandler);
      }
    }

    public static class alterStream<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, alterStream_args, UpdateStreamStatus> {
      public alterStream() {
        super("alterStream");
      }

      public alterStream_args getEmptyArgsInstance() {
        return new alterStream_args();
      }

      public AsyncMethodCallback<UpdateStreamStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<UpdateStreamStatus>() { 
          public void onComplete(UpdateStreamStatus o) {
            alterStream_result result = new alterStream_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            alterStream_result result = new alterStream_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, alterStream_args args, org.apache.thrift.async.AsyncMethodCallback<UpdateStreamStatus> resultHandler) throws TException {
        iface.alterStream(args.streamConfig,resultHandler);
      }
    }

    public static class getCurrentSegments<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCurrentSegments_args, List<SegmentRange>> {
      public getCurrentSegments() {
        super("getCurrentSegments");
      }

      public getCurrentSegments_args getEmptyArgsInstance() {
        return new getCurrentSegments_args();
      }

      public AsyncMethodCallback<List<SegmentRange>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SegmentRange>>() { 
          public void onComplete(List<SegmentRange> o) {
            getCurrentSegments_result result = new getCurrentSegments_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCurrentSegments_result result = new getCurrentSegments_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCurrentSegments_args args, org.apache.thrift.async.AsyncMethodCallback<List<SegmentRange>> resultHandler) throws TException {
        iface.getCurrentSegments(args.scope, args.stream,resultHandler);
      }
    }

    public static class getPositions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPositions_args, List<Position>> {
      public getPositions() {
        super("getPositions");
      }

      public getPositions_args getEmptyArgsInstance() {
        return new getPositions_args();
      }

      public AsyncMethodCallback<List<Position>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Position>>() { 
          public void onComplete(List<Position> o) {
            getPositions_result result = new getPositions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPositions_result result = new getPositions_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPositions_args args, org.apache.thrift.async.AsyncMethodCallback<List<Position>> resultHandler) throws TException {
        iface.getPositions(args.scope, args.stream, args.timestamp, args.count,resultHandler);
      }
    }

    public static class updatePositions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updatePositions_args, List<Position>> {
      public updatePositions() {
        super("updatePositions");
      }

      public updatePositions_args getEmptyArgsInstance() {
        return new updatePositions_args();
      }

      public AsyncMethodCallback<List<Position>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Position>>() { 
          public void onComplete(List<Position> o) {
            updatePositions_result result = new updatePositions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updatePositions_result result = new updatePositions_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updatePositions_args args, org.apache.thrift.async.AsyncMethodCallback<List<Position>> resultHandler) throws TException {
        iface.updatePositions(args.scope, args.stream, args.positions,resultHandler);
      }
    }

    public static class scale<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, scale_args, ScaleResponse> {
      public scale() {
        super("scale");
      }

      public scale_args getEmptyArgsInstance() {
        return new scale_args();
      }

      public AsyncMethodCallback<ScaleResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ScaleResponse>() { 
          public void onComplete(ScaleResponse o) {
            scale_result result = new scale_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            scale_result result = new scale_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, scale_args args, org.apache.thrift.async.AsyncMethodCallback<ScaleResponse> resultHandler) throws TException {
        iface.scale(args.scope, args.stream, args.sealedSegments, args.newKeyRanges, args.scaleTimestamp,resultHandler);
      }
    }

    public static class getURI<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getURI_args, NodeUri> {
      public getURI() {
        super("getURI");
      }

      public getURI_args getEmptyArgsInstance() {
        return new getURI_args();
      }

      public AsyncMethodCallback<NodeUri> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<NodeUri>() { 
          public void onComplete(NodeUri o) {
            getURI_result result = new getURI_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getURI_result result = new getURI_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getURI_args args, org.apache.thrift.async.AsyncMethodCallback<NodeUri> resultHandler) throws TException {
        iface.getURI(args.segment,resultHandler);
      }
    }

    public static class isSegmentValid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isSegmentValid_args, Boolean> {
      public isSegmentValid() {
        super("isSegmentValid");
      }

      public isSegmentValid_args getEmptyArgsInstance() {
        return new isSegmentValid_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            isSegmentValid_result result = new isSegmentValid_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isSegmentValid_result result = new isSegmentValid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isSegmentValid_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.isSegmentValid(args.scope, args.stream, args.segmentNumber,resultHandler);
      }
    }

    public static class createTransaction<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createTransaction_args, TxId> {
      public createTransaction() {
        super("createTransaction");
      }

      public createTransaction_args getEmptyArgsInstance() {
        return new createTransaction_args();
      }

      public AsyncMethodCallback<TxId> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TxId>() { 
          public void onComplete(TxId o) {
            createTransaction_result result = new createTransaction_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createTransaction_result result = new createTransaction_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createTransaction_args args, org.apache.thrift.async.AsyncMethodCallback<TxId> resultHandler) throws TException {
        iface.createTransaction(args.scope, args.stream,resultHandler);
      }
    }

    public static class commitTransaction<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, commitTransaction_args, TransactionStatus> {
      public commitTransaction() {
        super("commitTransaction");
      }

      public commitTransaction_args getEmptyArgsInstance() {
        return new commitTransaction_args();
      }

      public AsyncMethodCallback<TransactionStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TransactionStatus>() { 
          public void onComplete(TransactionStatus o) {
            commitTransaction_result result = new commitTransaction_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            commitTransaction_result result = new commitTransaction_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, commitTransaction_args args, org.apache.thrift.async.AsyncMethodCallback<TransactionStatus> resultHandler) throws TException {
        iface.commitTransaction(args.scope, args.stream, args.txid,resultHandler);
      }
    }

    public static class dropTransaction<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dropTransaction_args, TransactionStatus> {
      public dropTransaction() {
        super("dropTransaction");
      }

      public dropTransaction_args getEmptyArgsInstance() {
        return new dropTransaction_args();
      }

      public AsyncMethodCallback<TransactionStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TransactionStatus>() { 
          public void onComplete(TransactionStatus o) {
            dropTransaction_result result = new dropTransaction_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dropTransaction_result result = new dropTransaction_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dropTransaction_args args, org.apache.thrift.async.AsyncMethodCallback<TransactionStatus> resultHandler) throws TException {
        iface.dropTransaction(args.scope, args.stream, args.txid,resultHandler);
      }
    }

    public static class checkTransactionStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkTransactionStatus_args, TxState> {
      public checkTransactionStatus() {
        super("checkTransactionStatus");
      }

      public checkTransactionStatus_args getEmptyArgsInstance() {
        return new checkTransactionStatus_args();
      }

      public AsyncMethodCallback<TxState> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TxState>() { 
          public void onComplete(TxState o) {
            checkTransactionStatus_result result = new checkTransactionStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkTransactionStatus_result result = new checkTransactionStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkTransactionStatus_args args, org.apache.thrift.async.AsyncMethodCallback<TxState> resultHandler) throws TException {
        iface.checkTransactionStatus(args.scope, args.stream, args.txid,resultHandler);
      }
    }

  }

  public static class createStream_args implements org.apache.thrift.TBase<createStream_args, createStream_args._Fields>, java.io.Serializable, Cloneable, Comparable<createStream_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createStream_args");

    private static final org.apache.thrift.protocol.TField STREAM_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("streamConfig", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createStream_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createStream_argsTupleSchemeFactory());
    }

    private StreamConfig streamConfig; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STREAM_CONFIG((short)1, "streamConfig");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STREAM_CONFIG
            return STREAM_CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STREAM_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("streamConfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StreamConfig.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createStream_args.class, metaDataMap);
    }

    public createStream_args() {
    }

    public createStream_args(
      StreamConfig streamConfig)
    {
      this();
      this.streamConfig = streamConfig;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createStream_args(createStream_args other) {
      if (other.isSetStreamConfig()) {
        this.streamConfig = new StreamConfig(other.streamConfig);
      }
    }

    public createStream_args deepCopy() {
      return new createStream_args(this);
    }

    @Override
    public void clear() {
      this.streamConfig = null;
    }

    public StreamConfig getStreamConfig() {
      return this.streamConfig;
    }

    public createStream_args setStreamConfig(StreamConfig streamConfig) {
      this.streamConfig = streamConfig;
      return this;
    }

    public void unsetStreamConfig() {
      this.streamConfig = null;
    }

    /** Returns true if field streamConfig is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamConfig() {
      return this.streamConfig != null;
    }

    public void setStreamConfigIsSet(boolean value) {
      if (!value) {
        this.streamConfig = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STREAM_CONFIG:
        if (value == null) {
          unsetStreamConfig();
        } else {
          setStreamConfig((StreamConfig)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STREAM_CONFIG:
        return getStreamConfig();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STREAM_CONFIG:
        return isSetStreamConfig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createStream_args)
        return this.equals((createStream_args)that);
      return false;
    }

    public boolean equals(createStream_args that) {
      if (that == null)
        return false;

      boolean this_present_streamConfig = true && this.isSetStreamConfig();
      boolean that_present_streamConfig = true && that.isSetStreamConfig();
      if (this_present_streamConfig || that_present_streamConfig) {
        if (!(this_present_streamConfig && that_present_streamConfig))
          return false;
        if (!this.streamConfig.equals(that.streamConfig))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_streamConfig = true && (isSetStreamConfig());
      list.add(present_streamConfig);
      if (present_streamConfig)
        list.add(streamConfig);

      return list.hashCode();
    }

    @Override
    public int compareTo(createStream_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStreamConfig()).compareTo(other.isSetStreamConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamConfig, other.streamConfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createStream_args(");
      boolean first = true;

      sb.append("streamConfig:");
      if (this.streamConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.streamConfig);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (streamConfig != null) {
        streamConfig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createStream_argsStandardSchemeFactory implements SchemeFactory {
      public createStream_argsStandardScheme getScheme() {
        return new createStream_argsStandardScheme();
      }
    }

    private static class createStream_argsStandardScheme extends StandardScheme<createStream_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createStream_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STREAM_CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.streamConfig = new StreamConfig();
                struct.streamConfig.read(iprot);
                struct.setStreamConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createStream_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.streamConfig != null) {
          oprot.writeFieldBegin(STREAM_CONFIG_FIELD_DESC);
          struct.streamConfig.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createStream_argsTupleSchemeFactory implements SchemeFactory {
      public createStream_argsTupleScheme getScheme() {
        return new createStream_argsTupleScheme();
      }
    }

    private static class createStream_argsTupleScheme extends TupleScheme<createStream_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createStream_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStreamConfig()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStreamConfig()) {
          struct.streamConfig.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createStream_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.streamConfig = new StreamConfig();
          struct.streamConfig.read(iprot);
          struct.setStreamConfigIsSet(true);
        }
      }
    }

  }

  public static class createStream_result implements org.apache.thrift.TBase<createStream_result, createStream_result._Fields>, java.io.Serializable, Cloneable, Comparable<createStream_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createStream_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createStream_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createStream_resultTupleSchemeFactory());
    }

    private CreateStreamStatus success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see CreateStreamStatus
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CreateStreamStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createStream_result.class, metaDataMap);
    }

    public createStream_result() {
    }

    public createStream_result(
      CreateStreamStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createStream_result(createStream_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createStream_result deepCopy() {
      return new createStream_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see CreateStreamStatus
     */
    public CreateStreamStatus getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see CreateStreamStatus
     */
    public createStream_result setSuccess(CreateStreamStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CreateStreamStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createStream_result)
        return this.equals((createStream_result)that);
      return false;
    }

    public boolean equals(createStream_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(createStream_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createStream_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createStream_resultStandardSchemeFactory implements SchemeFactory {
      public createStream_resultStandardScheme getScheme() {
        return new createStream_resultStandardScheme();
      }
    }

    private static class createStream_resultStandardScheme extends StandardScheme<createStream_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createStream_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.emc.pravega.controller.stream.api.v1.CreateStreamStatus.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createStream_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createStream_resultTupleSchemeFactory implements SchemeFactory {
      public createStream_resultTupleScheme getScheme() {
        return new createStream_resultTupleScheme();
      }
    }

    private static class createStream_resultTupleScheme extends TupleScheme<createStream_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createStream_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createStream_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = com.emc.pravega.controller.stream.api.v1.CreateStreamStatus.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class alterStream_args implements org.apache.thrift.TBase<alterStream_args, alterStream_args._Fields>, java.io.Serializable, Cloneable, Comparable<alterStream_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("alterStream_args");

    private static final org.apache.thrift.protocol.TField STREAM_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("streamConfig", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new alterStream_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new alterStream_argsTupleSchemeFactory());
    }

    private StreamConfig streamConfig; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STREAM_CONFIG((short)1, "streamConfig");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STREAM_CONFIG
            return STREAM_CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STREAM_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("streamConfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StreamConfig.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(alterStream_args.class, metaDataMap);
    }

    public alterStream_args() {
    }

    public alterStream_args(
      StreamConfig streamConfig)
    {
      this();
      this.streamConfig = streamConfig;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public alterStream_args(alterStream_args other) {
      if (other.isSetStreamConfig()) {
        this.streamConfig = new StreamConfig(other.streamConfig);
      }
    }

    public alterStream_args deepCopy() {
      return new alterStream_args(this);
    }

    @Override
    public void clear() {
      this.streamConfig = null;
    }

    public StreamConfig getStreamConfig() {
      return this.streamConfig;
    }

    public alterStream_args setStreamConfig(StreamConfig streamConfig) {
      this.streamConfig = streamConfig;
      return this;
    }

    public void unsetStreamConfig() {
      this.streamConfig = null;
    }

    /** Returns true if field streamConfig is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamConfig() {
      return this.streamConfig != null;
    }

    public void setStreamConfigIsSet(boolean value) {
      if (!value) {
        this.streamConfig = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STREAM_CONFIG:
        if (value == null) {
          unsetStreamConfig();
        } else {
          setStreamConfig((StreamConfig)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STREAM_CONFIG:
        return getStreamConfig();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STREAM_CONFIG:
        return isSetStreamConfig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof alterStream_args)
        return this.equals((alterStream_args)that);
      return false;
    }

    public boolean equals(alterStream_args that) {
      if (that == null)
        return false;

      boolean this_present_streamConfig = true && this.isSetStreamConfig();
      boolean that_present_streamConfig = true && that.isSetStreamConfig();
      if (this_present_streamConfig || that_present_streamConfig) {
        if (!(this_present_streamConfig && that_present_streamConfig))
          return false;
        if (!this.streamConfig.equals(that.streamConfig))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_streamConfig = true && (isSetStreamConfig());
      list.add(present_streamConfig);
      if (present_streamConfig)
        list.add(streamConfig);

      return list.hashCode();
    }

    @Override
    public int compareTo(alterStream_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStreamConfig()).compareTo(other.isSetStreamConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamConfig, other.streamConfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("alterStream_args(");
      boolean first = true;

      sb.append("streamConfig:");
      if (this.streamConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.streamConfig);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (streamConfig != null) {
        streamConfig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class alterStream_argsStandardSchemeFactory implements SchemeFactory {
      public alterStream_argsStandardScheme getScheme() {
        return new alterStream_argsStandardScheme();
      }
    }

    private static class alterStream_argsStandardScheme extends StandardScheme<alterStream_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, alterStream_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STREAM_CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.streamConfig = new StreamConfig();
                struct.streamConfig.read(iprot);
                struct.setStreamConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, alterStream_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.streamConfig != null) {
          oprot.writeFieldBegin(STREAM_CONFIG_FIELD_DESC);
          struct.streamConfig.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class alterStream_argsTupleSchemeFactory implements SchemeFactory {
      public alterStream_argsTupleScheme getScheme() {
        return new alterStream_argsTupleScheme();
      }
    }

    private static class alterStream_argsTupleScheme extends TupleScheme<alterStream_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, alterStream_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStreamConfig()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStreamConfig()) {
          struct.streamConfig.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, alterStream_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.streamConfig = new StreamConfig();
          struct.streamConfig.read(iprot);
          struct.setStreamConfigIsSet(true);
        }
      }
    }

  }

  public static class alterStream_result implements org.apache.thrift.TBase<alterStream_result, alterStream_result._Fields>, java.io.Serializable, Cloneable, Comparable<alterStream_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("alterStream_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new alterStream_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new alterStream_resultTupleSchemeFactory());
    }

    private UpdateStreamStatus success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see UpdateStreamStatus
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, UpdateStreamStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(alterStream_result.class, metaDataMap);
    }

    public alterStream_result() {
    }

    public alterStream_result(
      UpdateStreamStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public alterStream_result(alterStream_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public alterStream_result deepCopy() {
      return new alterStream_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see UpdateStreamStatus
     */
    public UpdateStreamStatus getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see UpdateStreamStatus
     */
    public alterStream_result setSuccess(UpdateStreamStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UpdateStreamStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof alterStream_result)
        return this.equals((alterStream_result)that);
      return false;
    }

    public boolean equals(alterStream_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(alterStream_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("alterStream_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class alterStream_resultStandardSchemeFactory implements SchemeFactory {
      public alterStream_resultStandardScheme getScheme() {
        return new alterStream_resultStandardScheme();
      }
    }

    private static class alterStream_resultStandardScheme extends StandardScheme<alterStream_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, alterStream_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.emc.pravega.controller.stream.api.v1.UpdateStreamStatus.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, alterStream_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class alterStream_resultTupleSchemeFactory implements SchemeFactory {
      public alterStream_resultTupleScheme getScheme() {
        return new alterStream_resultTupleScheme();
      }
    }

    private static class alterStream_resultTupleScheme extends TupleScheme<alterStream_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, alterStream_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, alterStream_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = com.emc.pravega.controller.stream.api.v1.UpdateStreamStatus.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCurrentSegments_args implements org.apache.thrift.TBase<getCurrentSegments_args, getCurrentSegments_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCurrentSegments_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCurrentSegments_args");

    private static final org.apache.thrift.protocol.TField SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scope", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STREAM_FIELD_DESC = new org.apache.thrift.protocol.TField("stream", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCurrentSegments_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCurrentSegments_argsTupleSchemeFactory());
    }

    private String scope; // required
    private String stream; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCOPE((short)1, "scope"),
      STREAM((short)2, "stream");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCOPE
            return SCOPE;
          case 2: // STREAM
            return STREAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCOPE, new org.apache.thrift.meta_data.FieldMetaData("scope", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STREAM, new org.apache.thrift.meta_data.FieldMetaData("stream", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCurrentSegments_args.class, metaDataMap);
    }

    public getCurrentSegments_args() {
    }

    public getCurrentSegments_args(
      String scope,
      String stream)
    {
      this();
      this.scope = scope;
      this.stream = stream;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCurrentSegments_args(getCurrentSegments_args other) {
      if (other.isSetScope()) {
        this.scope = other.scope;
      }
      if (other.isSetStream()) {
        this.stream = other.stream;
      }
    }

    public getCurrentSegments_args deepCopy() {
      return new getCurrentSegments_args(this);
    }

    @Override
    public void clear() {
      this.scope = null;
      this.stream = null;
    }

    public String getScope() {
      return this.scope;
    }

    public getCurrentSegments_args setScope(String scope) {
      this.scope = scope;
      return this;
    }

    public void unsetScope() {
      this.scope = null;
    }

    /** Returns true if field scope is set (has been assigned a value) and false otherwise */
    public boolean isSetScope() {
      return this.scope != null;
    }

    public void setScopeIsSet(boolean value) {
      if (!value) {
        this.scope = null;
      }
    }

    public String getStream() {
      return this.stream;
    }

    public getCurrentSegments_args setStream(String stream) {
      this.stream = stream;
      return this;
    }

    public void unsetStream() {
      this.stream = null;
    }

    /** Returns true if field stream is set (has been assigned a value) and false otherwise */
    public boolean isSetStream() {
      return this.stream != null;
    }

    public void setStreamIsSet(boolean value) {
      if (!value) {
        this.stream = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCOPE:
        if (value == null) {
          unsetScope();
        } else {
          setScope((String)value);
        }
        break;

      case STREAM:
        if (value == null) {
          unsetStream();
        } else {
          setStream((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCOPE:
        return getScope();

      case STREAM:
        return getStream();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCOPE:
        return isSetScope();
      case STREAM:
        return isSetStream();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCurrentSegments_args)
        return this.equals((getCurrentSegments_args)that);
      return false;
    }

    public boolean equals(getCurrentSegments_args that) {
      if (that == null)
        return false;

      boolean this_present_scope = true && this.isSetScope();
      boolean that_present_scope = true && that.isSetScope();
      if (this_present_scope || that_present_scope) {
        if (!(this_present_scope && that_present_scope))
          return false;
        if (!this.scope.equals(that.scope))
          return false;
      }

      boolean this_present_stream = true && this.isSetStream();
      boolean that_present_stream = true && that.isSetStream();
      if (this_present_stream || that_present_stream) {
        if (!(this_present_stream && that_present_stream))
          return false;
        if (!this.stream.equals(that.stream))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_scope = true && (isSetScope());
      list.add(present_scope);
      if (present_scope)
        list.add(scope);

      boolean present_stream = true && (isSetStream());
      list.add(present_stream);
      if (present_stream)
        list.add(stream);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCurrentSegments_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetScope()).compareTo(other.isSetScope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScope()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scope, other.scope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStream()).compareTo(other.isSetStream());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStream()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stream, other.stream);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCurrentSegments_args(");
      boolean first = true;

      sb.append("scope:");
      if (this.scope == null) {
        sb.append("null");
      } else {
        sb.append(this.scope);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stream:");
      if (this.stream == null) {
        sb.append("null");
      } else {
        sb.append(this.stream);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCurrentSegments_argsStandardSchemeFactory implements SchemeFactory {
      public getCurrentSegments_argsStandardScheme getScheme() {
        return new getCurrentSegments_argsStandardScheme();
      }
    }

    private static class getCurrentSegments_argsStandardScheme extends StandardScheme<getCurrentSegments_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCurrentSegments_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCOPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.scope = iprot.readString();
                struct.setScopeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STREAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stream = iprot.readString();
                struct.setStreamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCurrentSegments_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.scope != null) {
          oprot.writeFieldBegin(SCOPE_FIELD_DESC);
          oprot.writeString(struct.scope);
          oprot.writeFieldEnd();
        }
        if (struct.stream != null) {
          oprot.writeFieldBegin(STREAM_FIELD_DESC);
          oprot.writeString(struct.stream);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCurrentSegments_argsTupleSchemeFactory implements SchemeFactory {
      public getCurrentSegments_argsTupleScheme getScheme() {
        return new getCurrentSegments_argsTupleScheme();
      }
    }

    private static class getCurrentSegments_argsTupleScheme extends TupleScheme<getCurrentSegments_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCurrentSegments_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetScope()) {
          optionals.set(0);
        }
        if (struct.isSetStream()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetScope()) {
          oprot.writeString(struct.scope);
        }
        if (struct.isSetStream()) {
          oprot.writeString(struct.stream);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCurrentSegments_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.scope = iprot.readString();
          struct.setScopeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stream = iprot.readString();
          struct.setStreamIsSet(true);
        }
      }
    }

  }

  public static class getCurrentSegments_result implements org.apache.thrift.TBase<getCurrentSegments_result, getCurrentSegments_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCurrentSegments_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCurrentSegments_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCurrentSegments_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCurrentSegments_resultTupleSchemeFactory());
    }

    private List<SegmentRange> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SegmentRange.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCurrentSegments_result.class, metaDataMap);
    }

    public getCurrentSegments_result() {
    }

    public getCurrentSegments_result(
      List<SegmentRange> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCurrentSegments_result(getCurrentSegments_result other) {
      if (other.isSetSuccess()) {
        List<SegmentRange> __this__success = new ArrayList<SegmentRange>(other.success.size());
        for (SegmentRange other_element : other.success) {
          __this__success.add(new SegmentRange(other_element));
        }
        this.success = __this__success;
      }
    }

    public getCurrentSegments_result deepCopy() {
      return new getCurrentSegments_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SegmentRange> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SegmentRange elem) {
      if (this.success == null) {
        this.success = new ArrayList<SegmentRange>();
      }
      this.success.add(elem);
    }

    public List<SegmentRange> getSuccess() {
      return this.success;
    }

    public getCurrentSegments_result setSuccess(List<SegmentRange> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SegmentRange>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCurrentSegments_result)
        return this.equals((getCurrentSegments_result)that);
      return false;
    }

    public boolean equals(getCurrentSegments_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCurrentSegments_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCurrentSegments_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCurrentSegments_resultStandardSchemeFactory implements SchemeFactory {
      public getCurrentSegments_resultStandardScheme getScheme() {
        return new getCurrentSegments_resultStandardScheme();
      }
    }

    private static class getCurrentSegments_resultStandardScheme extends StandardScheme<getCurrentSegments_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCurrentSegments_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                  struct.success = new ArrayList<SegmentRange>(_list28.size);
                  SegmentRange _elem29;
                  for (int _i30 = 0; _i30 < _list28.size; ++_i30)
                  {
                    _elem29 = new SegmentRange();
                    _elem29.read(iprot);
                    struct.success.add(_elem29);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCurrentSegments_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SegmentRange _iter31 : struct.success)
            {
              _iter31.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCurrentSegments_resultTupleSchemeFactory implements SchemeFactory {
      public getCurrentSegments_resultTupleScheme getScheme() {
        return new getCurrentSegments_resultTupleScheme();
      }
    }

    private static class getCurrentSegments_resultTupleScheme extends TupleScheme<getCurrentSegments_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCurrentSegments_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SegmentRange _iter32 : struct.success)
            {
              _iter32.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCurrentSegments_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SegmentRange>(_list33.size);
            SegmentRange _elem34;
            for (int _i35 = 0; _i35 < _list33.size; ++_i35)
            {
              _elem34 = new SegmentRange();
              _elem34.read(iprot);
              struct.success.add(_elem34);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPositions_args implements org.apache.thrift.TBase<getPositions_args, getPositions_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPositions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPositions_args");

    private static final org.apache.thrift.protocol.TField SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scope", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STREAM_FIELD_DESC = new org.apache.thrift.protocol.TField("stream", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPositions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPositions_argsTupleSchemeFactory());
    }

    private String scope; // required
    private String stream; // required
    private long timestamp; // required
    private int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCOPE((short)1, "scope"),
      STREAM((short)2, "stream"),
      TIMESTAMP((short)3, "timestamp"),
      COUNT((short)4, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCOPE
            return SCOPE;
          case 2: // STREAM
            return STREAM;
          case 3: // TIMESTAMP
            return TIMESTAMP;
          case 4: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMESTAMP_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCOPE, new org.apache.thrift.meta_data.FieldMetaData("scope", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STREAM, new org.apache.thrift.meta_data.FieldMetaData("stream", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPositions_args.class, metaDataMap);
    }

    public getPositions_args() {
    }

    public getPositions_args(
      String scope,
      String stream,
      long timestamp,
      int count)
    {
      this();
      this.scope = scope;
      this.stream = stream;
      this.timestamp = timestamp;
      setTimestampIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPositions_args(getPositions_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetScope()) {
        this.scope = other.scope;
      }
      if (other.isSetStream()) {
        this.stream = other.stream;
      }
      this.timestamp = other.timestamp;
      this.count = other.count;
    }

    public getPositions_args deepCopy() {
      return new getPositions_args(this);
    }

    @Override
    public void clear() {
      this.scope = null;
      this.stream = null;
      setTimestampIsSet(false);
      this.timestamp = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public String getScope() {
      return this.scope;
    }

    public getPositions_args setScope(String scope) {
      this.scope = scope;
      return this;
    }

    public void unsetScope() {
      this.scope = null;
    }

    /** Returns true if field scope is set (has been assigned a value) and false otherwise */
    public boolean isSetScope() {
      return this.scope != null;
    }

    public void setScopeIsSet(boolean value) {
      if (!value) {
        this.scope = null;
      }
    }

    public String getStream() {
      return this.stream;
    }

    public getPositions_args setStream(String stream) {
      this.stream = stream;
      return this;
    }

    public void unsetStream() {
      this.stream = null;
    }

    /** Returns true if field stream is set (has been assigned a value) and false otherwise */
    public boolean isSetStream() {
      return this.stream != null;
    }

    public void setStreamIsSet(boolean value) {
      if (!value) {
        this.stream = null;
      }
    }

    public long getTimestamp() {
      return this.timestamp;
    }

    public getPositions_args setTimestamp(long timestamp) {
      this.timestamp = timestamp;
      setTimestampIsSet(true);
      return this;
    }

    public void unsetTimestamp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    public void setTimestampIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public getPositions_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCOPE:
        if (value == null) {
          unsetScope();
        } else {
          setScope((String)value);
        }
        break;

      case STREAM:
        if (value == null) {
          unsetStream();
        } else {
          setStream((String)value);
        }
        break;

      case TIMESTAMP:
        if (value == null) {
          unsetTimestamp();
        } else {
          setTimestamp((Long)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCOPE:
        return getScope();

      case STREAM:
        return getStream();

      case TIMESTAMP:
        return getTimestamp();

      case COUNT:
        return getCount();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCOPE:
        return isSetScope();
      case STREAM:
        return isSetStream();
      case TIMESTAMP:
        return isSetTimestamp();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPositions_args)
        return this.equals((getPositions_args)that);
      return false;
    }

    public boolean equals(getPositions_args that) {
      if (that == null)
        return false;

      boolean this_present_scope = true && this.isSetScope();
      boolean that_present_scope = true && that.isSetScope();
      if (this_present_scope || that_present_scope) {
        if (!(this_present_scope && that_present_scope))
          return false;
        if (!this.scope.equals(that.scope))
          return false;
      }

      boolean this_present_stream = true && this.isSetStream();
      boolean that_present_stream = true && that.isSetStream();
      if (this_present_stream || that_present_stream) {
        if (!(this_present_stream && that_present_stream))
          return false;
        if (!this.stream.equals(that.stream))
          return false;
      }

      boolean this_present_timestamp = true;
      boolean that_present_timestamp = true;
      if (this_present_timestamp || that_present_timestamp) {
        if (!(this_present_timestamp && that_present_timestamp))
          return false;
        if (this.timestamp != that.timestamp)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_scope = true && (isSetScope());
      list.add(present_scope);
      if (present_scope)
        list.add(scope);

      boolean present_stream = true && (isSetStream());
      list.add(present_stream);
      if (present_stream)
        list.add(stream);

      boolean present_timestamp = true;
      list.add(present_timestamp);
      if (present_timestamp)
        list.add(timestamp);

      boolean present_count = true;
      list.add(present_count);
      if (present_count)
        list.add(count);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPositions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetScope()).compareTo(other.isSetScope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScope()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scope, other.scope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStream()).compareTo(other.isSetStream());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStream()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stream, other.stream);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPositions_args(");
      boolean first = true;

      sb.append("scope:");
      if (this.scope == null) {
        sb.append("null");
      } else {
        sb.append(this.scope);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stream:");
      if (this.stream == null) {
        sb.append("null");
      } else {
        sb.append(this.stream);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPositions_argsStandardSchemeFactory implements SchemeFactory {
      public getPositions_argsStandardScheme getScheme() {
        return new getPositions_argsStandardScheme();
      }
    }

    private static class getPositions_argsStandardScheme extends StandardScheme<getPositions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPositions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCOPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.scope = iprot.readString();
                struct.setScopeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STREAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stream = iprot.readString();
                struct.setStreamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.timestamp = iprot.readI64();
                struct.setTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPositions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.scope != null) {
          oprot.writeFieldBegin(SCOPE_FIELD_DESC);
          oprot.writeString(struct.scope);
          oprot.writeFieldEnd();
        }
        if (struct.stream != null) {
          oprot.writeFieldBegin(STREAM_FIELD_DESC);
          oprot.writeString(struct.stream);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPositions_argsTupleSchemeFactory implements SchemeFactory {
      public getPositions_argsTupleScheme getScheme() {
        return new getPositions_argsTupleScheme();
      }
    }

    private static class getPositions_argsTupleScheme extends TupleScheme<getPositions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPositions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetScope()) {
          optionals.set(0);
        }
        if (struct.isSetStream()) {
          optionals.set(1);
        }
        if (struct.isSetTimestamp()) {
          optionals.set(2);
        }
        if (struct.isSetCount()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetScope()) {
          oprot.writeString(struct.scope);
        }
        if (struct.isSetStream()) {
          oprot.writeString(struct.stream);
        }
        if (struct.isSetTimestamp()) {
          oprot.writeI64(struct.timestamp);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPositions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.scope = iprot.readString();
          struct.setScopeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stream = iprot.readString();
          struct.setStreamIsSet(true);
        }
        if (incoming.get(2)) {
          struct.timestamp = iprot.readI64();
          struct.setTimestampIsSet(true);
        }
        if (incoming.get(3)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class getPositions_result implements org.apache.thrift.TBase<getPositions_result, getPositions_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPositions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPositions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPositions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPositions_resultTupleSchemeFactory());
    }

    private List<Position> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Position.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPositions_result.class, metaDataMap);
    }

    public getPositions_result() {
    }

    public getPositions_result(
      List<Position> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPositions_result(getPositions_result other) {
      if (other.isSetSuccess()) {
        List<Position> __this__success = new ArrayList<Position>(other.success.size());
        for (Position other_element : other.success) {
          __this__success.add(new Position(other_element));
        }
        this.success = __this__success;
      }
    }

    public getPositions_result deepCopy() {
      return new getPositions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Position> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Position elem) {
      if (this.success == null) {
        this.success = new ArrayList<Position>();
      }
      this.success.add(elem);
    }

    public List<Position> getSuccess() {
      return this.success;
    }

    public getPositions_result setSuccess(List<Position> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Position>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPositions_result)
        return this.equals((getPositions_result)that);
      return false;
    }

    public boolean equals(getPositions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPositions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPositions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPositions_resultStandardSchemeFactory implements SchemeFactory {
      public getPositions_resultStandardScheme getScheme() {
        return new getPositions_resultStandardScheme();
      }
    }

    private static class getPositions_resultStandardScheme extends StandardScheme<getPositions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPositions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                  struct.success = new ArrayList<Position>(_list36.size);
                  Position _elem37;
                  for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                  {
                    _elem37 = new Position();
                    _elem37.read(iprot);
                    struct.success.add(_elem37);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPositions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Position _iter39 : struct.success)
            {
              _iter39.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPositions_resultTupleSchemeFactory implements SchemeFactory {
      public getPositions_resultTupleScheme getScheme() {
        return new getPositions_resultTupleScheme();
      }
    }

    private static class getPositions_resultTupleScheme extends TupleScheme<getPositions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPositions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Position _iter40 : struct.success)
            {
              _iter40.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPositions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Position>(_list41.size);
            Position _elem42;
            for (int _i43 = 0; _i43 < _list41.size; ++_i43)
            {
              _elem42 = new Position();
              _elem42.read(iprot);
              struct.success.add(_elem42);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updatePositions_args implements org.apache.thrift.TBase<updatePositions_args, updatePositions_args._Fields>, java.io.Serializable, Cloneable, Comparable<updatePositions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePositions_args");

    private static final org.apache.thrift.protocol.TField SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scope", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STREAM_FIELD_DESC = new org.apache.thrift.protocol.TField("stream", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField POSITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("positions", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePositions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePositions_argsTupleSchemeFactory());
    }

    private String scope; // required
    private String stream; // required
    private List<Position> positions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCOPE((short)1, "scope"),
      STREAM((short)2, "stream"),
      POSITIONS((short)3, "positions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCOPE
            return SCOPE;
          case 2: // STREAM
            return STREAM;
          case 3: // POSITIONS
            return POSITIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCOPE, new org.apache.thrift.meta_data.FieldMetaData("scope", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STREAM, new org.apache.thrift.meta_data.FieldMetaData("stream", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POSITIONS, new org.apache.thrift.meta_data.FieldMetaData("positions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Position.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePositions_args.class, metaDataMap);
    }

    public updatePositions_args() {
    }

    public updatePositions_args(
      String scope,
      String stream,
      List<Position> positions)
    {
      this();
      this.scope = scope;
      this.stream = stream;
      this.positions = positions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePositions_args(updatePositions_args other) {
      if (other.isSetScope()) {
        this.scope = other.scope;
      }
      if (other.isSetStream()) {
        this.stream = other.stream;
      }
      if (other.isSetPositions()) {
        List<Position> __this__positions = new ArrayList<Position>(other.positions.size());
        for (Position other_element : other.positions) {
          __this__positions.add(new Position(other_element));
        }
        this.positions = __this__positions;
      }
    }

    public updatePositions_args deepCopy() {
      return new updatePositions_args(this);
    }

    @Override
    public void clear() {
      this.scope = null;
      this.stream = null;
      this.positions = null;
    }

    public String getScope() {
      return this.scope;
    }

    public updatePositions_args setScope(String scope) {
      this.scope = scope;
      return this;
    }

    public void unsetScope() {
      this.scope = null;
    }

    /** Returns true if field scope is set (has been assigned a value) and false otherwise */
    public boolean isSetScope() {
      return this.scope != null;
    }

    public void setScopeIsSet(boolean value) {
      if (!value) {
        this.scope = null;
      }
    }

    public String getStream() {
      return this.stream;
    }

    public updatePositions_args setStream(String stream) {
      this.stream = stream;
      return this;
    }

    public void unsetStream() {
      this.stream = null;
    }

    /** Returns true if field stream is set (has been assigned a value) and false otherwise */
    public boolean isSetStream() {
      return this.stream != null;
    }

    public void setStreamIsSet(boolean value) {
      if (!value) {
        this.stream = null;
      }
    }

    public int getPositionsSize() {
      return (this.positions == null) ? 0 : this.positions.size();
    }

    public java.util.Iterator<Position> getPositionsIterator() {
      return (this.positions == null) ? null : this.positions.iterator();
    }

    public void addToPositions(Position elem) {
      if (this.positions == null) {
        this.positions = new ArrayList<Position>();
      }
      this.positions.add(elem);
    }

    public List<Position> getPositions() {
      return this.positions;
    }

    public updatePositions_args setPositions(List<Position> positions) {
      this.positions = positions;
      return this;
    }

    public void unsetPositions() {
      this.positions = null;
    }

    /** Returns true if field positions is set (has been assigned a value) and false otherwise */
    public boolean isSetPositions() {
      return this.positions != null;
    }

    public void setPositionsIsSet(boolean value) {
      if (!value) {
        this.positions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCOPE:
        if (value == null) {
          unsetScope();
        } else {
          setScope((String)value);
        }
        break;

      case STREAM:
        if (value == null) {
          unsetStream();
        } else {
          setStream((String)value);
        }
        break;

      case POSITIONS:
        if (value == null) {
          unsetPositions();
        } else {
          setPositions((List<Position>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCOPE:
        return getScope();

      case STREAM:
        return getStream();

      case POSITIONS:
        return getPositions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCOPE:
        return isSetScope();
      case STREAM:
        return isSetStream();
      case POSITIONS:
        return isSetPositions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePositions_args)
        return this.equals((updatePositions_args)that);
      return false;
    }

    public boolean equals(updatePositions_args that) {
      if (that == null)
        return false;

      boolean this_present_scope = true && this.isSetScope();
      boolean that_present_scope = true && that.isSetScope();
      if (this_present_scope || that_present_scope) {
        if (!(this_present_scope && that_present_scope))
          return false;
        if (!this.scope.equals(that.scope))
          return false;
      }

      boolean this_present_stream = true && this.isSetStream();
      boolean that_present_stream = true && that.isSetStream();
      if (this_present_stream || that_present_stream) {
        if (!(this_present_stream && that_present_stream))
          return false;
        if (!this.stream.equals(that.stream))
          return false;
      }

      boolean this_present_positions = true && this.isSetPositions();
      boolean that_present_positions = true && that.isSetPositions();
      if (this_present_positions || that_present_positions) {
        if (!(this_present_positions && that_present_positions))
          return false;
        if (!this.positions.equals(that.positions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_scope = true && (isSetScope());
      list.add(present_scope);
      if (present_scope)
        list.add(scope);

      boolean present_stream = true && (isSetStream());
      list.add(present_stream);
      if (present_stream)
        list.add(stream);

      boolean present_positions = true && (isSetPositions());
      list.add(present_positions);
      if (present_positions)
        list.add(positions);

      return list.hashCode();
    }

    @Override
    public int compareTo(updatePositions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetScope()).compareTo(other.isSetScope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScope()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scope, other.scope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStream()).compareTo(other.isSetStream());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStream()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stream, other.stream);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPositions()).compareTo(other.isSetPositions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPositions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positions, other.positions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePositions_args(");
      boolean first = true;

      sb.append("scope:");
      if (this.scope == null) {
        sb.append("null");
      } else {
        sb.append(this.scope);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stream:");
      if (this.stream == null) {
        sb.append("null");
      } else {
        sb.append(this.stream);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("positions:");
      if (this.positions == null) {
        sb.append("null");
      } else {
        sb.append(this.positions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePositions_argsStandardSchemeFactory implements SchemeFactory {
      public updatePositions_argsStandardScheme getScheme() {
        return new updatePositions_argsStandardScheme();
      }
    }

    private static class updatePositions_argsStandardScheme extends StandardScheme<updatePositions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePositions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCOPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.scope = iprot.readString();
                struct.setScopeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STREAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stream = iprot.readString();
                struct.setStreamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // POSITIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                  struct.positions = new ArrayList<Position>(_list44.size);
                  Position _elem45;
                  for (int _i46 = 0; _i46 < _list44.size; ++_i46)
                  {
                    _elem45 = new Position();
                    _elem45.read(iprot);
                    struct.positions.add(_elem45);
                  }
                  iprot.readListEnd();
                }
                struct.setPositionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePositions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.scope != null) {
          oprot.writeFieldBegin(SCOPE_FIELD_DESC);
          oprot.writeString(struct.scope);
          oprot.writeFieldEnd();
        }
        if (struct.stream != null) {
          oprot.writeFieldBegin(STREAM_FIELD_DESC);
          oprot.writeString(struct.stream);
          oprot.writeFieldEnd();
        }
        if (struct.positions != null) {
          oprot.writeFieldBegin(POSITIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.positions.size()));
            for (Position _iter47 : struct.positions)
            {
              _iter47.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePositions_argsTupleSchemeFactory implements SchemeFactory {
      public updatePositions_argsTupleScheme getScheme() {
        return new updatePositions_argsTupleScheme();
      }
    }

    private static class updatePositions_argsTupleScheme extends TupleScheme<updatePositions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePositions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetScope()) {
          optionals.set(0);
        }
        if (struct.isSetStream()) {
          optionals.set(1);
        }
        if (struct.isSetPositions()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetScope()) {
          oprot.writeString(struct.scope);
        }
        if (struct.isSetStream()) {
          oprot.writeString(struct.stream);
        }
        if (struct.isSetPositions()) {
          {
            oprot.writeI32(struct.positions.size());
            for (Position _iter48 : struct.positions)
            {
              _iter48.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePositions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.scope = iprot.readString();
          struct.setScopeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stream = iprot.readString();
          struct.setStreamIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.positions = new ArrayList<Position>(_list49.size);
            Position _elem50;
            for (int _i51 = 0; _i51 < _list49.size; ++_i51)
            {
              _elem50 = new Position();
              _elem50.read(iprot);
              struct.positions.add(_elem50);
            }
          }
          struct.setPositionsIsSet(true);
        }
      }
    }

  }

  public static class updatePositions_result implements org.apache.thrift.TBase<updatePositions_result, updatePositions_result._Fields>, java.io.Serializable, Cloneable, Comparable<updatePositions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePositions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePositions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePositions_resultTupleSchemeFactory());
    }

    private List<Position> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Position.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePositions_result.class, metaDataMap);
    }

    public updatePositions_result() {
    }

    public updatePositions_result(
      List<Position> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePositions_result(updatePositions_result other) {
      if (other.isSetSuccess()) {
        List<Position> __this__success = new ArrayList<Position>(other.success.size());
        for (Position other_element : other.success) {
          __this__success.add(new Position(other_element));
        }
        this.success = __this__success;
      }
    }

    public updatePositions_result deepCopy() {
      return new updatePositions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Position> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Position elem) {
      if (this.success == null) {
        this.success = new ArrayList<Position>();
      }
      this.success.add(elem);
    }

    public List<Position> getSuccess() {
      return this.success;
    }

    public updatePositions_result setSuccess(List<Position> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Position>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePositions_result)
        return this.equals((updatePositions_result)that);
      return false;
    }

    public boolean equals(updatePositions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updatePositions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePositions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePositions_resultStandardSchemeFactory implements SchemeFactory {
      public updatePositions_resultStandardScheme getScheme() {
        return new updatePositions_resultStandardScheme();
      }
    }

    private static class updatePositions_resultStandardScheme extends StandardScheme<updatePositions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePositions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                  struct.success = new ArrayList<Position>(_list52.size);
                  Position _elem53;
                  for (int _i54 = 0; _i54 < _list52.size; ++_i54)
                  {
                    _elem53 = new Position();
                    _elem53.read(iprot);
                    struct.success.add(_elem53);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePositions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Position _iter55 : struct.success)
            {
              _iter55.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePositions_resultTupleSchemeFactory implements SchemeFactory {
      public updatePositions_resultTupleScheme getScheme() {
        return new updatePositions_resultTupleScheme();
      }
    }

    private static class updatePositions_resultTupleScheme extends TupleScheme<updatePositions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePositions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Position _iter56 : struct.success)
            {
              _iter56.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePositions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Position>(_list57.size);
            Position _elem58;
            for (int _i59 = 0; _i59 < _list57.size; ++_i59)
            {
              _elem58 = new Position();
              _elem58.read(iprot);
              struct.success.add(_elem58);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class scale_args implements org.apache.thrift.TBase<scale_args, scale_args._Fields>, java.io.Serializable, Cloneable, Comparable<scale_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scale_args");

    private static final org.apache.thrift.protocol.TField SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scope", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STREAM_FIELD_DESC = new org.apache.thrift.protocol.TField("stream", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SEALED_SEGMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("sealedSegments", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField NEW_KEY_RANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("newKeyRanges", org.apache.thrift.protocol.TType.MAP, (short)4);
    private static final org.apache.thrift.protocol.TField SCALE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("scaleTimestamp", org.apache.thrift.protocol.TType.I64, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new scale_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new scale_argsTupleSchemeFactory());
    }

    private String scope; // required
    private String stream; // required
    private List<Integer> sealedSegments; // required
    private Map<Double,Double> newKeyRanges; // required
    private long scaleTimestamp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCOPE((short)1, "scope"),
      STREAM((short)2, "stream"),
      SEALED_SEGMENTS((short)3, "sealedSegments"),
      NEW_KEY_RANGES((short)4, "newKeyRanges"),
      SCALE_TIMESTAMP((short)5, "scaleTimestamp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCOPE
            return SCOPE;
          case 2: // STREAM
            return STREAM;
          case 3: // SEALED_SEGMENTS
            return SEALED_SEGMENTS;
          case 4: // NEW_KEY_RANGES
            return NEW_KEY_RANGES;
          case 5: // SCALE_TIMESTAMP
            return SCALE_TIMESTAMP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCALETIMESTAMP_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCOPE, new org.apache.thrift.meta_data.FieldMetaData("scope", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STREAM, new org.apache.thrift.meta_data.FieldMetaData("stream", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SEALED_SEGMENTS, new org.apache.thrift.meta_data.FieldMetaData("sealedSegments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.NEW_KEY_RANGES, new org.apache.thrift.meta_data.FieldMetaData("newKeyRanges", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      tmpMap.put(_Fields.SCALE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("scaleTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scale_args.class, metaDataMap);
    }

    public scale_args() {
    }

    public scale_args(
      String scope,
      String stream,
      List<Integer> sealedSegments,
      Map<Double,Double> newKeyRanges,
      long scaleTimestamp)
    {
      this();
      this.scope = scope;
      this.stream = stream;
      this.sealedSegments = sealedSegments;
      this.newKeyRanges = newKeyRanges;
      this.scaleTimestamp = scaleTimestamp;
      setScaleTimestampIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scale_args(scale_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetScope()) {
        this.scope = other.scope;
      }
      if (other.isSetStream()) {
        this.stream = other.stream;
      }
      if (other.isSetSealedSegments()) {
        List<Integer> __this__sealedSegments = new ArrayList<Integer>(other.sealedSegments);
        this.sealedSegments = __this__sealedSegments;
      }
      if (other.isSetNewKeyRanges()) {
        Map<Double,Double> __this__newKeyRanges = new HashMap<Double,Double>(other.newKeyRanges);
        this.newKeyRanges = __this__newKeyRanges;
      }
      this.scaleTimestamp = other.scaleTimestamp;
    }

    public scale_args deepCopy() {
      return new scale_args(this);
    }

    @Override
    public void clear() {
      this.scope = null;
      this.stream = null;
      this.sealedSegments = null;
      this.newKeyRanges = null;
      setScaleTimestampIsSet(false);
      this.scaleTimestamp = 0;
    }

    public String getScope() {
      return this.scope;
    }

    public scale_args setScope(String scope) {
      this.scope = scope;
      return this;
    }

    public void unsetScope() {
      this.scope = null;
    }

    /** Returns true if field scope is set (has been assigned a value) and false otherwise */
    public boolean isSetScope() {
      return this.scope != null;
    }

    public void setScopeIsSet(boolean value) {
      if (!value) {
        this.scope = null;
      }
    }

    public String getStream() {
      return this.stream;
    }

    public scale_args setStream(String stream) {
      this.stream = stream;
      return this;
    }

    public void unsetStream() {
      this.stream = null;
    }

    /** Returns true if field stream is set (has been assigned a value) and false otherwise */
    public boolean isSetStream() {
      return this.stream != null;
    }

    public void setStreamIsSet(boolean value) {
      if (!value) {
        this.stream = null;
      }
    }

    public int getSealedSegmentsSize() {
      return (this.sealedSegments == null) ? 0 : this.sealedSegments.size();
    }

    public java.util.Iterator<Integer> getSealedSegmentsIterator() {
      return (this.sealedSegments == null) ? null : this.sealedSegments.iterator();
    }

    public void addToSealedSegments(int elem) {
      if (this.sealedSegments == null) {
        this.sealedSegments = new ArrayList<Integer>();
      }
      this.sealedSegments.add(elem);
    }

    public List<Integer> getSealedSegments() {
      return this.sealedSegments;
    }

    public scale_args setSealedSegments(List<Integer> sealedSegments) {
      this.sealedSegments = sealedSegments;
      return this;
    }

    public void unsetSealedSegments() {
      this.sealedSegments = null;
    }

    /** Returns true if field sealedSegments is set (has been assigned a value) and false otherwise */
    public boolean isSetSealedSegments() {
      return this.sealedSegments != null;
    }

    public void setSealedSegmentsIsSet(boolean value) {
      if (!value) {
        this.sealedSegments = null;
      }
    }

    public int getNewKeyRangesSize() {
      return (this.newKeyRanges == null) ? 0 : this.newKeyRanges.size();
    }

    public void putToNewKeyRanges(double key, double val) {
      if (this.newKeyRanges == null) {
        this.newKeyRanges = new HashMap<Double,Double>();
      }
      this.newKeyRanges.put(key, val);
    }

    public Map<Double,Double> getNewKeyRanges() {
      return this.newKeyRanges;
    }

    public scale_args setNewKeyRanges(Map<Double,Double> newKeyRanges) {
      this.newKeyRanges = newKeyRanges;
      return this;
    }

    public void unsetNewKeyRanges() {
      this.newKeyRanges = null;
    }

    /** Returns true if field newKeyRanges is set (has been assigned a value) and false otherwise */
    public boolean isSetNewKeyRanges() {
      return this.newKeyRanges != null;
    }

    public void setNewKeyRangesIsSet(boolean value) {
      if (!value) {
        this.newKeyRanges = null;
      }
    }

    public long getScaleTimestamp() {
      return this.scaleTimestamp;
    }

    public scale_args setScaleTimestamp(long scaleTimestamp) {
      this.scaleTimestamp = scaleTimestamp;
      setScaleTimestampIsSet(true);
      return this;
    }

    public void unsetScaleTimestamp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCALETIMESTAMP_ISSET_ID);
    }

    /** Returns true if field scaleTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetScaleTimestamp() {
      return EncodingUtils.testBit(__isset_bitfield, __SCALETIMESTAMP_ISSET_ID);
    }

    public void setScaleTimestampIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCALETIMESTAMP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCOPE:
        if (value == null) {
          unsetScope();
        } else {
          setScope((String)value);
        }
        break;

      case STREAM:
        if (value == null) {
          unsetStream();
        } else {
          setStream((String)value);
        }
        break;

      case SEALED_SEGMENTS:
        if (value == null) {
          unsetSealedSegments();
        } else {
          setSealedSegments((List<Integer>)value);
        }
        break;

      case NEW_KEY_RANGES:
        if (value == null) {
          unsetNewKeyRanges();
        } else {
          setNewKeyRanges((Map<Double,Double>)value);
        }
        break;

      case SCALE_TIMESTAMP:
        if (value == null) {
          unsetScaleTimestamp();
        } else {
          setScaleTimestamp((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCOPE:
        return getScope();

      case STREAM:
        return getStream();

      case SEALED_SEGMENTS:
        return getSealedSegments();

      case NEW_KEY_RANGES:
        return getNewKeyRanges();

      case SCALE_TIMESTAMP:
        return getScaleTimestamp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCOPE:
        return isSetScope();
      case STREAM:
        return isSetStream();
      case SEALED_SEGMENTS:
        return isSetSealedSegments();
      case NEW_KEY_RANGES:
        return isSetNewKeyRanges();
      case SCALE_TIMESTAMP:
        return isSetScaleTimestamp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scale_args)
        return this.equals((scale_args)that);
      return false;
    }

    public boolean equals(scale_args that) {
      if (that == null)
        return false;

      boolean this_present_scope = true && this.isSetScope();
      boolean that_present_scope = true && that.isSetScope();
      if (this_present_scope || that_present_scope) {
        if (!(this_present_scope && that_present_scope))
          return false;
        if (!this.scope.equals(that.scope))
          return false;
      }

      boolean this_present_stream = true && this.isSetStream();
      boolean that_present_stream = true && that.isSetStream();
      if (this_present_stream || that_present_stream) {
        if (!(this_present_stream && that_present_stream))
          return false;
        if (!this.stream.equals(that.stream))
          return false;
      }

      boolean this_present_sealedSegments = true && this.isSetSealedSegments();
      boolean that_present_sealedSegments = true && that.isSetSealedSegments();
      if (this_present_sealedSegments || that_present_sealedSegments) {
        if (!(this_present_sealedSegments && that_present_sealedSegments))
          return false;
        if (!this.sealedSegments.equals(that.sealedSegments))
          return false;
      }

      boolean this_present_newKeyRanges = true && this.isSetNewKeyRanges();
      boolean that_present_newKeyRanges = true && that.isSetNewKeyRanges();
      if (this_present_newKeyRanges || that_present_newKeyRanges) {
        if (!(this_present_newKeyRanges && that_present_newKeyRanges))
          return false;
        if (!this.newKeyRanges.equals(that.newKeyRanges))
          return false;
      }

      boolean this_present_scaleTimestamp = true;
      boolean that_present_scaleTimestamp = true;
      if (this_present_scaleTimestamp || that_present_scaleTimestamp) {
        if (!(this_present_scaleTimestamp && that_present_scaleTimestamp))
          return false;
        if (this.scaleTimestamp != that.scaleTimestamp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_scope = true && (isSetScope());
      list.add(present_scope);
      if (present_scope)
        list.add(scope);

      boolean present_stream = true && (isSetStream());
      list.add(present_stream);
      if (present_stream)
        list.add(stream);

      boolean present_sealedSegments = true && (isSetSealedSegments());
      list.add(present_sealedSegments);
      if (present_sealedSegments)
        list.add(sealedSegments);

      boolean present_newKeyRanges = true && (isSetNewKeyRanges());
      list.add(present_newKeyRanges);
      if (present_newKeyRanges)
        list.add(newKeyRanges);

      boolean present_scaleTimestamp = true;
      list.add(present_scaleTimestamp);
      if (present_scaleTimestamp)
        list.add(scaleTimestamp);

      return list.hashCode();
    }

    @Override
    public int compareTo(scale_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetScope()).compareTo(other.isSetScope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScope()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scope, other.scope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStream()).compareTo(other.isSetStream());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStream()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stream, other.stream);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSealedSegments()).compareTo(other.isSetSealedSegments());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSealedSegments()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sealedSegments, other.sealedSegments);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewKeyRanges()).compareTo(other.isSetNewKeyRanges());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewKeyRanges()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newKeyRanges, other.newKeyRanges);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetScaleTimestamp()).compareTo(other.isSetScaleTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScaleTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scaleTimestamp, other.scaleTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scale_args(");
      boolean first = true;

      sb.append("scope:");
      if (this.scope == null) {
        sb.append("null");
      } else {
        sb.append(this.scope);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stream:");
      if (this.stream == null) {
        sb.append("null");
      } else {
        sb.append(this.stream);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sealedSegments:");
      if (this.sealedSegments == null) {
        sb.append("null");
      } else {
        sb.append(this.sealedSegments);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newKeyRanges:");
      if (this.newKeyRanges == null) {
        sb.append("null");
      } else {
        sb.append(this.newKeyRanges);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("scaleTimestamp:");
      sb.append(this.scaleTimestamp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class scale_argsStandardSchemeFactory implements SchemeFactory {
      public scale_argsStandardScheme getScheme() {
        return new scale_argsStandardScheme();
      }
    }

    private static class scale_argsStandardScheme extends StandardScheme<scale_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, scale_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCOPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.scope = iprot.readString();
                struct.setScopeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STREAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stream = iprot.readString();
                struct.setStreamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SEALED_SEGMENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
                  struct.sealedSegments = new ArrayList<Integer>(_list60.size);
                  int _elem61;
                  for (int _i62 = 0; _i62 < _list60.size; ++_i62)
                  {
                    _elem61 = iprot.readI32();
                    struct.sealedSegments.add(_elem61);
                  }
                  iprot.readListEnd();
                }
                struct.setSealedSegmentsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NEW_KEY_RANGES
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map63 = iprot.readMapBegin();
                  struct.newKeyRanges = new HashMap<Double,Double>(2*_map63.size);
                  double _key64;
                  double _val65;
                  for (int _i66 = 0; _i66 < _map63.size; ++_i66)
                  {
                    _key64 = iprot.readDouble();
                    _val65 = iprot.readDouble();
                    struct.newKeyRanges.put(_key64, _val65);
                  }
                  iprot.readMapEnd();
                }
                struct.setNewKeyRangesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SCALE_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.scaleTimestamp = iprot.readI64();
                struct.setScaleTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, scale_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.scope != null) {
          oprot.writeFieldBegin(SCOPE_FIELD_DESC);
          oprot.writeString(struct.scope);
          oprot.writeFieldEnd();
        }
        if (struct.stream != null) {
          oprot.writeFieldBegin(STREAM_FIELD_DESC);
          oprot.writeString(struct.stream);
          oprot.writeFieldEnd();
        }
        if (struct.sealedSegments != null) {
          oprot.writeFieldBegin(SEALED_SEGMENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.sealedSegments.size()));
            for (int _iter67 : struct.sealedSegments)
            {
              oprot.writeI32(_iter67);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.newKeyRanges != null) {
          oprot.writeFieldBegin(NEW_KEY_RANGES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.DOUBLE, org.apache.thrift.protocol.TType.DOUBLE, struct.newKeyRanges.size()));
            for (Map.Entry<Double, Double> _iter68 : struct.newKeyRanges.entrySet())
            {
              oprot.writeDouble(_iter68.getKey());
              oprot.writeDouble(_iter68.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SCALE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.scaleTimestamp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class scale_argsTupleSchemeFactory implements SchemeFactory {
      public scale_argsTupleScheme getScheme() {
        return new scale_argsTupleScheme();
      }
    }

    private static class scale_argsTupleScheme extends TupleScheme<scale_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, scale_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetScope()) {
          optionals.set(0);
        }
        if (struct.isSetStream()) {
          optionals.set(1);
        }
        if (struct.isSetSealedSegments()) {
          optionals.set(2);
        }
        if (struct.isSetNewKeyRanges()) {
          optionals.set(3);
        }
        if (struct.isSetScaleTimestamp()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetScope()) {
          oprot.writeString(struct.scope);
        }
        if (struct.isSetStream()) {
          oprot.writeString(struct.stream);
        }
        if (struct.isSetSealedSegments()) {
          {
            oprot.writeI32(struct.sealedSegments.size());
            for (int _iter69 : struct.sealedSegments)
            {
              oprot.writeI32(_iter69);
            }
          }
        }
        if (struct.isSetNewKeyRanges()) {
          {
            oprot.writeI32(struct.newKeyRanges.size());
            for (Map.Entry<Double, Double> _iter70 : struct.newKeyRanges.entrySet())
            {
              oprot.writeDouble(_iter70.getKey());
              oprot.writeDouble(_iter70.getValue());
            }
          }
        }
        if (struct.isSetScaleTimestamp()) {
          oprot.writeI64(struct.scaleTimestamp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, scale_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.scope = iprot.readString();
          struct.setScopeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stream = iprot.readString();
          struct.setStreamIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.sealedSegments = new ArrayList<Integer>(_list71.size);
            int _elem72;
            for (int _i73 = 0; _i73 < _list71.size; ++_i73)
            {
              _elem72 = iprot.readI32();
              struct.sealedSegments.add(_elem72);
            }
          }
          struct.setSealedSegmentsIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map74 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.DOUBLE, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.newKeyRanges = new HashMap<Double,Double>(2*_map74.size);
            double _key75;
            double _val76;
            for (int _i77 = 0; _i77 < _map74.size; ++_i77)
            {
              _key75 = iprot.readDouble();
              _val76 = iprot.readDouble();
              struct.newKeyRanges.put(_key75, _val76);
            }
          }
          struct.setNewKeyRangesIsSet(true);
        }
        if (incoming.get(4)) {
          struct.scaleTimestamp = iprot.readI64();
          struct.setScaleTimestampIsSet(true);
        }
      }
    }

  }

  public static class scale_result implements org.apache.thrift.TBase<scale_result, scale_result._Fields>, java.io.Serializable, Cloneable, Comparable<scale_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scale_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new scale_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new scale_resultTupleSchemeFactory());
    }

    private ScaleResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScaleResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scale_result.class, metaDataMap);
    }

    public scale_result() {
    }

    public scale_result(
      ScaleResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scale_result(scale_result other) {
      if (other.isSetSuccess()) {
        this.success = new ScaleResponse(other.success);
      }
    }

    public scale_result deepCopy() {
      return new scale_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ScaleResponse getSuccess() {
      return this.success;
    }

    public scale_result setSuccess(ScaleResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ScaleResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scale_result)
        return this.equals((scale_result)that);
      return false;
    }

    public boolean equals(scale_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(scale_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scale_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class scale_resultStandardSchemeFactory implements SchemeFactory {
      public scale_resultStandardScheme getScheme() {
        return new scale_resultStandardScheme();
      }
    }

    private static class scale_resultStandardScheme extends StandardScheme<scale_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, scale_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ScaleResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, scale_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class scale_resultTupleSchemeFactory implements SchemeFactory {
      public scale_resultTupleScheme getScheme() {
        return new scale_resultTupleScheme();
      }
    }

    private static class scale_resultTupleScheme extends TupleScheme<scale_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, scale_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, scale_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ScaleResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getURI_args implements org.apache.thrift.TBase<getURI_args, getURI_args._Fields>, java.io.Serializable, Cloneable, Comparable<getURI_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getURI_args");

    private static final org.apache.thrift.protocol.TField SEGMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("segment", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getURI_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getURI_argsTupleSchemeFactory());
    }

    private SegmentId segment; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEGMENT((short)1, "segment");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEGMENT
            return SEGMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEGMENT, new org.apache.thrift.meta_data.FieldMetaData("segment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SegmentId.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getURI_args.class, metaDataMap);
    }

    public getURI_args() {
    }

    public getURI_args(
      SegmentId segment)
    {
      this();
      this.segment = segment;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getURI_args(getURI_args other) {
      if (other.isSetSegment()) {
        this.segment = new SegmentId(other.segment);
      }
    }

    public getURI_args deepCopy() {
      return new getURI_args(this);
    }

    @Override
    public void clear() {
      this.segment = null;
    }

    public SegmentId getSegment() {
      return this.segment;
    }

    public getURI_args setSegment(SegmentId segment) {
      this.segment = segment;
      return this;
    }

    public void unsetSegment() {
      this.segment = null;
    }

    /** Returns true if field segment is set (has been assigned a value) and false otherwise */
    public boolean isSetSegment() {
      return this.segment != null;
    }

    public void setSegmentIsSet(boolean value) {
      if (!value) {
        this.segment = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SEGMENT:
        if (value == null) {
          unsetSegment();
        } else {
          setSegment((SegmentId)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEGMENT:
        return getSegment();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEGMENT:
        return isSetSegment();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getURI_args)
        return this.equals((getURI_args)that);
      return false;
    }

    public boolean equals(getURI_args that) {
      if (that == null)
        return false;

      boolean this_present_segment = true && this.isSetSegment();
      boolean that_present_segment = true && that.isSetSegment();
      if (this_present_segment || that_present_segment) {
        if (!(this_present_segment && that_present_segment))
          return false;
        if (!this.segment.equals(that.segment))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_segment = true && (isSetSegment());
      list.add(present_segment);
      if (present_segment)
        list.add(segment);

      return list.hashCode();
    }

    @Override
    public int compareTo(getURI_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSegment()).compareTo(other.isSetSegment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSegment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.segment, other.segment);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getURI_args(");
      boolean first = true;

      sb.append("segment:");
      if (this.segment == null) {
        sb.append("null");
      } else {
        sb.append(this.segment);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (segment != null) {
        segment.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getURI_argsStandardSchemeFactory implements SchemeFactory {
      public getURI_argsStandardScheme getScheme() {
        return new getURI_argsStandardScheme();
      }
    }

    private static class getURI_argsStandardScheme extends StandardScheme<getURI_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getURI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEGMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.segment = new SegmentId();
                struct.segment.read(iprot);
                struct.setSegmentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getURI_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.segment != null) {
          oprot.writeFieldBegin(SEGMENT_FIELD_DESC);
          struct.segment.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getURI_argsTupleSchemeFactory implements SchemeFactory {
      public getURI_argsTupleScheme getScheme() {
        return new getURI_argsTupleScheme();
      }
    }

    private static class getURI_argsTupleScheme extends TupleScheme<getURI_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getURI_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSegment()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSegment()) {
          struct.segment.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getURI_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.segment = new SegmentId();
          struct.segment.read(iprot);
          struct.setSegmentIsSet(true);
        }
      }
    }

  }

  public static class getURI_result implements org.apache.thrift.TBase<getURI_result, getURI_result._Fields>, java.io.Serializable, Cloneable, Comparable<getURI_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getURI_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getURI_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getURI_resultTupleSchemeFactory());
    }

    private NodeUri success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeUri.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getURI_result.class, metaDataMap);
    }

    public getURI_result() {
    }

    public getURI_result(
      NodeUri success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getURI_result(getURI_result other) {
      if (other.isSetSuccess()) {
        this.success = new NodeUri(other.success);
      }
    }

    public getURI_result deepCopy() {
      return new getURI_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public NodeUri getSuccess() {
      return this.success;
    }

    public getURI_result setSuccess(NodeUri success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((NodeUri)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getURI_result)
        return this.equals((getURI_result)that);
      return false;
    }

    public boolean equals(getURI_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getURI_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getURI_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getURI_resultStandardSchemeFactory implements SchemeFactory {
      public getURI_resultStandardScheme getScheme() {
        return new getURI_resultStandardScheme();
      }
    }

    private static class getURI_resultStandardScheme extends StandardScheme<getURI_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getURI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new NodeUri();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getURI_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getURI_resultTupleSchemeFactory implements SchemeFactory {
      public getURI_resultTupleScheme getScheme() {
        return new getURI_resultTupleScheme();
      }
    }

    private static class getURI_resultTupleScheme extends TupleScheme<getURI_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getURI_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getURI_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new NodeUri();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class isSegmentValid_args implements org.apache.thrift.TBase<isSegmentValid_args, isSegmentValid_args._Fields>, java.io.Serializable, Cloneable, Comparable<isSegmentValid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isSegmentValid_args");

    private static final org.apache.thrift.protocol.TField SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scope", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STREAM_FIELD_DESC = new org.apache.thrift.protocol.TField("stream", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SEGMENT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("segmentNumber", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isSegmentValid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isSegmentValid_argsTupleSchemeFactory());
    }

    private String scope; // required
    private String stream; // required
    private int segmentNumber; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCOPE((short)1, "scope"),
      STREAM((short)2, "stream"),
      SEGMENT_NUMBER((short)3, "segmentNumber");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCOPE
            return SCOPE;
          case 2: // STREAM
            return STREAM;
          case 3: // SEGMENT_NUMBER
            return SEGMENT_NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SEGMENTNUMBER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCOPE, new org.apache.thrift.meta_data.FieldMetaData("scope", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STREAM, new org.apache.thrift.meta_data.FieldMetaData("stream", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SEGMENT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("segmentNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isSegmentValid_args.class, metaDataMap);
    }

    public isSegmentValid_args() {
    }

    public isSegmentValid_args(
      String scope,
      String stream,
      int segmentNumber)
    {
      this();
      this.scope = scope;
      this.stream = stream;
      this.segmentNumber = segmentNumber;
      setSegmentNumberIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isSegmentValid_args(isSegmentValid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetScope()) {
        this.scope = other.scope;
      }
      if (other.isSetStream()) {
        this.stream = other.stream;
      }
      this.segmentNumber = other.segmentNumber;
    }

    public isSegmentValid_args deepCopy() {
      return new isSegmentValid_args(this);
    }

    @Override
    public void clear() {
      this.scope = null;
      this.stream = null;
      setSegmentNumberIsSet(false);
      this.segmentNumber = 0;
    }

    public String getScope() {
      return this.scope;
    }

    public isSegmentValid_args setScope(String scope) {
      this.scope = scope;
      return this;
    }

    public void unsetScope() {
      this.scope = null;
    }

    /** Returns true if field scope is set (has been assigned a value) and false otherwise */
    public boolean isSetScope() {
      return this.scope != null;
    }

    public void setScopeIsSet(boolean value) {
      if (!value) {
        this.scope = null;
      }
    }

    public String getStream() {
      return this.stream;
    }

    public isSegmentValid_args setStream(String stream) {
      this.stream = stream;
      return this;
    }

    public void unsetStream() {
      this.stream = null;
    }

    /** Returns true if field stream is set (has been assigned a value) and false otherwise */
    public boolean isSetStream() {
      return this.stream != null;
    }

    public void setStreamIsSet(boolean value) {
      if (!value) {
        this.stream = null;
      }
    }

    public int getSegmentNumber() {
      return this.segmentNumber;
    }

    public isSegmentValid_args setSegmentNumber(int segmentNumber) {
      this.segmentNumber = segmentNumber;
      setSegmentNumberIsSet(true);
      return this;
    }

    public void unsetSegmentNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEGMENTNUMBER_ISSET_ID);
    }

    /** Returns true if field segmentNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetSegmentNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __SEGMENTNUMBER_ISSET_ID);
    }

    public void setSegmentNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEGMENTNUMBER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCOPE:
        if (value == null) {
          unsetScope();
        } else {
          setScope((String)value);
        }
        break;

      case STREAM:
        if (value == null) {
          unsetStream();
        } else {
          setStream((String)value);
        }
        break;

      case SEGMENT_NUMBER:
        if (value == null) {
          unsetSegmentNumber();
        } else {
          setSegmentNumber((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCOPE:
        return getScope();

      case STREAM:
        return getStream();

      case SEGMENT_NUMBER:
        return getSegmentNumber();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCOPE:
        return isSetScope();
      case STREAM:
        return isSetStream();
      case SEGMENT_NUMBER:
        return isSetSegmentNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isSegmentValid_args)
        return this.equals((isSegmentValid_args)that);
      return false;
    }

    public boolean equals(isSegmentValid_args that) {
      if (that == null)
        return false;

      boolean this_present_scope = true && this.isSetScope();
      boolean that_present_scope = true && that.isSetScope();
      if (this_present_scope || that_present_scope) {
        if (!(this_present_scope && that_present_scope))
          return false;
        if (!this.scope.equals(that.scope))
          return false;
      }

      boolean this_present_stream = true && this.isSetStream();
      boolean that_present_stream = true && that.isSetStream();
      if (this_present_stream || that_present_stream) {
        if (!(this_present_stream && that_present_stream))
          return false;
        if (!this.stream.equals(that.stream))
          return false;
      }

      boolean this_present_segmentNumber = true;
      boolean that_present_segmentNumber = true;
      if (this_present_segmentNumber || that_present_segmentNumber) {
        if (!(this_present_segmentNumber && that_present_segmentNumber))
          return false;
        if (this.segmentNumber != that.segmentNumber)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_scope = true && (isSetScope());
      list.add(present_scope);
      if (present_scope)
        list.add(scope);

      boolean present_stream = true && (isSetStream());
      list.add(present_stream);
      if (present_stream)
        list.add(stream);

      boolean present_segmentNumber = true;
      list.add(present_segmentNumber);
      if (present_segmentNumber)
        list.add(segmentNumber);

      return list.hashCode();
    }

    @Override
    public int compareTo(isSegmentValid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetScope()).compareTo(other.isSetScope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScope()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scope, other.scope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStream()).compareTo(other.isSetStream());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStream()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stream, other.stream);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSegmentNumber()).compareTo(other.isSetSegmentNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSegmentNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.segmentNumber, other.segmentNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isSegmentValid_args(");
      boolean first = true;

      sb.append("scope:");
      if (this.scope == null) {
        sb.append("null");
      } else {
        sb.append(this.scope);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stream:");
      if (this.stream == null) {
        sb.append("null");
      } else {
        sb.append(this.stream);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("segmentNumber:");
      sb.append(this.segmentNumber);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isSegmentValid_argsStandardSchemeFactory implements SchemeFactory {
      public isSegmentValid_argsStandardScheme getScheme() {
        return new isSegmentValid_argsStandardScheme();
      }
    }

    private static class isSegmentValid_argsStandardScheme extends StandardScheme<isSegmentValid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isSegmentValid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCOPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.scope = iprot.readString();
                struct.setScopeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STREAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stream = iprot.readString();
                struct.setStreamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SEGMENT_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.segmentNumber = iprot.readI32();
                struct.setSegmentNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isSegmentValid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.scope != null) {
          oprot.writeFieldBegin(SCOPE_FIELD_DESC);
          oprot.writeString(struct.scope);
          oprot.writeFieldEnd();
        }
        if (struct.stream != null) {
          oprot.writeFieldBegin(STREAM_FIELD_DESC);
          oprot.writeString(struct.stream);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SEGMENT_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.segmentNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isSegmentValid_argsTupleSchemeFactory implements SchemeFactory {
      public isSegmentValid_argsTupleScheme getScheme() {
        return new isSegmentValid_argsTupleScheme();
      }
    }

    private static class isSegmentValid_argsTupleScheme extends TupleScheme<isSegmentValid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isSegmentValid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetScope()) {
          optionals.set(0);
        }
        if (struct.isSetStream()) {
          optionals.set(1);
        }
        if (struct.isSetSegmentNumber()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetScope()) {
          oprot.writeString(struct.scope);
        }
        if (struct.isSetStream()) {
          oprot.writeString(struct.stream);
        }
        if (struct.isSetSegmentNumber()) {
          oprot.writeI32(struct.segmentNumber);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isSegmentValid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.scope = iprot.readString();
          struct.setScopeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stream = iprot.readString();
          struct.setStreamIsSet(true);
        }
        if (incoming.get(2)) {
          struct.segmentNumber = iprot.readI32();
          struct.setSegmentNumberIsSet(true);
        }
      }
    }

  }

  public static class isSegmentValid_result implements org.apache.thrift.TBase<isSegmentValid_result, isSegmentValid_result._Fields>, java.io.Serializable, Cloneable, Comparable<isSegmentValid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isSegmentValid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isSegmentValid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isSegmentValid_resultTupleSchemeFactory());
    }

    private boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isSegmentValid_result.class, metaDataMap);
    }

    public isSegmentValid_result() {
    }

    public isSegmentValid_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isSegmentValid_result(isSegmentValid_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public isSegmentValid_result deepCopy() {
      return new isSegmentValid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isSegmentValid_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isSegmentValid_result)
        return this.equals((isSegmentValid_result)that);
      return false;
    }

    public boolean equals(isSegmentValid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(isSegmentValid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isSegmentValid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isSegmentValid_resultStandardSchemeFactory implements SchemeFactory {
      public isSegmentValid_resultStandardScheme getScheme() {
        return new isSegmentValid_resultStandardScheme();
      }
    }

    private static class isSegmentValid_resultStandardScheme extends StandardScheme<isSegmentValid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isSegmentValid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isSegmentValid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isSegmentValid_resultTupleSchemeFactory implements SchemeFactory {
      public isSegmentValid_resultTupleScheme getScheme() {
        return new isSegmentValid_resultTupleScheme();
      }
    }

    private static class isSegmentValid_resultTupleScheme extends TupleScheme<isSegmentValid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isSegmentValid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isSegmentValid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createTransaction_args implements org.apache.thrift.TBase<createTransaction_args, createTransaction_args._Fields>, java.io.Serializable, Cloneable, Comparable<createTransaction_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createTransaction_args");

    private static final org.apache.thrift.protocol.TField SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scope", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STREAM_FIELD_DESC = new org.apache.thrift.protocol.TField("stream", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createTransaction_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createTransaction_argsTupleSchemeFactory());
    }

    private String scope; // required
    private String stream; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCOPE((short)1, "scope"),
      STREAM((short)2, "stream");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCOPE
            return SCOPE;
          case 2: // STREAM
            return STREAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCOPE, new org.apache.thrift.meta_data.FieldMetaData("scope", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STREAM, new org.apache.thrift.meta_data.FieldMetaData("stream", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createTransaction_args.class, metaDataMap);
    }

    public createTransaction_args() {
    }

    public createTransaction_args(
      String scope,
      String stream)
    {
      this();
      this.scope = scope;
      this.stream = stream;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createTransaction_args(createTransaction_args other) {
      if (other.isSetScope()) {
        this.scope = other.scope;
      }
      if (other.isSetStream()) {
        this.stream = other.stream;
      }
    }

    public createTransaction_args deepCopy() {
      return new createTransaction_args(this);
    }

    @Override
    public void clear() {
      this.scope = null;
      this.stream = null;
    }

    public String getScope() {
      return this.scope;
    }

    public createTransaction_args setScope(String scope) {
      this.scope = scope;
      return this;
    }

    public void unsetScope() {
      this.scope = null;
    }

    /** Returns true if field scope is set (has been assigned a value) and false otherwise */
    public boolean isSetScope() {
      return this.scope != null;
    }

    public void setScopeIsSet(boolean value) {
      if (!value) {
        this.scope = null;
      }
    }

    public String getStream() {
      return this.stream;
    }

    public createTransaction_args setStream(String stream) {
      this.stream = stream;
      return this;
    }

    public void unsetStream() {
      this.stream = null;
    }

    /** Returns true if field stream is set (has been assigned a value) and false otherwise */
    public boolean isSetStream() {
      return this.stream != null;
    }

    public void setStreamIsSet(boolean value) {
      if (!value) {
        this.stream = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCOPE:
        if (value == null) {
          unsetScope();
        } else {
          setScope((String)value);
        }
        break;

      case STREAM:
        if (value == null) {
          unsetStream();
        } else {
          setStream((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCOPE:
        return getScope();

      case STREAM:
        return getStream();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCOPE:
        return isSetScope();
      case STREAM:
        return isSetStream();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createTransaction_args)
        return this.equals((createTransaction_args)that);
      return false;
    }

    public boolean equals(createTransaction_args that) {
      if (that == null)
        return false;

      boolean this_present_scope = true && this.isSetScope();
      boolean that_present_scope = true && that.isSetScope();
      if (this_present_scope || that_present_scope) {
        if (!(this_present_scope && that_present_scope))
          return false;
        if (!this.scope.equals(that.scope))
          return false;
      }

      boolean this_present_stream = true && this.isSetStream();
      boolean that_present_stream = true && that.isSetStream();
      if (this_present_stream || that_present_stream) {
        if (!(this_present_stream && that_present_stream))
          return false;
        if (!this.stream.equals(that.stream))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_scope = true && (isSetScope());
      list.add(present_scope);
      if (present_scope)
        list.add(scope);

      boolean present_stream = true && (isSetStream());
      list.add(present_stream);
      if (present_stream)
        list.add(stream);

      return list.hashCode();
    }

    @Override
    public int compareTo(createTransaction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetScope()).compareTo(other.isSetScope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScope()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scope, other.scope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStream()).compareTo(other.isSetStream());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStream()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stream, other.stream);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createTransaction_args(");
      boolean first = true;

      sb.append("scope:");
      if (this.scope == null) {
        sb.append("null");
      } else {
        sb.append(this.scope);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stream:");
      if (this.stream == null) {
        sb.append("null");
      } else {
        sb.append(this.stream);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createTransaction_argsStandardSchemeFactory implements SchemeFactory {
      public createTransaction_argsStandardScheme getScheme() {
        return new createTransaction_argsStandardScheme();
      }
    }

    private static class createTransaction_argsStandardScheme extends StandardScheme<createTransaction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createTransaction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCOPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.scope = iprot.readString();
                struct.setScopeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STREAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stream = iprot.readString();
                struct.setStreamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createTransaction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.scope != null) {
          oprot.writeFieldBegin(SCOPE_FIELD_DESC);
          oprot.writeString(struct.scope);
          oprot.writeFieldEnd();
        }
        if (struct.stream != null) {
          oprot.writeFieldBegin(STREAM_FIELD_DESC);
          oprot.writeString(struct.stream);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createTransaction_argsTupleSchemeFactory implements SchemeFactory {
      public createTransaction_argsTupleScheme getScheme() {
        return new createTransaction_argsTupleScheme();
      }
    }

    private static class createTransaction_argsTupleScheme extends TupleScheme<createTransaction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createTransaction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetScope()) {
          optionals.set(0);
        }
        if (struct.isSetStream()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetScope()) {
          oprot.writeString(struct.scope);
        }
        if (struct.isSetStream()) {
          oprot.writeString(struct.stream);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createTransaction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.scope = iprot.readString();
          struct.setScopeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stream = iprot.readString();
          struct.setStreamIsSet(true);
        }
      }
    }

  }

  public static class createTransaction_result implements org.apache.thrift.TBase<createTransaction_result, createTransaction_result._Fields>, java.io.Serializable, Cloneable, Comparable<createTransaction_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createTransaction_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createTransaction_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createTransaction_resultTupleSchemeFactory());
    }

    private TxId success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TxId.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createTransaction_result.class, metaDataMap);
    }

    public createTransaction_result() {
    }

    public createTransaction_result(
      TxId success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createTransaction_result(createTransaction_result other) {
      if (other.isSetSuccess()) {
        this.success = new TxId(other.success);
      }
    }

    public createTransaction_result deepCopy() {
      return new createTransaction_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TxId getSuccess() {
      return this.success;
    }

    public createTransaction_result setSuccess(TxId success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TxId)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createTransaction_result)
        return this.equals((createTransaction_result)that);
      return false;
    }

    public boolean equals(createTransaction_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(createTransaction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createTransaction_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createTransaction_resultStandardSchemeFactory implements SchemeFactory {
      public createTransaction_resultStandardScheme getScheme() {
        return new createTransaction_resultStandardScheme();
      }
    }

    private static class createTransaction_resultStandardScheme extends StandardScheme<createTransaction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createTransaction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TxId();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createTransaction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createTransaction_resultTupleSchemeFactory implements SchemeFactory {
      public createTransaction_resultTupleScheme getScheme() {
        return new createTransaction_resultTupleScheme();
      }
    }

    private static class createTransaction_resultTupleScheme extends TupleScheme<createTransaction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createTransaction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createTransaction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TxId();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class commitTransaction_args implements org.apache.thrift.TBase<commitTransaction_args, commitTransaction_args._Fields>, java.io.Serializable, Cloneable, Comparable<commitTransaction_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("commitTransaction_args");

    private static final org.apache.thrift.protocol.TField SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scope", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STREAM_FIELD_DESC = new org.apache.thrift.protocol.TField("stream", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TXID_FIELD_DESC = new org.apache.thrift.protocol.TField("txid", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new commitTransaction_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new commitTransaction_argsTupleSchemeFactory());
    }

    private String scope; // required
    private String stream; // required
    private TxId txid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCOPE((short)1, "scope"),
      STREAM((short)2, "stream"),
      TXID((short)3, "txid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCOPE
            return SCOPE;
          case 2: // STREAM
            return STREAM;
          case 3: // TXID
            return TXID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCOPE, new org.apache.thrift.meta_data.FieldMetaData("scope", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STREAM, new org.apache.thrift.meta_data.FieldMetaData("stream", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TXID, new org.apache.thrift.meta_data.FieldMetaData("txid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TxId.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(commitTransaction_args.class, metaDataMap);
    }

    public commitTransaction_args() {
    }

    public commitTransaction_args(
      String scope,
      String stream,
      TxId txid)
    {
      this();
      this.scope = scope;
      this.stream = stream;
      this.txid = txid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commitTransaction_args(commitTransaction_args other) {
      if (other.isSetScope()) {
        this.scope = other.scope;
      }
      if (other.isSetStream()) {
        this.stream = other.stream;
      }
      if (other.isSetTxid()) {
        this.txid = new TxId(other.txid);
      }
    }

    public commitTransaction_args deepCopy() {
      return new commitTransaction_args(this);
    }

    @Override
    public void clear() {
      this.scope = null;
      this.stream = null;
      this.txid = null;
    }

    public String getScope() {
      return this.scope;
    }

    public commitTransaction_args setScope(String scope) {
      this.scope = scope;
      return this;
    }

    public void unsetScope() {
      this.scope = null;
    }

    /** Returns true if field scope is set (has been assigned a value) and false otherwise */
    public boolean isSetScope() {
      return this.scope != null;
    }

    public void setScopeIsSet(boolean value) {
      if (!value) {
        this.scope = null;
      }
    }

    public String getStream() {
      return this.stream;
    }

    public commitTransaction_args setStream(String stream) {
      this.stream = stream;
      return this;
    }

    public void unsetStream() {
      this.stream = null;
    }

    /** Returns true if field stream is set (has been assigned a value) and false otherwise */
    public boolean isSetStream() {
      return this.stream != null;
    }

    public void setStreamIsSet(boolean value) {
      if (!value) {
        this.stream = null;
      }
    }

    public TxId getTxid() {
      return this.txid;
    }

    public commitTransaction_args setTxid(TxId txid) {
      this.txid = txid;
      return this;
    }

    public void unsetTxid() {
      this.txid = null;
    }

    /** Returns true if field txid is set (has been assigned a value) and false otherwise */
    public boolean isSetTxid() {
      return this.txid != null;
    }

    public void setTxidIsSet(boolean value) {
      if (!value) {
        this.txid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCOPE:
        if (value == null) {
          unsetScope();
        } else {
          setScope((String)value);
        }
        break;

      case STREAM:
        if (value == null) {
          unsetStream();
        } else {
          setStream((String)value);
        }
        break;

      case TXID:
        if (value == null) {
          unsetTxid();
        } else {
          setTxid((TxId)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCOPE:
        return getScope();

      case STREAM:
        return getStream();

      case TXID:
        return getTxid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCOPE:
        return isSetScope();
      case STREAM:
        return isSetStream();
      case TXID:
        return isSetTxid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commitTransaction_args)
        return this.equals((commitTransaction_args)that);
      return false;
    }

    public boolean equals(commitTransaction_args that) {
      if (that == null)
        return false;

      boolean this_present_scope = true && this.isSetScope();
      boolean that_present_scope = true && that.isSetScope();
      if (this_present_scope || that_present_scope) {
        if (!(this_present_scope && that_present_scope))
          return false;
        if (!this.scope.equals(that.scope))
          return false;
      }

      boolean this_present_stream = true && this.isSetStream();
      boolean that_present_stream = true && that.isSetStream();
      if (this_present_stream || that_present_stream) {
        if (!(this_present_stream && that_present_stream))
          return false;
        if (!this.stream.equals(that.stream))
          return false;
      }

      boolean this_present_txid = true && this.isSetTxid();
      boolean that_present_txid = true && that.isSetTxid();
      if (this_present_txid || that_present_txid) {
        if (!(this_present_txid && that_present_txid))
          return false;
        if (!this.txid.equals(that.txid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_scope = true && (isSetScope());
      list.add(present_scope);
      if (present_scope)
        list.add(scope);

      boolean present_stream = true && (isSetStream());
      list.add(present_stream);
      if (present_stream)
        list.add(stream);

      boolean present_txid = true && (isSetTxid());
      list.add(present_txid);
      if (present_txid)
        list.add(txid);

      return list.hashCode();
    }

    @Override
    public int compareTo(commitTransaction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetScope()).compareTo(other.isSetScope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScope()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scope, other.scope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStream()).compareTo(other.isSetStream());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStream()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stream, other.stream);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxid()).compareTo(other.isSetTxid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txid, other.txid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("commitTransaction_args(");
      boolean first = true;

      sb.append("scope:");
      if (this.scope == null) {
        sb.append("null");
      } else {
        sb.append(this.scope);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stream:");
      if (this.stream == null) {
        sb.append("null");
      } else {
        sb.append(this.stream);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("txid:");
      if (this.txid == null) {
        sb.append("null");
      } else {
        sb.append(this.txid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (txid != null) {
        txid.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class commitTransaction_argsStandardSchemeFactory implements SchemeFactory {
      public commitTransaction_argsStandardScheme getScheme() {
        return new commitTransaction_argsStandardScheme();
      }
    }

    private static class commitTransaction_argsStandardScheme extends StandardScheme<commitTransaction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, commitTransaction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCOPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.scope = iprot.readString();
                struct.setScopeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STREAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stream = iprot.readString();
                struct.setStreamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TXID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.txid = new TxId();
                struct.txid.read(iprot);
                struct.setTxidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, commitTransaction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.scope != null) {
          oprot.writeFieldBegin(SCOPE_FIELD_DESC);
          oprot.writeString(struct.scope);
          oprot.writeFieldEnd();
        }
        if (struct.stream != null) {
          oprot.writeFieldBegin(STREAM_FIELD_DESC);
          oprot.writeString(struct.stream);
          oprot.writeFieldEnd();
        }
        if (struct.txid != null) {
          oprot.writeFieldBegin(TXID_FIELD_DESC);
          struct.txid.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class commitTransaction_argsTupleSchemeFactory implements SchemeFactory {
      public commitTransaction_argsTupleScheme getScheme() {
        return new commitTransaction_argsTupleScheme();
      }
    }

    private static class commitTransaction_argsTupleScheme extends TupleScheme<commitTransaction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, commitTransaction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetScope()) {
          optionals.set(0);
        }
        if (struct.isSetStream()) {
          optionals.set(1);
        }
        if (struct.isSetTxid()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetScope()) {
          oprot.writeString(struct.scope);
        }
        if (struct.isSetStream()) {
          oprot.writeString(struct.stream);
        }
        if (struct.isSetTxid()) {
          struct.txid.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, commitTransaction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.scope = iprot.readString();
          struct.setScopeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stream = iprot.readString();
          struct.setStreamIsSet(true);
        }
        if (incoming.get(2)) {
          struct.txid = new TxId();
          struct.txid.read(iprot);
          struct.setTxidIsSet(true);
        }
      }
    }

  }

  public static class commitTransaction_result implements org.apache.thrift.TBase<commitTransaction_result, commitTransaction_result._Fields>, java.io.Serializable, Cloneable, Comparable<commitTransaction_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("commitTransaction_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new commitTransaction_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new commitTransaction_resultTupleSchemeFactory());
    }

    private TransactionStatus success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see TransactionStatus
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TransactionStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(commitTransaction_result.class, metaDataMap);
    }

    public commitTransaction_result() {
    }

    public commitTransaction_result(
      TransactionStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commitTransaction_result(commitTransaction_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public commitTransaction_result deepCopy() {
      return new commitTransaction_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see TransactionStatus
     */
    public TransactionStatus getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see TransactionStatus
     */
    public commitTransaction_result setSuccess(TransactionStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TransactionStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commitTransaction_result)
        return this.equals((commitTransaction_result)that);
      return false;
    }

    public boolean equals(commitTransaction_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(commitTransaction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("commitTransaction_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class commitTransaction_resultStandardSchemeFactory implements SchemeFactory {
      public commitTransaction_resultStandardScheme getScheme() {
        return new commitTransaction_resultStandardScheme();
      }
    }

    private static class commitTransaction_resultStandardScheme extends StandardScheme<commitTransaction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, commitTransaction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.emc.pravega.controller.stream.api.v1.TransactionStatus.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, commitTransaction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class commitTransaction_resultTupleSchemeFactory implements SchemeFactory {
      public commitTransaction_resultTupleScheme getScheme() {
        return new commitTransaction_resultTupleScheme();
      }
    }

    private static class commitTransaction_resultTupleScheme extends TupleScheme<commitTransaction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, commitTransaction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, commitTransaction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = com.emc.pravega.controller.stream.api.v1.TransactionStatus.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class dropTransaction_args implements org.apache.thrift.TBase<dropTransaction_args, dropTransaction_args._Fields>, java.io.Serializable, Cloneable, Comparable<dropTransaction_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dropTransaction_args");

    private static final org.apache.thrift.protocol.TField SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scope", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STREAM_FIELD_DESC = new org.apache.thrift.protocol.TField("stream", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TXID_FIELD_DESC = new org.apache.thrift.protocol.TField("txid", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dropTransaction_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dropTransaction_argsTupleSchemeFactory());
    }

    private String scope; // required
    private String stream; // required
    private TxId txid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCOPE((short)1, "scope"),
      STREAM((short)2, "stream"),
      TXID((short)3, "txid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCOPE
            return SCOPE;
          case 2: // STREAM
            return STREAM;
          case 3: // TXID
            return TXID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCOPE, new org.apache.thrift.meta_data.FieldMetaData("scope", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STREAM, new org.apache.thrift.meta_data.FieldMetaData("stream", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TXID, new org.apache.thrift.meta_data.FieldMetaData("txid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TxId.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dropTransaction_args.class, metaDataMap);
    }

    public dropTransaction_args() {
    }

    public dropTransaction_args(
      String scope,
      String stream,
      TxId txid)
    {
      this();
      this.scope = scope;
      this.stream = stream;
      this.txid = txid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dropTransaction_args(dropTransaction_args other) {
      if (other.isSetScope()) {
        this.scope = other.scope;
      }
      if (other.isSetStream()) {
        this.stream = other.stream;
      }
      if (other.isSetTxid()) {
        this.txid = new TxId(other.txid);
      }
    }

    public dropTransaction_args deepCopy() {
      return new dropTransaction_args(this);
    }

    @Override
    public void clear() {
      this.scope = null;
      this.stream = null;
      this.txid = null;
    }

    public String getScope() {
      return this.scope;
    }

    public dropTransaction_args setScope(String scope) {
      this.scope = scope;
      return this;
    }

    public void unsetScope() {
      this.scope = null;
    }

    /** Returns true if field scope is set (has been assigned a value) and false otherwise */
    public boolean isSetScope() {
      return this.scope != null;
    }

    public void setScopeIsSet(boolean value) {
      if (!value) {
        this.scope = null;
      }
    }

    public String getStream() {
      return this.stream;
    }

    public dropTransaction_args setStream(String stream) {
      this.stream = stream;
      return this;
    }

    public void unsetStream() {
      this.stream = null;
    }

    /** Returns true if field stream is set (has been assigned a value) and false otherwise */
    public boolean isSetStream() {
      return this.stream != null;
    }

    public void setStreamIsSet(boolean value) {
      if (!value) {
        this.stream = null;
      }
    }

    public TxId getTxid() {
      return this.txid;
    }

    public dropTransaction_args setTxid(TxId txid) {
      this.txid = txid;
      return this;
    }

    public void unsetTxid() {
      this.txid = null;
    }

    /** Returns true if field txid is set (has been assigned a value) and false otherwise */
    public boolean isSetTxid() {
      return this.txid != null;
    }

    public void setTxidIsSet(boolean value) {
      if (!value) {
        this.txid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCOPE:
        if (value == null) {
          unsetScope();
        } else {
          setScope((String)value);
        }
        break;

      case STREAM:
        if (value == null) {
          unsetStream();
        } else {
          setStream((String)value);
        }
        break;

      case TXID:
        if (value == null) {
          unsetTxid();
        } else {
          setTxid((TxId)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCOPE:
        return getScope();

      case STREAM:
        return getStream();

      case TXID:
        return getTxid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCOPE:
        return isSetScope();
      case STREAM:
        return isSetStream();
      case TXID:
        return isSetTxid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dropTransaction_args)
        return this.equals((dropTransaction_args)that);
      return false;
    }

    public boolean equals(dropTransaction_args that) {
      if (that == null)
        return false;

      boolean this_present_scope = true && this.isSetScope();
      boolean that_present_scope = true && that.isSetScope();
      if (this_present_scope || that_present_scope) {
        if (!(this_present_scope && that_present_scope))
          return false;
        if (!this.scope.equals(that.scope))
          return false;
      }

      boolean this_present_stream = true && this.isSetStream();
      boolean that_present_stream = true && that.isSetStream();
      if (this_present_stream || that_present_stream) {
        if (!(this_present_stream && that_present_stream))
          return false;
        if (!this.stream.equals(that.stream))
          return false;
      }

      boolean this_present_txid = true && this.isSetTxid();
      boolean that_present_txid = true && that.isSetTxid();
      if (this_present_txid || that_present_txid) {
        if (!(this_present_txid && that_present_txid))
          return false;
        if (!this.txid.equals(that.txid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_scope = true && (isSetScope());
      list.add(present_scope);
      if (present_scope)
        list.add(scope);

      boolean present_stream = true && (isSetStream());
      list.add(present_stream);
      if (present_stream)
        list.add(stream);

      boolean present_txid = true && (isSetTxid());
      list.add(present_txid);
      if (present_txid)
        list.add(txid);

      return list.hashCode();
    }

    @Override
    public int compareTo(dropTransaction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetScope()).compareTo(other.isSetScope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScope()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scope, other.scope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStream()).compareTo(other.isSetStream());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStream()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stream, other.stream);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxid()).compareTo(other.isSetTxid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txid, other.txid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dropTransaction_args(");
      boolean first = true;

      sb.append("scope:");
      if (this.scope == null) {
        sb.append("null");
      } else {
        sb.append(this.scope);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stream:");
      if (this.stream == null) {
        sb.append("null");
      } else {
        sb.append(this.stream);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("txid:");
      if (this.txid == null) {
        sb.append("null");
      } else {
        sb.append(this.txid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (txid != null) {
        txid.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dropTransaction_argsStandardSchemeFactory implements SchemeFactory {
      public dropTransaction_argsStandardScheme getScheme() {
        return new dropTransaction_argsStandardScheme();
      }
    }

    private static class dropTransaction_argsStandardScheme extends StandardScheme<dropTransaction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dropTransaction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCOPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.scope = iprot.readString();
                struct.setScopeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STREAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stream = iprot.readString();
                struct.setStreamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TXID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.txid = new TxId();
                struct.txid.read(iprot);
                struct.setTxidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dropTransaction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.scope != null) {
          oprot.writeFieldBegin(SCOPE_FIELD_DESC);
          oprot.writeString(struct.scope);
          oprot.writeFieldEnd();
        }
        if (struct.stream != null) {
          oprot.writeFieldBegin(STREAM_FIELD_DESC);
          oprot.writeString(struct.stream);
          oprot.writeFieldEnd();
        }
        if (struct.txid != null) {
          oprot.writeFieldBegin(TXID_FIELD_DESC);
          struct.txid.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dropTransaction_argsTupleSchemeFactory implements SchemeFactory {
      public dropTransaction_argsTupleScheme getScheme() {
        return new dropTransaction_argsTupleScheme();
      }
    }

    private static class dropTransaction_argsTupleScheme extends TupleScheme<dropTransaction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dropTransaction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetScope()) {
          optionals.set(0);
        }
        if (struct.isSetStream()) {
          optionals.set(1);
        }
        if (struct.isSetTxid()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetScope()) {
          oprot.writeString(struct.scope);
        }
        if (struct.isSetStream()) {
          oprot.writeString(struct.stream);
        }
        if (struct.isSetTxid()) {
          struct.txid.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dropTransaction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.scope = iprot.readString();
          struct.setScopeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stream = iprot.readString();
          struct.setStreamIsSet(true);
        }
        if (incoming.get(2)) {
          struct.txid = new TxId();
          struct.txid.read(iprot);
          struct.setTxidIsSet(true);
        }
      }
    }

  }

  public static class dropTransaction_result implements org.apache.thrift.TBase<dropTransaction_result, dropTransaction_result._Fields>, java.io.Serializable, Cloneable, Comparable<dropTransaction_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dropTransaction_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dropTransaction_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dropTransaction_resultTupleSchemeFactory());
    }

    private TransactionStatus success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see TransactionStatus
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TransactionStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dropTransaction_result.class, metaDataMap);
    }

    public dropTransaction_result() {
    }

    public dropTransaction_result(
      TransactionStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dropTransaction_result(dropTransaction_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public dropTransaction_result deepCopy() {
      return new dropTransaction_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see TransactionStatus
     */
    public TransactionStatus getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see TransactionStatus
     */
    public dropTransaction_result setSuccess(TransactionStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TransactionStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dropTransaction_result)
        return this.equals((dropTransaction_result)that);
      return false;
    }

    public boolean equals(dropTransaction_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(dropTransaction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dropTransaction_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dropTransaction_resultStandardSchemeFactory implements SchemeFactory {
      public dropTransaction_resultStandardScheme getScheme() {
        return new dropTransaction_resultStandardScheme();
      }
    }

    private static class dropTransaction_resultStandardScheme extends StandardScheme<dropTransaction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dropTransaction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.emc.pravega.controller.stream.api.v1.TransactionStatus.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dropTransaction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dropTransaction_resultTupleSchemeFactory implements SchemeFactory {
      public dropTransaction_resultTupleScheme getScheme() {
        return new dropTransaction_resultTupleScheme();
      }
    }

    private static class dropTransaction_resultTupleScheme extends TupleScheme<dropTransaction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dropTransaction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dropTransaction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = com.emc.pravega.controller.stream.api.v1.TransactionStatus.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class checkTransactionStatus_args implements org.apache.thrift.TBase<checkTransactionStatus_args, checkTransactionStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkTransactionStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkTransactionStatus_args");

    private static final org.apache.thrift.protocol.TField SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scope", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STREAM_FIELD_DESC = new org.apache.thrift.protocol.TField("stream", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TXID_FIELD_DESC = new org.apache.thrift.protocol.TField("txid", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkTransactionStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkTransactionStatus_argsTupleSchemeFactory());
    }

    private String scope; // required
    private String stream; // required
    private TxId txid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCOPE((short)1, "scope"),
      STREAM((short)2, "stream"),
      TXID((short)3, "txid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCOPE
            return SCOPE;
          case 2: // STREAM
            return STREAM;
          case 3: // TXID
            return TXID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCOPE, new org.apache.thrift.meta_data.FieldMetaData("scope", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STREAM, new org.apache.thrift.meta_data.FieldMetaData("stream", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TXID, new org.apache.thrift.meta_data.FieldMetaData("txid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TxId.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkTransactionStatus_args.class, metaDataMap);
    }

    public checkTransactionStatus_args() {
    }

    public checkTransactionStatus_args(
      String scope,
      String stream,
      TxId txid)
    {
      this();
      this.scope = scope;
      this.stream = stream;
      this.txid = txid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkTransactionStatus_args(checkTransactionStatus_args other) {
      if (other.isSetScope()) {
        this.scope = other.scope;
      }
      if (other.isSetStream()) {
        this.stream = other.stream;
      }
      if (other.isSetTxid()) {
        this.txid = new TxId(other.txid);
      }
    }

    public checkTransactionStatus_args deepCopy() {
      return new checkTransactionStatus_args(this);
    }

    @Override
    public void clear() {
      this.scope = null;
      this.stream = null;
      this.txid = null;
    }

    public String getScope() {
      return this.scope;
    }

    public checkTransactionStatus_args setScope(String scope) {
      this.scope = scope;
      return this;
    }

    public void unsetScope() {
      this.scope = null;
    }

    /** Returns true if field scope is set (has been assigned a value) and false otherwise */
    public boolean isSetScope() {
      return this.scope != null;
    }

    public void setScopeIsSet(boolean value) {
      if (!value) {
        this.scope = null;
      }
    }

    public String getStream() {
      return this.stream;
    }

    public checkTransactionStatus_args setStream(String stream) {
      this.stream = stream;
      return this;
    }

    public void unsetStream() {
      this.stream = null;
    }

    /** Returns true if field stream is set (has been assigned a value) and false otherwise */
    public boolean isSetStream() {
      return this.stream != null;
    }

    public void setStreamIsSet(boolean value) {
      if (!value) {
        this.stream = null;
      }
    }

    public TxId getTxid() {
      return this.txid;
    }

    public checkTransactionStatus_args setTxid(TxId txid) {
      this.txid = txid;
      return this;
    }

    public void unsetTxid() {
      this.txid = null;
    }

    /** Returns true if field txid is set (has been assigned a value) and false otherwise */
    public boolean isSetTxid() {
      return this.txid != null;
    }

    public void setTxidIsSet(boolean value) {
      if (!value) {
        this.txid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCOPE:
        if (value == null) {
          unsetScope();
        } else {
          setScope((String)value);
        }
        break;

      case STREAM:
        if (value == null) {
          unsetStream();
        } else {
          setStream((String)value);
        }
        break;

      case TXID:
        if (value == null) {
          unsetTxid();
        } else {
          setTxid((TxId)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCOPE:
        return getScope();

      case STREAM:
        return getStream();

      case TXID:
        return getTxid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCOPE:
        return isSetScope();
      case STREAM:
        return isSetStream();
      case TXID:
        return isSetTxid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkTransactionStatus_args)
        return this.equals((checkTransactionStatus_args)that);
      return false;
    }

    public boolean equals(checkTransactionStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_scope = true && this.isSetScope();
      boolean that_present_scope = true && that.isSetScope();
      if (this_present_scope || that_present_scope) {
        if (!(this_present_scope && that_present_scope))
          return false;
        if (!this.scope.equals(that.scope))
          return false;
      }

      boolean this_present_stream = true && this.isSetStream();
      boolean that_present_stream = true && that.isSetStream();
      if (this_present_stream || that_present_stream) {
        if (!(this_present_stream && that_present_stream))
          return false;
        if (!this.stream.equals(that.stream))
          return false;
      }

      boolean this_present_txid = true && this.isSetTxid();
      boolean that_present_txid = true && that.isSetTxid();
      if (this_present_txid || that_present_txid) {
        if (!(this_present_txid && that_present_txid))
          return false;
        if (!this.txid.equals(that.txid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_scope = true && (isSetScope());
      list.add(present_scope);
      if (present_scope)
        list.add(scope);

      boolean present_stream = true && (isSetStream());
      list.add(present_stream);
      if (present_stream)
        list.add(stream);

      boolean present_txid = true && (isSetTxid());
      list.add(present_txid);
      if (present_txid)
        list.add(txid);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkTransactionStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetScope()).compareTo(other.isSetScope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScope()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scope, other.scope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStream()).compareTo(other.isSetStream());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStream()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stream, other.stream);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxid()).compareTo(other.isSetTxid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txid, other.txid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkTransactionStatus_args(");
      boolean first = true;

      sb.append("scope:");
      if (this.scope == null) {
        sb.append("null");
      } else {
        sb.append(this.scope);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stream:");
      if (this.stream == null) {
        sb.append("null");
      } else {
        sb.append(this.stream);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("txid:");
      if (this.txid == null) {
        sb.append("null");
      } else {
        sb.append(this.txid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (txid != null) {
        txid.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkTransactionStatus_argsStandardSchemeFactory implements SchemeFactory {
      public checkTransactionStatus_argsStandardScheme getScheme() {
        return new checkTransactionStatus_argsStandardScheme();
      }
    }

    private static class checkTransactionStatus_argsStandardScheme extends StandardScheme<checkTransactionStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkTransactionStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCOPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.scope = iprot.readString();
                struct.setScopeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STREAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stream = iprot.readString();
                struct.setStreamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TXID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.txid = new TxId();
                struct.txid.read(iprot);
                struct.setTxidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkTransactionStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.scope != null) {
          oprot.writeFieldBegin(SCOPE_FIELD_DESC);
          oprot.writeString(struct.scope);
          oprot.writeFieldEnd();
        }
        if (struct.stream != null) {
          oprot.writeFieldBegin(STREAM_FIELD_DESC);
          oprot.writeString(struct.stream);
          oprot.writeFieldEnd();
        }
        if (struct.txid != null) {
          oprot.writeFieldBegin(TXID_FIELD_DESC);
          struct.txid.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkTransactionStatus_argsTupleSchemeFactory implements SchemeFactory {
      public checkTransactionStatus_argsTupleScheme getScheme() {
        return new checkTransactionStatus_argsTupleScheme();
      }
    }

    private static class checkTransactionStatus_argsTupleScheme extends TupleScheme<checkTransactionStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkTransactionStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetScope()) {
          optionals.set(0);
        }
        if (struct.isSetStream()) {
          optionals.set(1);
        }
        if (struct.isSetTxid()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetScope()) {
          oprot.writeString(struct.scope);
        }
        if (struct.isSetStream()) {
          oprot.writeString(struct.stream);
        }
        if (struct.isSetTxid()) {
          struct.txid.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkTransactionStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.scope = iprot.readString();
          struct.setScopeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stream = iprot.readString();
          struct.setStreamIsSet(true);
        }
        if (incoming.get(2)) {
          struct.txid = new TxId();
          struct.txid.read(iprot);
          struct.setTxidIsSet(true);
        }
      }
    }

  }

  public static class checkTransactionStatus_result implements org.apache.thrift.TBase<checkTransactionStatus_result, checkTransactionStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkTransactionStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkTransactionStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkTransactionStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkTransactionStatus_resultTupleSchemeFactory());
    }

    private TxState success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see TxState
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TxState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkTransactionStatus_result.class, metaDataMap);
    }

    public checkTransactionStatus_result() {
    }

    public checkTransactionStatus_result(
      TxState success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkTransactionStatus_result(checkTransactionStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public checkTransactionStatus_result deepCopy() {
      return new checkTransactionStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see TxState
     */
    public TxState getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see TxState
     */
    public checkTransactionStatus_result setSuccess(TxState success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TxState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkTransactionStatus_result)
        return this.equals((checkTransactionStatus_result)that);
      return false;
    }

    public boolean equals(checkTransactionStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(checkTransactionStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkTransactionStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkTransactionStatus_resultStandardSchemeFactory implements SchemeFactory {
      public checkTransactionStatus_resultStandardScheme getScheme() {
        return new checkTransactionStatus_resultStandardScheme();
      }
    }

    private static class checkTransactionStatus_resultStandardScheme extends StandardScheme<checkTransactionStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkTransactionStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.emc.pravega.controller.stream.api.v1.TxState.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkTransactionStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkTransactionStatus_resultTupleSchemeFactory implements SchemeFactory {
      public checkTransactionStatus_resultTupleScheme getScheme() {
        return new checkTransactionStatus_resultTupleScheme();
      }
    }

    private static class checkTransactionStatus_resultTupleScheme extends TupleScheme<checkTransactionStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkTransactionStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkTransactionStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = com.emc.pravega.controller.stream.api.v1.TxState.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
