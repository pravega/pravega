/**
 *
 *  Copyright (c) 2017 Dell Inc., or its subsidiaries.
 *
 */
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.emc.pravega.controller.stream.api.v1;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-13")
public class FutureSegment implements org.apache.thrift.TBase<FutureSegment, FutureSegment._Fields>, java.io.Serializable, Cloneable, Comparable<FutureSegment> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FutureSegment");

  private static final org.apache.thrift.protocol.TField FUTURE_SEGMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("futureSegment", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PRECEDING_SEGMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("precedingSegment", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FutureSegmentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FutureSegmentTupleSchemeFactory());
  }

  private SegmentId futureSegment; // required
  private SegmentId precedingSegment; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FUTURE_SEGMENT((short)1, "futureSegment"),
    PRECEDING_SEGMENT((short)2, "precedingSegment");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FUTURE_SEGMENT
          return FUTURE_SEGMENT;
        case 2: // PRECEDING_SEGMENT
          return PRECEDING_SEGMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FUTURE_SEGMENT, new org.apache.thrift.meta_data.FieldMetaData("futureSegment", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SegmentId.class)));
    tmpMap.put(_Fields.PRECEDING_SEGMENT, new org.apache.thrift.meta_data.FieldMetaData("precedingSegment", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SegmentId.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FutureSegment.class, metaDataMap);
  }

  public FutureSegment() {
  }

  public FutureSegment(
    SegmentId futureSegment,
    SegmentId precedingSegment)
  {
    this();
    this.futureSegment = futureSegment;
    this.precedingSegment = precedingSegment;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FutureSegment(FutureSegment other) {
    if (other.isSetFutureSegment()) {
      this.futureSegment = new SegmentId(other.futureSegment);
    }
    if (other.isSetPrecedingSegment()) {
      this.precedingSegment = new SegmentId(other.precedingSegment);
    }
  }

  public FutureSegment deepCopy() {
    return new FutureSegment(this);
  }

  @Override
  public void clear() {
    this.futureSegment = null;
    this.precedingSegment = null;
  }

  public SegmentId getFutureSegment() {
    return this.futureSegment;
  }

  public FutureSegment setFutureSegment(SegmentId futureSegment) {
    this.futureSegment = futureSegment;
    return this;
  }

  public void unsetFutureSegment() {
    this.futureSegment = null;
  }

  /** Returns true if field futureSegment is set (has been assigned a value) and false otherwise */
  public boolean isSetFutureSegment() {
    return this.futureSegment != null;
  }

  public void setFutureSegmentIsSet(boolean value) {
    if (!value) {
      this.futureSegment = null;
    }
  }

  public SegmentId getPrecedingSegment() {
    return this.precedingSegment;
  }

  public FutureSegment setPrecedingSegment(SegmentId precedingSegment) {
    this.precedingSegment = precedingSegment;
    return this;
  }

  public void unsetPrecedingSegment() {
    this.precedingSegment = null;
  }

  /** Returns true if field precedingSegment is set (has been assigned a value) and false otherwise */
  public boolean isSetPrecedingSegment() {
    return this.precedingSegment != null;
  }

  public void setPrecedingSegmentIsSet(boolean value) {
    if (!value) {
      this.precedingSegment = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FUTURE_SEGMENT:
      if (value == null) {
        unsetFutureSegment();
      } else {
        setFutureSegment((SegmentId)value);
      }
      break;

    case PRECEDING_SEGMENT:
      if (value == null) {
        unsetPrecedingSegment();
      } else {
        setPrecedingSegment((SegmentId)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FUTURE_SEGMENT:
      return getFutureSegment();

    case PRECEDING_SEGMENT:
      return getPrecedingSegment();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FUTURE_SEGMENT:
      return isSetFutureSegment();
    case PRECEDING_SEGMENT:
      return isSetPrecedingSegment();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FutureSegment)
      return this.equals((FutureSegment)that);
    return false;
  }

  public boolean equals(FutureSegment that) {
    if (that == null)
      return false;

    boolean this_present_futureSegment = true && this.isSetFutureSegment();
    boolean that_present_futureSegment = true && that.isSetFutureSegment();
    if (this_present_futureSegment || that_present_futureSegment) {
      if (!(this_present_futureSegment && that_present_futureSegment))
        return false;
      if (!this.futureSegment.equals(that.futureSegment))
        return false;
    }

    boolean this_present_precedingSegment = true && this.isSetPrecedingSegment();
    boolean that_present_precedingSegment = true && that.isSetPrecedingSegment();
    if (this_present_precedingSegment || that_present_precedingSegment) {
      if (!(this_present_precedingSegment && that_present_precedingSegment))
        return false;
      if (!this.precedingSegment.equals(that.precedingSegment))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_futureSegment = true && (isSetFutureSegment());
    list.add(present_futureSegment);
    if (present_futureSegment)
      list.add(futureSegment);

    boolean present_precedingSegment = true && (isSetPrecedingSegment());
    list.add(present_precedingSegment);
    if (present_precedingSegment)
      list.add(precedingSegment);

    return list.hashCode();
  }

  @Override
  public int compareTo(FutureSegment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFutureSegment()).compareTo(other.isSetFutureSegment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFutureSegment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.futureSegment, other.futureSegment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrecedingSegment()).compareTo(other.isSetPrecedingSegment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrecedingSegment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.precedingSegment, other.precedingSegment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FutureSegment(");
    boolean first = true;

    sb.append("futureSegment:");
    if (this.futureSegment == null) {
      sb.append("null");
    } else {
      sb.append(this.futureSegment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("precedingSegment:");
    if (this.precedingSegment == null) {
      sb.append("null");
    } else {
      sb.append(this.precedingSegment);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (futureSegment == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'futureSegment' was not present! Struct: " + toString());
    }
    if (precedingSegment == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'precedingSegment' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (futureSegment != null) {
      futureSegment.validate();
    }
    if (precedingSegment != null) {
      precedingSegment.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FutureSegmentStandardSchemeFactory implements SchemeFactory {
    public FutureSegmentStandardScheme getScheme() {
      return new FutureSegmentStandardScheme();
    }
  }

  private static class FutureSegmentStandardScheme extends StandardScheme<FutureSegment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FutureSegment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FUTURE_SEGMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.futureSegment = new SegmentId();
              struct.futureSegment.read(iprot);
              struct.setFutureSegmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRECEDING_SEGMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.precedingSegment = new SegmentId();
              struct.precedingSegment.read(iprot);
              struct.setPrecedingSegmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FutureSegment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.futureSegment != null) {
        oprot.writeFieldBegin(FUTURE_SEGMENT_FIELD_DESC);
        struct.futureSegment.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.precedingSegment != null) {
        oprot.writeFieldBegin(PRECEDING_SEGMENT_FIELD_DESC);
        struct.precedingSegment.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FutureSegmentTupleSchemeFactory implements SchemeFactory {
    public FutureSegmentTupleScheme getScheme() {
      return new FutureSegmentTupleScheme();
    }
  }

  private static class FutureSegmentTupleScheme extends TupleScheme<FutureSegment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FutureSegment struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.futureSegment.write(oprot);
      struct.precedingSegment.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FutureSegment struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.futureSegment = new SegmentId();
      struct.futureSegment.read(iprot);
      struct.setFutureSegmentIsSet(true);
      struct.precedingSegment = new SegmentId();
      struct.precedingSegment.read(iprot);
      struct.setPrecedingSegmentIsSet(true);
    }
  }

}

