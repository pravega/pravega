/**
 * Copyright Pravega Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins.withId('java') {
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'jacoco'
    apply plugin: 'signing'
    apply plugin: 'maven'

    compileJava {
        options.compilerArgs.addAll([
                "-Xlint:deprecation",
                "-Xlint:divzero",
                "-Xlint:empty",
                "-Xlint:fallthrough",
                "-Xlint:finally",
                "-Xlint:overrides",
                "-Xlint:path",
                "-Werror",
                "-Xlint:unchecked",
                "--release",
                getDefaultJavaVersion()
        ])
    }

    compileTestJava {
        options.compilerArgs.addAll(["--release",  getDefaultJavaVersion()])
    }

    archivesBaseName = "pravega" + project.path.replace(':', '-')

    // Include LICENSE and NOTICE files in every jar file 
    jar {
        into ('META-INF') {
            from project.rootDir
            include 'LICENSE'
            include 'NOTICE'
        }
    }

    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.java
    }
    artifacts { archives sourceJar }

    task generateJavadoc(type: Javadoc) {
        dependsOn delombok
        source = delombok.outputDir
        classpath = sourceSets.main.compileClasspath
        failOnError = false
    }
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from generateJavadoc
    }
    artifacts { archives javadocJar }

    task testJar(type: Jar) {
        classifier = 'tests'
        from sourceSets.test.output
    }
    artifacts { testRuntime testJar }

    if (project.hasProperty("doSigning")) {
        signing {
            sign configurations.archives
        }
        // Default the secretKeyRingFile to the current user's home
        if (!project.property("signing.secretKeyRingFile")) {
            def secretKeyPath = project.file("${System.getProperty("user.home")}/.gnupg/secring.gpg").absolutePath
            project.setProperty("signing.secretKeyRingFile", secretKeyPath)
        }
    }

    tasks.withType(Test) {
        systemProperties 'logback.configurationFile' : new File(buildDir,'resources/test/logback.xml').absolutePath
        systemProperties 'ThreadLeakDetectionLevel' : 'Aggressive' // Catch all ThreadPool Leaks and stop the build if any are found.
        testLogging.showStandardStreams = false
        testLogging.exceptionFormat = "FULL"
        testLogging.showCauses = true
        testLogging.showExceptions = true
        testLogging.showStackTraces = true
        testLogging.events = ["FAILED"]
        maxParallelForks = System.properties['maxParallelForks'] ? System.properties['maxParallelForks'].toInteger() : 1
        minHeapSize = "128m"
        maxHeapSize = "512m"
        def jvmArgsCopy = jvmArgs
        jvmArgsCopy.add("-XX:MaxDirectMemorySize=4g")
        jvmArgs = jvmArgsCopy
        def outputCache = new LinkedList<String>()

        beforeTest { descriptor ->
            logger.lifecycle("\nRunning test: " + descriptor.getClassName() + " > " + descriptor.getDisplayName());
            outputCache.clear()
        }

        onOutput { descriptor, event ->
            outputCache.add(event.getMessage())
            while (outputCache.size() > 300) outputCache.remove()
        }

        afterTest { descriptor, result ->
            if (result.resultType == TestResult.ResultType.FAILURE && outputCache.size() > 0) {
                println()
                println("Output of ${descriptor.getClassName()}.${descriptor.getDisplayName()} (Last 300 lines):")
                outputCache.each { print(" > $it") }
            }
        }
    }

    dependencies {
        // The production code uses the SLF4J logging API at compile time
        compile group: 'org.slf4j', name:'slf4j-api', version: slf4jApiVersion
        testCompile group: 'junit', name:'junit', version: junitVersion
        testCompile "org.mockito:mockito-core:${mockitoVersion}"
    }
}

