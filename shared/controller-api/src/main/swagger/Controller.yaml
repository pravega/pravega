#
# Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Description of the Pravega Controller APIs.

swagger: "2.0"
info:
  description: "List of admin REST APIs for the pravega controller service."
  version: "0.0.1"
  title: Pravega Controller APIs
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0"
basePath: "/v1"
tags:
- name: "Scopes"
  description: "Scope related APIs"
  externalDocs:
    description: "Find out more about pravega"
    url: "https://pravega.io"
- name: "Streams"
  description: "Stream related APIs"
  externalDocs:
    description: "Find out more about pravega"
    url: "https://pravega.io"
- name: "ReaderGroups"
  description: "Reader group related APIs"
  externalDocs:
    description: "Find out more about pravega"
    url: "https://pravega.io"
schemes:
  - http
paths:
  /scopes:
    get:
      tags:
      - "Scopes"
      operationId: listScopes
      description: List all available scopes in pravega
      produces:
        - application/json
      responses:
        200:
          description: List of currently available scopes
          schema:
            $ref: "#/definitions/ScopesList"
        500:
          description: Internal server error while fetching list of scopes
    post:
      tags:
      - "Scopes"
      operationId: createScope
      description: Create a new scope
      consumes:
        - application/json
      parameters:
        - in: body
          name: CreateScopeRequest
          description: The scope configuration
          required: true
          schema:
            type: object
            properties:
              scopeName:
                type: string
      produces:
        - application/json
      responses:
        201:
          description: Successfully created the scope
          schema:
            $ref: "#/definitions/ScopeProperty"
        409:
          description: Scope with the given name already exists
        500:
          description: Internal server error while creating a scope
  /scopes/{scopeName}:
    parameters:
      - in: path
        name: scopeName
        description: Scope name
        required: true
        type: string
    get:
      tags:
      - "Scopes"
      operationId: getScope
      description: Retrieve details of an existing scope
      produces:
        - application/json
      responses:
        200:
          description: Successfully retrieved the scope details
          schema:
            $ref: "#/definitions/ScopeProperty"
        404:
          description: Scope with the given name not found
        500:
          description: Internal server error while fetching scope details
    delete:
      tags:
      - "Scopes"
      operationId: deleteScope
      description: Delete a scope
      responses:
        204:
          description: Successfully deleted the scope
        404:
          description: Scope not found
        412:
          description: Cannot delete scope since it has non-empty list of streams
        500:
          description: Internal server error while deleting a scope
  /scopes/{scopeName}/streams:
    parameters:
      - in: path
        name: scopeName
        description: Scope name
        required: true
        type: string
    get:
      tags:
      - "Streams"
      parameters:
        - in: query
          name: showInternalStreams
          description: Optional flag whether to display system created streams. If not specified only user created streams will be returned
          required: false
          type: string
      operationId: listStreams
      description: List streams within the given scope
      produces:
        - application/json
      responses:
        200:
          description: List of all streams configured for the given scope
          schema:
            $ref: "#/definitions/StreamsList"
        404:
          description: Scope not found
        500:
          description: Internal server error while fetching the list of streams for the given scope
    post:
      tags:
      - "Streams"
      operationId: createStream
      description: Create a new stream
      consumes:
        - application/json
      parameters:
        - in: body
          name: CreateStreamRequest
          description: The stream configuration
          required: true
          schema:
            type: object
            properties:
              streamName:
                type: string
              scalingPolicy:
                  $ref: "#/definitions/ScalingConfig"
              retentionPolicy:
                  $ref: "#/definitions/RetentionConfig"
      produces:
        - application/json
      responses:
        201:
          description: Successfully created the stream with the given configuration
          schema:
            $ref: "#/definitions/StreamProperty"
        404:
          description: Scope not found
        409:
          description: Stream with given name already exists
        500:
          description: Internal server error while creating a stream
  /scopes/{scopeName}/streams/{streamName}:
    parameters:
      - in: path
        name: scopeName
        description: Scope name
        required: true
        type: string
      - in: path
        name: streamName
        description: Stream name
        required: true
        type: string
    get:
      tags:
      - "Streams"
      operationId: getStream
      description: Fetch the properties of an existing stream
      produces:
        - application/json
      responses:
        200:
          description: Found stream properties
          schema:
            $ref: "#/definitions/StreamProperty"
        404:
          description: Scope or stream with given name not found
        500:
          description: Internal server error while fetching stream details
    put:
      tags:
      - "Streams"
      operationId: updateStream
      description: Update configuration of an existing stream
      consumes:
        - application/json
      parameters:
        - in: body
          name: UpdateStreamRequest
          description: The new stream configuration
          required: true
          schema:
            type: object
            properties:
              scalingPolicy:
                  $ref: "#/definitions/ScalingConfig"
              retentionPolicy:
                  $ref: "#/definitions/RetentionConfig"
      produces:
        - application/json
      responses:
        200:
          description: Successfully updated the stream configuration
          schema:
            $ref: "#/definitions/StreamProperty"
        404:
          description: Scope or stream with given name not found
        500:
          description: Internal server error while updating the stream
    delete:
      tags:
      - "Streams"
      operationId: deleteStream
      description: Delete a stream
      responses:
        204:
          description: Successfully deleted the stream
        404:
          description: Stream not found
        412:
          description: Cannot delete stream since it is not sealed
        500:
          description: Internal server error while deleting the stream
  /scopes/{scopeName}/streams/{streamName}/state:
    parameters:
      - in: path
        name: scopeName
        description: Scope name
        required: true
        type: string
      - in: path
        name: streamName
        description: Stream name
        required: true
        type: string
    put:
      tags:
      - "Streams"
      operationId: updateStreamState
      description: Updates the current state of the stream
      consumes:
        - application/json
      parameters:
        - in: body
          name: UpdateStreamStateRequest
          description: The state info to be updated
          required: true
          schema:
            $ref: "#/definitions/StreamState"
      produces:
        - application/json
      responses:
        200:
          description: Successfully updated the stream state
          schema:
            $ref: "#/definitions/StreamState"
        404:
          description: Scope or stream with given name not found
        500:
          description: Internal server error while updating the stream state
  /scopes/{scopeName}/streams/{streamName}/scaling-events:
    parameters:
      - in: path
        name: scopeName
        description: Scope name
        required: true
        type: string
      - in: path
        name: streamName
        description: Stream name
        required: true
        type: string
    get:
      tags:
      - "Streams"
      parameters:
        - in: query
          name: from
          description: Parameter to display scaling events from that particular datetime. Input should be milliseconds from Jan 1 1970.
          required: true
          type: integer
          format: int64
        - in: query
          name: to
          description: Parameter to display scaling events to that particular datetime. Input should be milliseconds from Jan 1 1970.
          required: true
          type: integer
          format: int64
      operationId: getScalingEvents
      description: Get scaling events for a given datetime period.
      produces:
        - application/json
      responses:
        200:
          description: Successfully fetched list of scaling events.
          schema:
            $ref: "#/definitions/ScalingEventList"
        404:
          description: Scope/Stream not found.
        500:
          description: Internal Server error while fetching scaling events.
  /scopes/{scopeName}/readergroups:
    parameters:
      - in: path
        name: scopeName
        description: Scope name
        required: true
        type: string
    get:
      tags:
      - "ReaderGroups"
      operationId: listReaderGroups
      description: List reader groups within the given scope
      produces:
        - application/json
      responses:
        200:
          description: List of all reader groups configured for the given scope
          schema:
            $ref: "#/definitions/ReaderGroupsList"
        404:
          description: Scope not found
        500:
          description: Internal server error while fetching the list of reader groups for the given scope
  /scopes/{scopeName}/readergroups/{readerGroupName}:
    parameters:
      - in: path
        name: scopeName
        description: Scope name
        required: true
        type: string
      - in: path
        name: readerGroupName
        description: Reader group name
        required: true
        type: string
    get:
      tags:
      - "ReaderGroups"
      operationId: getReaderGroup
      description: Fetch the properties of an existing reader group
      produces:
        - application/json
      responses:
        200:
          description: Found reader group properties
          schema:
            $ref: "#/definitions/ReaderGroupProperty"
        404:
          description: Scope or reader group with given name not found
        500:
          description: Internal server error while fetching reader group details
definitions:
  ScalingEventList:
    type: object
    properties:
      scalingEvents:
        type: array
        items:
          $ref: "#/definitions/ScaleMetadata"
  StreamsList:
    type: object
    properties:
      streams:
        type: array
        items:
          $ref: "#/definitions/StreamProperty"
  ScopesList:
    type: object
    properties:
      scopes:
        type: array
        items:
          $ref: "#/definitions/ScopeProperty"
  ScopeProperty:
    type: object
    properties:
      scopeName:
        type: string
  StreamProperty:
    type: object
    properties:
      scopeName:
        type: string
      streamName:
        type: string
      scalingPolicy:
          $ref: "#/definitions/ScalingConfig"
      retentionPolicy:
          $ref: "#/definitions/RetentionConfig"
  ScalingConfig:
    type: object
    properties:
      type:
        type: string
        enum:
        - FIXED_NUM_SEGMENTS
        - BY_RATE_IN_KBYTES_PER_SEC
        - BY_RATE_IN_EVENTS_PER_SEC
      targetRate:
        type: integer
        format: int32
      scaleFactor:
        type: integer
        format: int32
      minSegments:
        type: integer
        format: int32
  RetentionConfig:
    type: object
    properties:
      type:
        type: string
        description: Indicates if retention is by space or time.
        enum:
        - LIMITED_DAYS     # Time based retention, for granularity lower than DAYS use timeBasedRetention field to populate the value
        - LIMITED_SIZE_MB  # Space based retention
      value:
        type: integer
        format: int64
      timeBasedRetention:
        $ref: "#/definitions/TimeBasedRetention"
  StreamState:
    type: object
    properties:
      streamState:
        type: string
        enum:
        - SEALED
  ScaleMetadata:
    type: object
    properties:
      timestamp:
        type: integer
        format: int64
      segmentList:
        type: array
        items:
          $ref: "#/definitions/Segment"
      splits:
        type: integer
        format: int64
      merges:
        type: integer
        format: int64
  Segment:
    type: object
    properties:
      number:
        type: integer
        format: int32
      startTime:
        type: integer
        format: int64
      keyStart:
        type: integer
        format: double
      keyEnd:
        type: integer
        format: double
  ReaderGroupsList:
    type: object
    properties:
      readerGroups:
        type: array
        items:
          type: object
          properties:
            readerGroupName:
              type: string
  ReaderGroupProperty:
    type: object
    properties:
      scopeName:
        type: string
      readerGroupName:
        type: string
      streamList:
        type: array
        items:
          type: string
      onlineReaderIds:
        type: array
        items:
          type: string
  TimeBasedRetention:
    type: object
    properties:
      days:
        type: integer
        format: int64
      hours:
        type: integer
        format: int64
      minutes:
        type: integer
        format: int64